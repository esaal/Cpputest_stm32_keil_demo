<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [CPPUTest\CPPUTest.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image CPPUTest\CPPUTest.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6120001: Last Updated: Tue Oct 15 15:01:40 2019
<BR><P>
<H3>Maximum Stack Usage =        512 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
UtestShell::assertBinaryEqual(const void*, const void*, unsigned, const char*, const char*, int, const TestTerminator&) &rArr; BinaryEqualFailure::BinaryEqualFailure(UtestShell*, const char*, int, const unsigned char*, const unsigned char*, unsigned, const SimpleString&) &rArr; StringFromBinaryOrNull(const unsigned char*, unsigned) &rArr; StringFromBinary(const unsigned char*, unsigned) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[229]">unw_getcontext</a>
 <LI><a href="#[386]">libunwind::Registers_arm::saveVFPWithFSTMD(void*)</a>
 <LI><a href="#[384]">libunwind::Registers_arm::saveVFPWithFSTMX(void*)</a>
 <LI><a href="#[385]">libunwind::Registers_arm::saveVFPv3(void*)</a>
 <LI><a href="#[38c]">libunwind::Registers_arm::restoreCoreAndJumpTo()</a>
 <LI><a href="#[38e]">libunwind::Registers_arm::restoreVFPWithFLDMD(void*)</a>
 <LI><a href="#[38d]">libunwind::Registers_arm::restoreVFPWithFLDMX(void*)</a>
 <LI><a href="#[38f]">libunwind::Registers_arm::restoreVFPv3(void*)</a>
 <LI><a href="#[3cf]">_Unwind_Complete</a>
 <LI><a href="#[3ab]">_Unwind_DeleteException</a>
 <LI><a href="#[225]">_Unwind_GetLanguageSpecificData</a>
 <LI><a href="#[227]">_Unwind_GetRegionStart</a>
 <LI><a href="#[228]">_Unwind_RaiseException</a>
 <LI><a href="#[22c]">_Unwind_Resume</a>
 <LI><a href="#[22d]">_Unwind_VRS_Get</a>
 <LI><a href="#[231]">_Unwind_VRS_Interpret</a>
 <LI><a href="#[232]">_Unwind_VRS_Pop</a>
 <LI><a href="#[234]">_Unwind_VRS_Set</a>
 <LI><a href="#[2bc]">__cxxabiv1::__enum_type_info::~__enum_type_info()</a>
 <LI><a href="#[3e7]">__cxxabiv1::__enum_type_info::~__enum_type_info__sub_object()</a>
 <LI><a href="#[3e8]">__cxxabiv1::__shim_type_info::~__shim_type_info()</a>
 <LI><a href="#[1b7]">__cxxabiv1::__shim_type_info::~__shim_type_info__sub_object()</a>
 <LI><a href="#[3e9]">__cxxabiv1::__array_type_info::~__array_type_info()</a>
 <LI><a href="#[3ea]">__cxxabiv1::__array_type_info::~__array_type_info__sub_object()</a>
 <LI><a href="#[3eb]">__cxxabiv1::__class_type_info::~__class_type_info()</a>
 <LI><a href="#[3ec]">__cxxabiv1::__class_type_info::~__class_type_info__sub_object()</a>
 <LI><a href="#[3ed]">__cxxabiv1::__pbase_type_info::~__pbase_type_info()</a>
 <LI><a href="#[3ee]">__cxxabiv1::__pbase_type_info::~__pbase_type_info__sub_object()</a>
 <LI><a href="#[3ef]">__cxxabiv1::__pointer_type_info::~__pointer_type_info()</a>
 <LI><a href="#[3f0]">__cxxabiv1::__pointer_type_info::~__pointer_type_info__sub_object()</a>
 <LI><a href="#[3f1]">__cxxabiv1::__function_type_info::~__function_type_info()</a>
 <LI><a href="#[3f2]">__cxxabiv1::__function_type_info::~__function_type_info__sub_object()</a>
 <LI><a href="#[3f3]">__cxxabiv1::__si_class_type_info::~__si_class_type_info()</a>
 <LI><a href="#[3f4]">__cxxabiv1::__si_class_type_info::~__si_class_type_info__sub_object()</a>
 <LI><a href="#[3f5]">__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()</a>
 <LI><a href="#[3f6]">__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info__sub_object()</a>
 <LI><a href="#[3f7]">__cxxabiv1::__fundamental_type_info::~__fundamental_type_info()</a>
 <LI><a href="#[3f8]">__cxxabiv1::__fundamental_type_info::~__fundamental_type_info__sub_object()</a>
 <LI><a href="#[3f9]">__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()</a>
 <LI><a href="#[3fa]">__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info__sub_object()</a>
 <LI><a href="#[1b8]">__cxxabiv1::__class_type_info::~__class_type_info__deallocating()</a>
 <LI><a href="#[2be]">__cxxabiv1::__free_with_fallback(void*)</a>
 <LI><a href="#[1bf]">__cxxabiv1::__si_class_type_info::~__si_class_type_info__deallocating()</a>
 <LI><a href="#[3a3]">__cxxabiv1::__isOurExceptionClass(const _Unwind_Control_Block*)</a>
 <LI><a href="#[2c0]">__cxxabiv1::__calloc_with_fallback(unsigned, unsigned)</a>
 <LI><a href="#[1c3]">__cxxabiv1::__fundamental_type_info::~__fundamental_type_info__deallocating()</a>
 <LI><a href="#[2c2]">__cxxabiv1::__aligned_free_with_fallback(void*)</a>
 <LI><a href="#[2c3]">__cxxabiv1::__aligned_malloc_with_fallback(unsigned)</a>
 <LI><a href="#[1d4]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::saveVFPAsX()</a>
 <LI><a href="#[1cb]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFloatReg(int)</a>
 <LI><a href="#[1cc]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setFloatReg(int, unsigned long long)</a>
 <LI><a href="#[1d0]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::isSignalFrame()</a>
 <LI><a href="#[387]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::stepWithEHABI()</a>
 <LI><a href="#[1ca]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::validFloatReg(int)</a>
 <LI><a href="#[1d1]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFunctionName(char*, unsigned, unsigned*)</a>
 <LI><a href="#[1d3]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getRegisterName(int)</a>
 <LI><a href="#[38a]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&)</a>
 <LI><a href="#[1d2]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool)</a>
 <LI><a href="#[1cd]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::step()</a>
 <LI><a href="#[1c8]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getReg(int)</a>
 <LI><a href="#[1cf]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::jumpto()</a>
 <LI><a href="#[1c9]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setReg(int, unsigned)</a>
 <LI><a href="#[1ce]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfo(unw_proc_info_t*)</a>
 <LI><a href="#[1c7]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::validReg(int)</a>
 <LI><a href="#[1c6]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::~UnwindCursor__deallocating()</a>
 <LI><a href="#[389]">libunwind::Registers_arm::getRegisterName(int)</a>
 <LI><a href="#[38b]">libunwind::Registers_arm::restoreSavedFloatRegisters()</a>
 <LI><a href="#[1c5]">libunwind::AbstractUnwindCursor::~AbstractUnwindCursor__sub_object()</a>
 <LI><a href="#[1b9]">__cxxabiv1::__shim_type_info::noop1() const</a>
 <LI><a href="#[1ba]">__cxxabiv1::__shim_type_info::noop2() const</a>
 <LI><a href="#[1bc]">__cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</a>
 <LI><a href="#[1bd]">__cxxabiv1::__class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const</a>
 <LI><a href="#[1be]">__cxxabiv1::__class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const</a>
 <LI><a href="#[393]">__cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int) const</a>
 <LI><a href="#[1bb]">__cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a>
 <LI><a href="#[395]">__cxxabiv1::__pbase_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a>
 <LI><a href="#[396]">__cxxabiv1::__pointer_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const</a>
 <LI><a href="#[398]">__cxxabiv1::__pointer_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a>
 <LI><a href="#[1c0]">__cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</a>
 <LI><a href="#[1c1]">__cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const</a>
 <LI><a href="#[1c2]">__cxxabiv1::__si_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const</a>
 <LI><a href="#[399]">__cxxabiv1::__vmi_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</a>
 <LI><a href="#[1c4]">__cxxabiv1::__fundamental_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a>
 <LI><a href="#[397]">__cxxabiv1::__pointer_to_member_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const</a>
 <LI><a href="#[39a]">__cxxabiv1::__pointer_to_member_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a>
 <LI><a href="#[1d7]">std::bad_exception::what() const</a>
 <LI><a href="#[1d9]">std::bad_array_new_length::what() const</a>
 <LI><a href="#[1db]">std::bad_alloc::what() const</a>
 <LI><a href="#[1d6]">std::bad_exception::~bad_exception__deallocating()</a>
 <LI><a href="#[439]">std::bad_array_new_length::bad_array_new_length()</a>
 <LI><a href="#[43a]">std::bad_array_new_length::bad_array_new_length__sub_object()</a>
 <LI><a href="#[1d8]">std::bad_array_new_length::~bad_array_new_length__deallocating()</a>
 <LI><a href="#[27d]">std::bad_alloc::bad_alloc()</a>
 <LI><a href="#[43b]">std::bad_alloc::bad_alloc__sub_object()</a>
 <LI><a href="#[1da]">std::bad_alloc::~bad_alloc__deallocating()</a>
 <LI><a href="#[a4]">std::bad_exception::~bad_exception()</a>
 <LI><a href="#[43c]">std::bad_exception::~bad_exception__sub_object()</a>
 <LI><a href="#[43d]">std::bad_array_new_length::~bad_array_new_length()</a>
 <LI><a href="#[43e]">std::bad_array_new_length::~bad_array_new_length__sub_object()</a>
 <LI><a href="#[73]">std::bad_alloc::~bad_alloc()</a>
 <LI><a href="#[43f]">std::bad_alloc::~bad_alloc__sub_object()</a>
 <LI><a href="#[440]">std::exception::~exception()</a>
 <LI><a href="#[1d5]">std::exception::~exception__sub_object()</a>
 <LI><a href="#[441]">std::type_info::~type_info()</a>
 <LI><a href="#[2bd]">std::type_info::~type_info__sub_object()</a>
 <LI><a href="#[39f]">std::unexpected()</a>
 <LI><a href="#[2cb]">std::__terminate(void(*)())</a>
 <LI><a href="#[3a0]">std::__unexpected(void(*)())</a>
 <LI><a href="#[3a8]">std::get_terminate()</a>
 <LI><a href="#[442]">std::set_terminate(void(*)())</a>
 <LI><a href="#[3a9]">std::get_unexpected()</a>
 <LI><a href="#[443]">std::set_unexpected(void(*)())</a>
 <LI><a href="#[a3]">std::terminate()</a>
 <LI><a href="#[9f]">__aeabi_unwind_cpp_pr0</a>
 <LI><a href="#[a0]">__aeabi_unwind_cpp_pr1</a>
 <LI><a href="#[a1]">__aeabi_unwind_cpp_pr2</a>
 <LI><a href="#[3a4]">__cxa_allocate_dependent_exception</a>
 <LI><a href="#[27c]">__cxa_allocate_exception</a>
 <LI><a href="#[2ca]">__cxa_begin_catch</a>
 <LI><a href="#[3a7]">__cxa_begin_cleanup</a>
 <LI><a href="#[3a5]">__cxa_call_unexpected</a>
 <LI><a href="#[2cd]">__cxa_decrement_exception_refcount</a>
 <LI><a href="#[383]">__cxa_end_catch</a>
 <LI><a href="#[3a6]">__cxa_get_globals</a>
 <LI><a href="#[3a2]">__cxa_get_globals_fast</a>
 <LI><a href="#[263]">__cxa_guard_acquire</a>
 <LI><a href="#[b4]">__cxa_pure_virtual</a>
 <LI><a href="#[3aa]">__cxa_rethrow</a>
 <LI><a href="#[3ac]">__cxa_rethrow_primary_exception</a>
 <LI><a href="#[27e]">__cxa_throw</a>
 <LI><a href="#[394]">__dynamic_cast</a>
 <LI><a href="#[3ad]">__gnu_unwind_frame</a>
 <LI><a href="#[a9]">__gxx_personality_v0</a>
 <LI><a href="#[3a1]">abort_message</a>
 <LI><a href="#[388]">decode_eht_entry</a>
 <LI><a href="#[230]">unw_get_fpreg</a>
 <LI><a href="#[226]">unw_get_proc_info</a>
 <LI><a href="#[22e]">unw_get_reg</a>
 <LI><a href="#[22a]">unw_init_local</a>
 <LI><a href="#[279]">unw_resume</a>
 <LI><a href="#[22f]">unw_save_vfp_as_X</a>
 <LI><a href="#[235]">unw_set_fpreg</a>
 <LI><a href="#[233]">unw_set_reg</a>
 <LI><a href="#[2f2]">unw_step</a>
 <LI><a href="#[2c9]">_ZN10__cxxabiv1L12failed_throwEPNS_15__cxa_exceptionE</a>
 <LI><a href="#[a6]">_ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block</a>
 <LI><a href="#[a5]">_ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block</a>
 <LI><a href="#[1f4]">__cxa_end_cleanup_impl</a>
 <LI><a href="#[2c4]">_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context</a>
 <LI><a href="#[2cc]">_ZN10__cxxabiv1L13set_registersEP21_Unwind_Control_BlockP15_Unwind_ContextRKNS_12_GLOBAL__N_112scan_resultsE</a>
 <LI><a href="#[2c7]">_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block</a>
 <LI><a href="#[2c6]">_ZN10__cxxabiv1L18readEncodedPointerEPPKhh</a>
 <LI><a href="#[2c8]">_ZN10__cxxabiv1L24exception_spec_can_catchExPKhhPKNS_16__shim_type_infoEPvP21_Unwind_Control_Block</a>
 <LI><a href="#[22b]">_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb</a>
 <LI><a href="#[2f1]">&lang;unnamed namespace 1&rang;::unwindOneFrame(unsigned, _Unwind_Control_Block*, _Unwind_Context*)</a>
 <LI><a href="#[2bf]">&lang;unnamed namespace 1&rang;::fallback_free(void*)</a>
 <LI><a href="#[2c1]">&lang;unnamed namespace 1&rang;::fallback_malloc(unsigned)</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[a3]">std::terminate()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[280]">__clang_call_terminate</a><BR>
 <LI><a href="#[2cb]">std::__terminate(void(*)())</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ca]">__cxa_begin_catch</a><BR>
 <LI><a href="#[3a5]">__cxa_call_unexpected</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ca]">__cxa_begin_catch</a><BR>
 <LI><a href="#[2c9]">_ZN10__cxxabiv1L12failed_throwEPNS_15__cxa_exceptionE</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ca]">__cxa_begin_catch</a><BR>
 <LI><a href="#[27c]">__cxa_allocate_exception</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a3]">std::terminate()</a><BR>
 <LI><a href="#[2c7]">_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ca]">__cxa_begin_catch</a><BR>
 <LI><a href="#[3aa]">__cxa_rethrow</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2ca]">__cxa_begin_catch</a><BR>
 <LI><a href="#[2e0]">SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e0]">SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char)</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f7xx_it.o(.text.BusFault_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1e]">CAN1_RX0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1d]">CAN1_TX_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4a]">CAN2_RX0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4b]">CAN2_RX1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4c]">CAN2_SCE_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[49]">CAN2_TX_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[67]">CEC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[58]">DCMI_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[39]">DMA1_Stream7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[63]">DMA2D_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[50]">DMA2_Stream7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f7xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[47]">ETH_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[48]">ETH_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3a]">FMC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5a]">FPU_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6e]">HAL_NVIC_SetPriority</a> from stm32f7xx_hal_cortex.o(.text.HAL_NVIC_SetPriority) referenced from stm32f7xx_hal_msp.o(.text.HAL_MspInit)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f7xx_it.o(.text.HardFault_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[53]">I2C3_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[52]">I2C3_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[69]">I2C4_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[68]">I2C4_EV_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[66]">LPTIM1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[62]">LTDC_ER_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[61]">LTDC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f7xx_it.o(.text.MemManage_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f7xx_it.o(.text.NMI_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[34]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32f7xx_it.o(.text.PendSV_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[65]">QUADSPI_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[59]">RNG_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[60]">SAI1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[64]">SAI2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3b]">SDMMC1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6a]">SPDIF_RX_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5d]">SPI4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5e]">SPI5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5f]">SPI6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f7xx_it.o(.text.SVC_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f7xx_it.o(.text.SysTick_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[6c]">SystemInit</a> from system_stm32f7xx.o(.text.SystemInit) referenced from startup_stm32f746xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[40]">TIM6_DAC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[36]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5b]">UART7_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5c]">UART8_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[51]">USART6_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f7xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f746xx.o(.text) referenced from startup_stm32f746xx.o(RESET)
 <LI><a href="#[1dc]">_GLOBAL__sub_I_UnitTest.cpp</a> from unittest.o(.text._GLOBAL__sub_I_UnitTest.cpp) referenced from unittest.o(.init_array)
 <LI><a href="#[1e2]">abs(double)</a> from utestplatform.o(.text._Z3absd) referenced from utestplatform.o(.data.PlatformSpecificFabs)
 <LI><a href="#[90]">_ZL11normal_freePvPKci</a> from memoryleakwarningplugin.o(.text._ZL11normal_freePvPKci) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
 <LI><a href="#[85]">_ZL13mem_leak_freePvPKci</a> from memoryleakwarningplugin.o(.text._ZL13mem_leak_freePvPKci) referenced from memoryleakwarningplugin.o(.data..L_MergedGlobals)
 <LI><a href="#[85]">_ZL13mem_leak_freePvPKci</a> from memoryleakwarningplugin.o(.text._ZL13mem_leak_freePvPKci) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin24turnOnNewDeleteOverloadsEv)
 <LI><a href="#[8e]">_ZL13normal_mallocjPKci</a> from memoryleakwarningplugin.o(.text._ZL13normal_mallocjPKci) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
 <LI><a href="#[1ec]">_ZL14DummyMutexLockPv</a> from utestplatform.o(.text._ZL14DummyMutexLockPv) referenced from utestplatform.o(.data.PlatformSpecificMutexLock)
 <LI><a href="#[8f]">_ZL14normal_reallocPvjPKci</a> from memoryleakwarningplugin.o(.text._ZL14normal_reallocPvjPKci) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
 <LI><a href="#[83]">_ZL15mem_leak_mallocjPKci</a> from memoryleakwarningplugin.o(.text._ZL15mem_leak_mallocjPKci) referenced from memoryleakwarningplugin.o(.data..L_MergedGlobals)
 <LI><a href="#[83]">_ZL15mem_leak_mallocjPKci</a> from memoryleakwarningplugin.o(.text._ZL15mem_leak_mallocjPKci) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin24turnOnNewDeleteOverloadsEv)
 <LI><a href="#[1ea]">_ZL16DummyMutexCreatev</a> from utestplatform.o(.text._ZL16DummyMutexCreatev) referenced from utestplatform.o(.data.PlatformSpecificMutexCreate)
 <LI><a href="#[1ed]">_ZL16DummyMutexUnlockPv</a> from utestplatform.o(.text._ZL16DummyMutexUnlockPv) referenced from utestplatform.o(.data.PlatformSpecificMutexUnlock)
 <LI><a href="#[9d]">_ZL16helperDoTestBodyPv</a> from utest.o(.text._ZL16helperDoTestBodyPv) referenced from utest.o(.text._ZN5Utest3runEv)
 <LI><a href="#[84]">_ZL16mem_leak_reallocPvjPKci</a> from memoryleakwarningplugin.o(.text._ZL16mem_leak_reallocPvjPKci) referenced from memoryleakwarningplugin.o(.data..L_MergedGlobals)
 <LI><a href="#[84]">_ZL16mem_leak_reallocPvjPKci</a> from memoryleakwarningplugin.o(.text._ZL16mem_leak_reallocPvjPKci) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin24turnOnNewDeleteOverloadsEv)
 <LI><a href="#[1eb]">_ZL17DummyMutexDestroyPv</a> from utestplatform.o(.text._ZL17DummyMutexDestroyPv) referenced from utestplatform.o(.data.PlatformSpecificMutexDestroy)
 <LI><a href="#[9c]">_ZL17helperDoTestSetupPv</a> from utest.o(.text._ZL17helperDoTestSetupPv) referenced from utest.o(.text._ZN5Utest3runEv)
 <LI><a href="#[77]">_ZL18defaultCrashMethodv</a> from utest.o(.text._ZL18defaultCrashMethodv) referenced from utest.o(.data._ZL21pleaseCrashMeRightNow)
 <LI><a href="#[77]">_ZL18defaultCrashMethodv</a> from utest.o(.text._ZL18defaultCrashMethodv) referenced from utest.o(.text._ZN10UtestShell16resetCrashMethodEv)
 <LI><a href="#[1e5]">_ZL19IsInfImplementationd</a> from utestplatform.o(.text._ZL19IsInfImplementationd) referenced from utestplatform.o(.data.PlatformSpecificIsInf)
 <LI><a href="#[1e6]">_ZL19IsNanImplementationd</a> from utestplatform.o(.text._ZL19IsNanImplementationd) referenced from utestplatform.o(.data.PlatformSpecificIsNan)
 <LI><a href="#[86]">_ZL19normal_operator_newj</a> from memoryleakwarningplugin.o(.text._ZL19normal_operator_newj) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
 <LI><a href="#[9e]">_ZL20helperDoTestTeardownPv</a> from utest.o(.text._ZL20helperDoTestTeardownPv) referenced from utest.o(.text._ZN5Utest3runEv)
 <LI><a href="#[7b]">_ZL21mem_leak_operator_newj</a> from memoryleakwarningplugin.o(.text._ZL21mem_leak_operator_newj) referenced from memoryleakwarningplugin.o(.data..L_MergedGlobals)
 <LI><a href="#[7b]">_ZL21mem_leak_operator_newj</a> from memoryleakwarningplugin.o(.text._ZL21mem_leak_operator_newj) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin24turnOnNewDeleteOverloadsEv)
 <LI><a href="#[8c]">_ZL22normal_operator_deletePv</a> from memoryleakwarningplugin.o(.text._ZL22normal_operator_deletePv) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
 <LI><a href="#[1de]">_ZL24TimeStringImplementationv</a> from utestplatform.o(.text._ZL24TimeStringImplementationv) referenced from utestplatform.o(.data.GetPlatformSpecificTimeString)
 <LI><a href="#[81]">_ZL24mem_leak_operator_deletePv</a> from memoryleakwarningplugin.o(.text._ZL24mem_leak_operator_deletePv) referenced from memoryleakwarningplugin.o(.data..L_MergedGlobals)
 <LI><a href="#[81]">_ZL24mem_leak_operator_deletePv</a> from memoryleakwarningplugin.o(.text._ZL24mem_leak_operator_deletePv) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin24turnOnNewDeleteOverloadsEv)
 <LI><a href="#[9b]">_ZL24threadsafe_mem_leak_freePvPKci</a> from memoryleakwarningplugin.o(.text._ZL24threadsafe_mem_leak_freePvPKci) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin34turnOnThreadSafeNewDeleteOverloadsEv)
 <LI><a href="#[89]">_ZL25normal_operator_new_arrayj</a> from memoryleakwarningplugin.o(.text._ZL25normal_operator_new_arrayj) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
 <LI><a href="#[88]">_ZL25normal_operator_new_debugjPKci</a> from memoryleakwarningplugin.o(.text._ZL25normal_operator_new_debugjPKci) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
 <LI><a href="#[1dd]">_ZL26TimeInMillisImplementationv</a> from utestplatform.o(.text._ZL26TimeInMillisImplementationv) referenced from utestplatform.o(.data.GetPlatformSpecificTimeInMillis)
 <LI><a href="#[99]">_ZL26threadsafe_mem_leak_mallocjPKci</a> from memoryleakwarningplugin.o(.text._ZL26threadsafe_mem_leak_mallocjPKci) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin34turnOnThreadSafeNewDeleteOverloadsEv)
 <LI><a href="#[7e]">_ZL27mem_leak_operator_new_arrayj</a> from memoryleakwarningplugin.o(.text._ZL27mem_leak_operator_new_arrayj) referenced from memoryleakwarningplugin.o(.data..L_MergedGlobals)
 <LI><a href="#[7e]">_ZL27mem_leak_operator_new_arrayj</a> from memoryleakwarningplugin.o(.text._ZL27mem_leak_operator_new_arrayj) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin24turnOnNewDeleteOverloadsEv)
 <LI><a href="#[7d]">_ZL27mem_leak_operator_new_debugjPKci</a> from memoryleakwarningplugin.o(.text._ZL27mem_leak_operator_new_debugjPKci) referenced from memoryleakwarningplugin.o(.data..L_MergedGlobals)
 <LI><a href="#[7d]">_ZL27mem_leak_operator_new_debugjPKci</a> from memoryleakwarningplugin.o(.text._ZL27mem_leak_operator_new_debugjPKci) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin24turnOnNewDeleteOverloadsEv)
 <LI><a href="#[87]">_ZL27normal_operator_new_nothrowj</a> from memoryleakwarningplugin.o(.text._ZL27normal_operator_new_nothrowj) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
 <LI><a href="#[9a]">_ZL27threadsafe_mem_leak_reallocPvjPKci</a> from memoryleakwarningplugin.o(.text._ZL27threadsafe_mem_leak_reallocPvjPKci) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin34turnOnThreadSafeNewDeleteOverloadsEv)
 <LI><a href="#[8d]">_ZL28normal_operator_delete_arrayPv</a> from memoryleakwarningplugin.o(.text._ZL28normal_operator_delete_arrayPv) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
 <LI><a href="#[7c]">_ZL29mem_leak_operator_new_nothrowj</a> from memoryleakwarningplugin.o(.text._ZL29mem_leak_operator_new_nothrowj) referenced from memoryleakwarningplugin.o(.data..L_MergedGlobals)
 <LI><a href="#[7c]">_ZL29mem_leak_operator_new_nothrowj</a> from memoryleakwarningplugin.o(.text._ZL29mem_leak_operator_new_nothrowj) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin24turnOnNewDeleteOverloadsEv)
 <LI><a href="#[1f1]">_ZL30DummyRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult</a> from utestplatform.o(.text._ZL30DummyRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult) referenced from utestplatform.o(.data.PlatformSpecificRunTestInASeperateProcess)
 <LI><a href="#[82]">_ZL30mem_leak_operator_delete_arrayPv</a> from memoryleakwarningplugin.o(.text._ZL30mem_leak_operator_delete_arrayPv) referenced from memoryleakwarningplugin.o(.data..L_MergedGlobals)
 <LI><a href="#[82]">_ZL30mem_leak_operator_delete_arrayPv</a> from memoryleakwarningplugin.o(.text._ZL30mem_leak_operator_delete_arrayPv) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin24turnOnNewDeleteOverloadsEv)
 <LI><a href="#[8b]">_ZL31normal_operator_new_array_debugjPKci</a> from memoryleakwarningplugin.o(.text._ZL31normal_operator_new_array_debugjPKci) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
 <LI><a href="#[91]">_ZL32threadsafe_mem_leak_operator_newj</a> from memoryleakwarningplugin.o(.text._ZL32threadsafe_mem_leak_operator_newj) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin34turnOnThreadSafeNewDeleteOverloadsEv)
 <LI><a href="#[75]">_ZL33helperDoRunOneTestSeperateProcessPv</a> from utest.o(.text._ZL33helperDoRunOneTestSeperateProcessPv) referenced from utest.o(.text._ZN10UtestShell10runOneTestEP10TestPluginR10TestResult)
 <LI><a href="#[80]">_ZL33mem_leak_operator_new_array_debugjPKci</a> from memoryleakwarningplugin.o(.text._ZL33mem_leak_operator_new_array_debugjPKci) referenced from memoryleakwarningplugin.o(.data..L_MergedGlobals)
 <LI><a href="#[80]">_ZL33mem_leak_operator_new_array_debugjPKci</a> from memoryleakwarningplugin.o(.text._ZL33mem_leak_operator_new_array_debugjPKci) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin24turnOnNewDeleteOverloadsEv)
 <LI><a href="#[8a]">_ZL33normal_operator_new_array_nothrowj</a> from memoryleakwarningplugin.o(.text._ZL33normal_operator_new_array_nothrowj) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
 <LI><a href="#[74]">_ZL34helperDoRunOneTestInCurrentProcessPv</a> from utest.o(.text._ZL34helperDoRunOneTestInCurrentProcessPv) referenced from utest.o(.text._ZN10UtestShell10runOneTestEP10TestPluginR10TestResult)
 <LI><a href="#[1e0]">_ZL35PlatformSpecificFOpenImplementationPKcS0_</a> from utestplatform.o(.text._ZL35PlatformSpecificFOpenImplementationPKcS0_) referenced from utestplatform.o(.data.PlatformSpecificFOpen)
 <LI><a href="#[1e1]">_ZL35PlatformSpecificFPutsImplementationPKcPv</a> from utestplatform.o(.text._ZL35PlatformSpecificFPutsImplementationPKcPv) referenced from utestplatform.o(.data.PlatformSpecificFPuts)
 <LI><a href="#[1e3]">_ZL35PlatformSpecificFlushImplementationv</a> from utestplatform.o(.text._ZL35PlatformSpecificFlushImplementationv) referenced from utestplatform.o(.data.PlatformSpecificFlush)
 <LI><a href="#[7f]">_ZL35mem_leak_operator_new_array_nothrowj</a> from memoryleakwarningplugin.o(.text._ZL35mem_leak_operator_new_array_nothrowj) referenced from memoryleakwarningplugin.o(.data..L_MergedGlobals)
 <LI><a href="#[7f]">_ZL35mem_leak_operator_new_array_nothrowj</a> from memoryleakwarningplugin.o(.text._ZL35mem_leak_operator_new_array_nothrowj) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin24turnOnNewDeleteOverloadsEv)
 <LI><a href="#[97]">_ZL35threadsafe_mem_leak_operator_deletePv</a> from memoryleakwarningplugin.o(.text._ZL35threadsafe_mem_leak_operator_deletePv) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin34turnOnThreadSafeNewDeleteOverloadsEv)
 <LI><a href="#[1df]">_ZL36PlatformSpecificFCloseImplementationPv</a> from utestplatform.o(.text._ZL36PlatformSpecificFCloseImplementationPv) referenced from utestplatform.o(.data.PlatformSpecificFClose)
 <LI><a href="#[1f2]">_ZL36PlatformSpecificSetJmpImplementationPFvPvES_</a> from utestplatform.o(.text._ZL36PlatformSpecificSetJmpImplementationPFvPvES_) referenced from utestplatform.o(.data.PlatformSpecificSetJmp)
 <LI><a href="#[1e7]">_ZL37PlatformSpecificLongJmpImplementationv</a> from utestplatform.o(.text._ZL37PlatformSpecificLongJmpImplementationv) referenced from utestplatform.o(.data.PlatformSpecificLongJmp)
 <LI><a href="#[94]">_ZL38threadsafe_mem_leak_operator_new_arrayj</a> from memoryleakwarningplugin.o(.text._ZL38threadsafe_mem_leak_operator_new_arrayj) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin34turnOnThreadSafeNewDeleteOverloadsEv)
 <LI><a href="#[93]">_ZL38threadsafe_mem_leak_operator_new_debugjPKci</a> from memoryleakwarningplugin.o(.text._ZL38threadsafe_mem_leak_operator_new_debugjPKci) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin34turnOnThreadSafeNewDeleteOverloadsEv)
 <LI><a href="#[92]">_ZL40threadsafe_mem_leak_operator_new_nothrowj</a> from memoryleakwarningplugin.o(.text._ZL40threadsafe_mem_leak_operator_new_nothrowj) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin34turnOnThreadSafeNewDeleteOverloadsEv)
 <LI><a href="#[98]">_ZL41threadsafe_mem_leak_operator_delete_arrayPv</a> from memoryleakwarningplugin.o(.text._ZL41threadsafe_mem_leak_operator_delete_arrayPv) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin34turnOnThreadSafeNewDeleteOverloadsEv)
 <LI><a href="#[96]">_ZL44threadsafe_mem_leak_operator_new_array_debugjPKci</a> from memoryleakwarningplugin.o(.text._ZL44threadsafe_mem_leak_operator_new_array_debugjPKci) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin34turnOnThreadSafeNewDeleteOverloadsEv)
 <LI><a href="#[95]">_ZL46threadsafe_mem_leak_operator_new_array_nothrowj</a> from memoryleakwarningplugin.o(.text._ZL46threadsafe_mem_leak_operator_new_array_nothrowj) referenced from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin34turnOnThreadSafeNewDeleteOverloadsEv)
 <LI><a href="#[1f0]">_ZL47PlatformSpecificRestoreJumpBufferImplementationv</a> from utestplatform.o(.text._ZL47PlatformSpecificRestoreJumpBufferImplementationv) referenced from utestplatform.o(.data.PlatformSpecificRestoreJumpBuffer)
 <LI><a href="#[b7]">TestOutput::printDouble(double)</a> from testoutput.o(.text._ZN10TestOutput11printDoubleEd) referenced from testoutput.o(.rodata._ZTV10TestOutput)
 <LI><a href="#[b7]">TestOutput::printDouble(double)</a> from testoutput.o(.text._ZN10TestOutput11printDoubleEd) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[b7]">TestOutput::printDouble(double)</a> from testoutput.o(.text._ZN10TestOutput11printDoubleEd) referenced from testoutput.o(.rodata._ZTV17ConsoleTestOutput)
 <LI><a href="#[b7]">TestOutput::printDouble(double)</a> from testoutput.o(.text._ZN10TestOutput11printDoubleEd) referenced from teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
 <LI><a href="#[b7]">TestOutput::printDouble(double)</a> from testoutput.o(.text._ZN10TestOutput11printDoubleEd) referenced from testoutput.o(.rodata._ZTV22StringBufferTestOutput)
 <LI><a href="#[b8]">TestOutput::printFailure(const TestFailure&)</a> from testoutput.o(.text._ZN10TestOutput12printFailureERK11TestFailure) referenced from testoutput.o(.rodata._ZTV10TestOutput)
 <LI><a href="#[b8]">TestOutput::printFailure(const TestFailure&)</a> from testoutput.o(.text._ZN10TestOutput12printFailureERK11TestFailure) referenced from testoutput.o(.rodata._ZTV17ConsoleTestOutput)
 <LI><a href="#[b8]">TestOutput::printFailure(const TestFailure&)</a> from testoutput.o(.text._ZN10TestOutput12printFailureERK11TestFailure) referenced from testoutput.o(.rodata._ZTV22StringBufferTestOutput)
 <LI><a href="#[b9]">TestOutput::printTestRun(int, int)</a> from testoutput.o(.text._ZN10TestOutput12printTestRunEii) referenced from testoutput.o(.rodata._ZTV10TestOutput)
 <LI><a href="#[b9]">TestOutput::printTestRun(int, int)</a> from testoutput.o(.text._ZN10TestOutput12printTestRunEii) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[b9]">TestOutput::printTestRun(int, int)</a> from testoutput.o(.text._ZN10TestOutput12printTestRunEii) referenced from testoutput.o(.rodata._ZTV17ConsoleTestOutput)
 <LI><a href="#[b9]">TestOutput::printTestRun(int, int)</a> from testoutput.o(.text._ZN10TestOutput12printTestRunEii) referenced from teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
 <LI><a href="#[b9]">TestOutput::printTestRun(int, int)</a> from testoutput.o(.text._ZN10TestOutput12printTestRunEii) referenced from testoutput.o(.rodata._ZTV19CompositeTestOutput)
 <LI><a href="#[b9]">TestOutput::printTestRun(int, int)</a> from testoutput.o(.text._ZN10TestOutput12printTestRunEii) referenced from testoutput.o(.rodata._ZTV22StringBufferTestOutput)
 <LI><a href="#[ad]">TestOutput::printTestsEnded(const TestResult&)</a> from testoutput.o(.text._ZN10TestOutput15printTestsEndedERK10TestResult) referenced from testoutput.o(.rodata._ZTV10TestOutput)
 <LI><a href="#[ad]">TestOutput::printTestsEnded(const TestResult&)</a> from testoutput.o(.text._ZN10TestOutput15printTestsEndedERK10TestResult) referenced from testoutput.o(.rodata._ZTV17ConsoleTestOutput)
 <LI><a href="#[ad]">TestOutput::printTestsEnded(const TestResult&)</a> from testoutput.o(.text._ZN10TestOutput15printTestsEndedERK10TestResult) referenced from teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
 <LI><a href="#[ad]">TestOutput::printTestsEnded(const TestResult&)</a> from testoutput.o(.text._ZN10TestOutput15printTestsEndedERK10TestResult) referenced from testoutput.o(.rodata._ZTV22StringBufferTestOutput)
 <LI><a href="#[ac]">TestOutput::printTestsStarted()</a> from testoutput.o(.text._ZN10TestOutput17printTestsStartedEv) referenced from testoutput.o(.rodata._ZTV10TestOutput)
 <LI><a href="#[ac]">TestOutput::printTestsStarted()</a> from testoutput.o(.text._ZN10TestOutput17printTestsStartedEv) referenced from testoutput.o(.rodata._ZTV17ConsoleTestOutput)
 <LI><a href="#[ac]">TestOutput::printTestsStarted()</a> from testoutput.o(.text._ZN10TestOutput17printTestsStartedEv) referenced from teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
 <LI><a href="#[ac]">TestOutput::printTestsStarted()</a> from testoutput.o(.text._ZN10TestOutput17printTestsStartedEv) referenced from testoutput.o(.rodata._ZTV22StringBufferTestOutput)
 <LI><a href="#[ba]">TestOutput::setProgressIndicator(const char*)</a> from testoutput.o(.text._ZN10TestOutput20setProgressIndicatorEPKc) referenced from testoutput.o(.rodata._ZTV10TestOutput)
 <LI><a href="#[ba]">TestOutput::setProgressIndicator(const char*)</a> from testoutput.o(.text._ZN10TestOutput20setProgressIndicatorEPKc) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[ba]">TestOutput::setProgressIndicator(const char*)</a> from testoutput.o(.text._ZN10TestOutput20setProgressIndicatorEPKc) referenced from testoutput.o(.rodata._ZTV17ConsoleTestOutput)
 <LI><a href="#[ba]">TestOutput::setProgressIndicator(const char*)</a> from testoutput.o(.text._ZN10TestOutput20setProgressIndicatorEPKc) referenced from teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
 <LI><a href="#[ba]">TestOutput::setProgressIndicator(const char*)</a> from testoutput.o(.text._ZN10TestOutput20setProgressIndicatorEPKc) referenced from testoutput.o(.rodata._ZTV22StringBufferTestOutput)
 <LI><a href="#[af]">TestOutput::printCurrentTestEnded(const TestResult&)</a> from testoutput.o(.text._ZN10TestOutput21printCurrentTestEndedERK10TestResult) referenced from testoutput.o(.rodata._ZTV10TestOutput)
 <LI><a href="#[af]">TestOutput::printCurrentTestEnded(const TestResult&)</a> from testoutput.o(.text._ZN10TestOutput21printCurrentTestEndedERK10TestResult) referenced from testoutput.o(.rodata._ZTV17ConsoleTestOutput)
 <LI><a href="#[af]">TestOutput::printCurrentTestEnded(const TestResult&)</a> from testoutput.o(.text._ZN10TestOutput21printCurrentTestEndedERK10TestResult) referenced from testoutput.o(.rodata._ZTV22StringBufferTestOutput)
 <LI><a href="#[b1]">TestOutput::printCurrentGroupEnded(const TestResult&)</a> from testoutput.o(.text._ZN10TestOutput22printCurrentGroupEndedERK10TestResult) referenced from testoutput.o(.rodata._ZTV10TestOutput)
 <LI><a href="#[b1]">TestOutput::printCurrentGroupEnded(const TestResult&)</a> from testoutput.o(.text._ZN10TestOutput22printCurrentGroupEndedERK10TestResult) referenced from testoutput.o(.rodata._ZTV17ConsoleTestOutput)
 <LI><a href="#[b1]">TestOutput::printCurrentGroupEnded(const TestResult&)</a> from testoutput.o(.text._ZN10TestOutput22printCurrentGroupEndedERK10TestResult) referenced from testoutput.o(.rodata._ZTV22StringBufferTestOutput)
 <LI><a href="#[bd]">TestOutput::printProgressIndicator()</a> from testoutput.o(.text._ZN10TestOutput22printProgressIndicatorEv) referenced from testoutput.o(.rodata._ZTV10TestOutput)
 <LI><a href="#[bd]">TestOutput::printProgressIndicator()</a> from testoutput.o(.text._ZN10TestOutput22printProgressIndicatorEv) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[bd]">TestOutput::printProgressIndicator()</a> from testoutput.o(.text._ZN10TestOutput22printProgressIndicatorEv) referenced from testoutput.o(.rodata._ZTV17ConsoleTestOutput)
 <LI><a href="#[bd]">TestOutput::printProgressIndicator()</a> from testoutput.o(.text._ZN10TestOutput22printProgressIndicatorEv) referenced from teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
 <LI><a href="#[bd]">TestOutput::printProgressIndicator()</a> from testoutput.o(.text._ZN10TestOutput22printProgressIndicatorEv) referenced from testoutput.o(.rodata._ZTV19CompositeTestOutput)
 <LI><a href="#[bd]">TestOutput::printProgressIndicator()</a> from testoutput.o(.text._ZN10TestOutput22printProgressIndicatorEv) referenced from testoutput.o(.rodata._ZTV22StringBufferTestOutput)
 <LI><a href="#[ae]">TestOutput::printCurrentTestStarted(const UtestShell&)</a> from testoutput.o(.text._ZN10TestOutput23printCurrentTestStartedERK10UtestShell) referenced from testoutput.o(.rodata._ZTV10TestOutput)
 <LI><a href="#[ae]">TestOutput::printCurrentTestStarted(const UtestShell&)</a> from testoutput.o(.text._ZN10TestOutput23printCurrentTestStartedERK10UtestShell) referenced from testoutput.o(.rodata._ZTV17ConsoleTestOutput)
 <LI><a href="#[ae]">TestOutput::printCurrentTestStarted(const UtestShell&)</a> from testoutput.o(.text._ZN10TestOutput23printCurrentTestStartedERK10UtestShell) referenced from testoutput.o(.rodata._ZTV22StringBufferTestOutput)
 <LI><a href="#[b0]">TestOutput::printCurrentGroupStarted(const UtestShell&)</a> from testoutput.o(.text._ZN10TestOutput24printCurrentGroupStartedERK10UtestShell) referenced from testoutput.o(.rodata._ZTV10TestOutput)
 <LI><a href="#[b0]">TestOutput::printCurrentGroupStarted(const UtestShell&)</a> from testoutput.o(.text._ZN10TestOutput24printCurrentGroupStartedERK10UtestShell) referenced from testoutput.o(.rodata._ZTV17ConsoleTestOutput)
 <LI><a href="#[b0]">TestOutput::printCurrentGroupStarted(const UtestShell&)</a> from testoutput.o(.text._ZN10TestOutput24printCurrentGroupStartedERK10UtestShell) referenced from testoutput.o(.rodata._ZTV22StringBufferTestOutput)
 <LI><a href="#[bb]">TestOutput::printEclipseErrorInFileOnLine(SimpleString, int)</a> from testoutput.o(.text._ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringi) referenced from testoutput.o(.rodata._ZTV10TestOutput)
 <LI><a href="#[bb]">TestOutput::printEclipseErrorInFileOnLine(SimpleString, int)</a> from testoutput.o(.text._ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringi) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[bb]">TestOutput::printEclipseErrorInFileOnLine(SimpleString, int)</a> from testoutput.o(.text._ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringi) referenced from testoutput.o(.rodata._ZTV17ConsoleTestOutput)
 <LI><a href="#[bb]">TestOutput::printEclipseErrorInFileOnLine(SimpleString, int)</a> from testoutput.o(.text._ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringi) referenced from teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
 <LI><a href="#[bb]">TestOutput::printEclipseErrorInFileOnLine(SimpleString, int)</a> from testoutput.o(.text._ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringi) referenced from testoutput.o(.rodata._ZTV19CompositeTestOutput)
 <LI><a href="#[bb]">TestOutput::printEclipseErrorInFileOnLine(SimpleString, int)</a> from testoutput.o(.text._ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringi) referenced from testoutput.o(.rodata._ZTV22StringBufferTestOutput)
 <LI><a href="#[bc]">TestOutput::printVisualStudioErrorInFileOnLine(SimpleString, int)</a> from testoutput.o(.text._ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringi) referenced from testoutput.o(.rodata._ZTV10TestOutput)
 <LI><a href="#[bc]">TestOutput::printVisualStudioErrorInFileOnLine(SimpleString, int)</a> from testoutput.o(.text._ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringi) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[bc]">TestOutput::printVisualStudioErrorInFileOnLine(SimpleString, int)</a> from testoutput.o(.text._ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringi) referenced from testoutput.o(.rodata._ZTV17ConsoleTestOutput)
 <LI><a href="#[bc]">TestOutput::printVisualStudioErrorInFileOnLine(SimpleString, int)</a> from testoutput.o(.text._ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringi) referenced from teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
 <LI><a href="#[bc]">TestOutput::printVisualStudioErrorInFileOnLine(SimpleString, int)</a> from testoutput.o(.text._ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringi) referenced from testoutput.o(.rodata._ZTV19CompositeTestOutput)
 <LI><a href="#[bc]">TestOutput::printVisualStudioErrorInFileOnLine(SimpleString, int)</a> from testoutput.o(.text._ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringi) referenced from testoutput.o(.rodata._ZTV22StringBufferTestOutput)
 <LI><a href="#[b3]">TestOutput::color()</a> from testoutput.o(.text._ZN10TestOutput5colorEv) referenced from testoutput.o(.rodata._ZTV10TestOutput)
 <LI><a href="#[b3]">TestOutput::color()</a> from testoutput.o(.text._ZN10TestOutput5colorEv) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[b3]">TestOutput::color()</a> from testoutput.o(.text._ZN10TestOutput5colorEv) referenced from testoutput.o(.rodata._ZTV17ConsoleTestOutput)
 <LI><a href="#[b3]">TestOutput::color()</a> from testoutput.o(.text._ZN10TestOutput5colorEv) referenced from teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
 <LI><a href="#[b3]">TestOutput::color()</a> from testoutput.o(.text._ZN10TestOutput5colorEv) referenced from testoutput.o(.rodata._ZTV22StringBufferTestOutput)
 <LI><a href="#[b5]">TestOutput::print(const char*)</a> from testoutput.o(.text._ZN10TestOutput5printEPKc) referenced from testoutput.o(.rodata._ZTV10TestOutput)
 <LI><a href="#[b5]">TestOutput::print(const char*)</a> from testoutput.o(.text._ZN10TestOutput5printEPKc) referenced from testoutput.o(.rodata._ZTV17ConsoleTestOutput)
 <LI><a href="#[b5]">TestOutput::print(const char*)</a> from testoutput.o(.text._ZN10TestOutput5printEPKc) referenced from teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
 <LI><a href="#[b5]">TestOutput::print(const char*)</a> from testoutput.o(.text._ZN10TestOutput5printEPKc) referenced from testoutput.o(.rodata._ZTV22StringBufferTestOutput)
 <LI><a href="#[b6]">TestOutput::print(long)</a> from testoutput.o(.text._ZN10TestOutput5printEl) referenced from testoutput.o(.rodata._ZTV10TestOutput)
 <LI><a href="#[b6]">TestOutput::print(long)</a> from testoutput.o(.text._ZN10TestOutput5printEl) referenced from testoutput.o(.rodata._ZTV17ConsoleTestOutput)
 <LI><a href="#[b6]">TestOutput::print(long)</a> from testoutput.o(.text._ZN10TestOutput5printEl) referenced from teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
 <LI><a href="#[b6]">TestOutput::print(long)</a> from testoutput.o(.text._ZN10TestOutput5printEl) referenced from testoutput.o(.rodata._ZTV22StringBufferTestOutput)
 <LI><a href="#[b2]">TestOutput::verbose()</a> from testoutput.o(.text._ZN10TestOutput7verboseEv) referenced from testoutput.o(.rodata._ZTV10TestOutput)
 <LI><a href="#[b2]">TestOutput::verbose()</a> from testoutput.o(.text._ZN10TestOutput7verboseEv) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[b2]">TestOutput::verbose()</a> from testoutput.o(.text._ZN10TestOutput7verboseEv) referenced from testoutput.o(.rodata._ZTV17ConsoleTestOutput)
 <LI><a href="#[b2]">TestOutput::verbose()</a> from testoutput.o(.text._ZN10TestOutput7verboseEv) referenced from teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
 <LI><a href="#[b2]">TestOutput::verbose()</a> from testoutput.o(.text._ZN10TestOutput7verboseEv) referenced from testoutput.o(.rodata._ZTV22StringBufferTestOutput)
 <LI><a href="#[ab]">TestOutput::~TestOutput__deallocating()</a> from testoutput.o(.text._ZN10TestOutputD0Ev) referenced from testoutput.o(.rodata._ZTV10TestOutput)
 <LI><a href="#[aa]">TestOutput::~TestOutput__sub_object()</a> from testoutput.o(.text._ZN10TestOutputD2Ev) referenced from testoutput.o(.rodata._ZTV10TestOutput)
 <LI><a href="#[aa]">TestOutput::~TestOutput__sub_object()</a> from testoutput.o(.text._ZN10TestOutputD2Ev) referenced from testoutput.o(.rodata._ZTV17ConsoleTestOutput)
 <LI><a href="#[bf]">TestPlugin::preTestAction(UtestShell&, TestResult&)</a> from testplugin.o(.text._ZN10TestPlugin13preTestActionER10UtestShellR10TestResult) referenced from testplugin.o(.rodata._ZTV10TestPlugin)
 <LI><a href="#[bf]">TestPlugin::preTestAction(UtestShell&, TestResult&)</a> from testplugin.o(.text._ZN10TestPlugin13preTestActionER10UtestShellR10TestResult) referenced from testplugin.o(.rodata._ZTV14NullTestPlugin)
 <LI><a href="#[bf]">TestPlugin::preTestAction(UtestShell&, TestResult&)</a> from testplugin.o(.text._ZN10TestPlugin13preTestActionER10UtestShellR10TestResult) referenced from testplugin.o(.rodata._ZTV16SetPointerPlugin)
 <LI><a href="#[c1]">TestPlugin::parseArguments(int, const char**, int)</a> from memoryleakwarningplugin.o(.text._ZN10TestPlugin14parseArgumentsEiPPKci) referenced from testplugin.o(.rodata._ZTV10TestPlugin)
 <LI><a href="#[c1]">TestPlugin::parseArguments(int, const char**, int)</a> from memoryleakwarningplugin.o(.text._ZN10TestPlugin14parseArgumentsEiPPKci) referenced from testplugin.o(.rodata._ZTV14NullTestPlugin)
 <LI><a href="#[c1]">TestPlugin::parseArguments(int, const char**, int)</a> from memoryleakwarningplugin.o(.text._ZN10TestPlugin14parseArgumentsEiPPKci) referenced from testplugin.o(.rodata._ZTV16SetPointerPlugin)
 <LI><a href="#[c1]">TestPlugin::parseArguments(int, const char**, int)</a> from memoryleakwarningplugin.o(.text._ZN10TestPlugin14parseArgumentsEiPPKci) referenced from memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[c0]">TestPlugin::postTestAction(UtestShell&, TestResult&)</a> from testplugin.o(.text._ZN10TestPlugin14postTestActionER10UtestShellR10TestResult) referenced from testplugin.o(.rodata._ZTV10TestPlugin)
 <LI><a href="#[c0]">TestPlugin::postTestAction(UtestShell&, TestResult&)</a> from testplugin.o(.text._ZN10TestPlugin14postTestActionER10UtestShellR10TestResult) referenced from testplugin.o(.rodata._ZTV14NullTestPlugin)
 <LI><a href="#[c4]">TestPlugin::parseAllArguments(int, const char**, int)</a> from testplugin.o(.text._ZN10TestPlugin17parseAllArgumentsEiPPKci) referenced from testplugin.o(.rodata._ZTV10TestPlugin)
 <LI><a href="#[c4]">TestPlugin::parseAllArguments(int, const char**, int)</a> from testplugin.o(.text._ZN10TestPlugin17parseAllArgumentsEiPPKci) referenced from testplugin.o(.rodata._ZTV14NullTestPlugin)
 <LI><a href="#[c4]">TestPlugin::parseAllArguments(int, const char**, int)</a> from testplugin.o(.text._ZN10TestPlugin17parseAllArgumentsEiPPKci) referenced from testplugin.o(.rodata._ZTV16SetPointerPlugin)
 <LI><a href="#[c4]">TestPlugin::parseAllArguments(int, const char**, int)</a> from testplugin.o(.text._ZN10TestPlugin17parseAllArgumentsEiPPKci) referenced from memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[c5]">TestPlugin::parseAllArguments(int, char**, int)</a> from testplugin.o(.text._ZN10TestPlugin17parseAllArgumentsEiPPci) referenced from testplugin.o(.rodata._ZTV10TestPlugin)
 <LI><a href="#[c5]">TestPlugin::parseAllArguments(int, char**, int)</a> from testplugin.o(.text._ZN10TestPlugin17parseAllArgumentsEiPPci) referenced from testplugin.o(.rodata._ZTV14NullTestPlugin)
 <LI><a href="#[c5]">TestPlugin::parseAllArguments(int, char**, int)</a> from testplugin.o(.text._ZN10TestPlugin17parseAllArgumentsEiPPci) referenced from testplugin.o(.rodata._ZTV16SetPointerPlugin)
 <LI><a href="#[c5]">TestPlugin::parseAllArguments(int, char**, int)</a> from testplugin.o(.text._ZN10TestPlugin17parseAllArgumentsEiPPci) referenced from memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[c7]">TestPlugin::removePluginByName(const SimpleString&)</a> from testplugin.o(.text._ZN10TestPlugin18removePluginByNameERK12SimpleString) referenced from testplugin.o(.rodata._ZTV10TestPlugin)
 <LI><a href="#[c7]">TestPlugin::removePluginByName(const SimpleString&)</a> from testplugin.o(.text._ZN10TestPlugin18removePluginByNameERK12SimpleString) referenced from testplugin.o(.rodata._ZTV14NullTestPlugin)
 <LI><a href="#[c7]">TestPlugin::removePluginByName(const SimpleString&)</a> from testplugin.o(.text._ZN10TestPlugin18removePluginByNameERK12SimpleString) referenced from testplugin.o(.rodata._ZTV16SetPointerPlugin)
 <LI><a href="#[c7]">TestPlugin::removePluginByName(const SimpleString&)</a> from testplugin.o(.text._ZN10TestPlugin18removePluginByNameERK12SimpleString) referenced from memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[c2]">TestPlugin::runAllPreTestAction(UtestShell&, TestResult&)</a> from testplugin.o(.text._ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult) referenced from testplugin.o(.rodata._ZTV10TestPlugin)
 <LI><a href="#[c2]">TestPlugin::runAllPreTestAction(UtestShell&, TestResult&)</a> from testplugin.o(.text._ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult) referenced from testplugin.o(.rodata._ZTV16SetPointerPlugin)
 <LI><a href="#[c2]">TestPlugin::runAllPreTestAction(UtestShell&, TestResult&)</a> from testplugin.o(.text._ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult) referenced from memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[c3]">TestPlugin::runAllPostTestAction(UtestShell&, TestResult&)</a> from testplugin.o(.text._ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult) referenced from testplugin.o(.rodata._ZTV10TestPlugin)
 <LI><a href="#[c3]">TestPlugin::runAllPostTestAction(UtestShell&, TestResult&)</a> from testplugin.o(.text._ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult) referenced from testplugin.o(.rodata._ZTV16SetPointerPlugin)
 <LI><a href="#[c3]">TestPlugin::runAllPostTestAction(UtestShell&, TestResult&)</a> from testplugin.o(.text._ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult) referenced from memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[ca]">TestPlugin::enable()</a> from testplugin.o(.text._ZN10TestPlugin6enableEv) referenced from testplugin.o(.rodata._ZTV10TestPlugin)
 <LI><a href="#[ca]">TestPlugin::enable()</a> from testplugin.o(.text._ZN10TestPlugin6enableEv) referenced from testplugin.o(.rodata._ZTV14NullTestPlugin)
 <LI><a href="#[ca]">TestPlugin::enable()</a> from testplugin.o(.text._ZN10TestPlugin6enableEv) referenced from testplugin.o(.rodata._ZTV16SetPointerPlugin)
 <LI><a href="#[ca]">TestPlugin::enable()</a> from testplugin.o(.text._ZN10TestPlugin6enableEv) referenced from memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[c9]">TestPlugin::disable()</a> from testplugin.o(.text._ZN10TestPlugin7disableEv) referenced from testplugin.o(.rodata._ZTV10TestPlugin)
 <LI><a href="#[c9]">TestPlugin::disable()</a> from testplugin.o(.text._ZN10TestPlugin7disableEv) referenced from testplugin.o(.rodata._ZTV14NullTestPlugin)
 <LI><a href="#[c9]">TestPlugin::disable()</a> from testplugin.o(.text._ZN10TestPlugin7disableEv) referenced from testplugin.o(.rodata._ZTV16SetPointerPlugin)
 <LI><a href="#[c9]">TestPlugin::disable()</a> from testplugin.o(.text._ZN10TestPlugin7disableEv) referenced from memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[c8]">TestPlugin::getNext()</a> from testplugin.o(.text._ZN10TestPlugin7getNextEv) referenced from testplugin.o(.rodata._ZTV10TestPlugin)
 <LI><a href="#[c8]">TestPlugin::getNext()</a> from testplugin.o(.text._ZN10TestPlugin7getNextEv) referenced from testplugin.o(.rodata._ZTV14NullTestPlugin)
 <LI><a href="#[c8]">TestPlugin::getNext()</a> from testplugin.o(.text._ZN10TestPlugin7getNextEv) referenced from testplugin.o(.rodata._ZTV16SetPointerPlugin)
 <LI><a href="#[c8]">TestPlugin::getNext()</a> from testplugin.o(.text._ZN10TestPlugin7getNextEv) referenced from memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[c6]">TestPlugin::addPlugin(TestPlugin*)</a> from testplugin.o(.text._ZN10TestPlugin9addPluginEPS_) referenced from testplugin.o(.rodata._ZTV10TestPlugin)
 <LI><a href="#[c6]">TestPlugin::addPlugin(TestPlugin*)</a> from testplugin.o(.text._ZN10TestPlugin9addPluginEPS_) referenced from testplugin.o(.rodata._ZTV14NullTestPlugin)
 <LI><a href="#[c6]">TestPlugin::addPlugin(TestPlugin*)</a> from testplugin.o(.text._ZN10TestPlugin9addPluginEPS_) referenced from testplugin.o(.rodata._ZTV16SetPointerPlugin)
 <LI><a href="#[c6]">TestPlugin::addPlugin(TestPlugin*)</a> from testplugin.o(.text._ZN10TestPlugin9addPluginEPS_) referenced from memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[cb]">TestPlugin::isEnabled()</a> from testplugin.o(.text._ZN10TestPlugin9isEnabledEv) referenced from testplugin.o(.rodata._ZTV10TestPlugin)
 <LI><a href="#[cb]">TestPlugin::isEnabled()</a> from testplugin.o(.text._ZN10TestPlugin9isEnabledEv) referenced from testplugin.o(.rodata._ZTV14NullTestPlugin)
 <LI><a href="#[cb]">TestPlugin::isEnabled()</a> from testplugin.o(.text._ZN10TestPlugin9isEnabledEv) referenced from testplugin.o(.rodata._ZTV16SetPointerPlugin)
 <LI><a href="#[cb]">TestPlugin::isEnabled()</a> from testplugin.o(.text._ZN10TestPlugin9isEnabledEv) referenced from memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[be]">TestPlugin::~TestPlugin__deallocating()</a> from testplugin.o(.text._ZN10TestPluginD0Ev) referenced from testplugin.o(.rodata._ZTV10TestPlugin)
 <LI><a href="#[78]">TestPlugin::~TestPlugin__sub_object()</a> from testplugin.o(.text._ZN10TestPluginD2Ev) referenced from testplugin.o(.rodata._ZTV10TestPlugin)
 <LI><a href="#[78]">TestPlugin::~TestPlugin__sub_object()</a> from testplugin.o(.text._ZN10TestPluginD2Ev) referenced from testplugin.o(.rodata._ZTV14NullTestPlugin)
 <LI><a href="#[78]">TestPlugin::~TestPlugin__sub_object()</a> from testplugin.o(.text._ZN10TestPluginD2Ev) referenced from testplugin.o(.rodata._ZTV16SetPointerPlugin)
 <LI><a href="#[78]">TestPlugin::~TestPlugin__sub_object()</a> from testplugin.o(.text._ZN10TestPluginD2Ev) referenced from testplugin.o(.text._ZN14NullTestPlugin8instanceEv)
 <LI><a href="#[d9]">TestResult::addFailure(const TestFailure&)</a> from testresult.o(.text._ZN10TestResult10addFailureERK11TestFailure) referenced from testresult.o(.rodata._ZTV10TestResult)
 <LI><a href="#[d6]">TestResult::countCheck()</a> from testresult.o(.text._ZN10TestResult10countCheckEv) referenced from testresult.o(.rodata._ZTV10TestResult)
 <LI><a href="#[cf]">TestResult::testsEnded()</a> from testresult.o(.text._ZN10TestResult10testsEndedEv) referenced from testresult.o(.rodata._ZTV10TestResult)
 <LI><a href="#[d8]">TestResult::countIgnored()</a> from testresult.o(.text._ZN10TestResult12countIgnoredEv) referenced from testresult.o(.rodata._ZTV10TestResult)
 <LI><a href="#[ce]">TestResult::testsStarted()</a> from testresult.o(.text._ZN10TestResult12testsStartedEv) referenced from testresult.o(.rodata._ZTV10TestResult)
 <LI><a href="#[d7]">TestResult::countFilteredOut()</a> from testresult.o(.text._ZN10TestResult16countFilteredOutEv) referenced from testresult.o(.rodata._ZTV10TestResult)
 <LI><a href="#[d3]">TestResult::currentTestEnded(UtestShell*)</a> from testresult.o(.text._ZN10TestResult16currentTestEndedEP10UtestShell) referenced from testresult.o(.rodata._ZTV10TestResult)
 <LI><a href="#[d1]">TestResult::currentGroupEnded(UtestShell*)</a> from testresult.o(.text._ZN10TestResult17currentGroupEndedEP10UtestShell) referenced from testresult.o(.rodata._ZTV10TestResult)
 <LI><a href="#[d2]">TestResult::currentTestStarted(UtestShell*)</a> from testresult.o(.text._ZN10TestResult18currentTestStartedEP10UtestShell) referenced from testresult.o(.rodata._ZTV10TestResult)
 <LI><a href="#[d0]">TestResult::currentGroupStarted(UtestShell*)</a> from testresult.o(.text._ZN10TestResult19currentGroupStartedEP10UtestShell) referenced from testresult.o(.rodata._ZTV10TestResult)
 <LI><a href="#[da]">TestResult::print(const char*)</a> from testresult.o(.text._ZN10TestResult5printEPKc) referenced from testresult.o(.rodata._ZTV10TestResult)
 <LI><a href="#[d5]">TestResult::countRun()</a> from testresult.o(.text._ZN10TestResult8countRunEv) referenced from testresult.o(.rodata._ZTV10TestResult)
 <LI><a href="#[d4]">TestResult::countTest()</a> from testresult.o(.text._ZN10TestResult9countTestEv) referenced from testresult.o(.rodata._ZTV10TestResult)
 <LI><a href="#[cd]">TestResult::~TestResult__deallocating()</a> from testresult.o(.text._ZN10TestResultD0Ev) referenced from testresult.o(.rodata._ZTV10TestResult)
 <LI><a href="#[cc]">TestResult::~TestResult__sub_object()</a> from testresult.o(.text._ZN10TestResultD2Ev) referenced from testresult.o(.rodata._ZTV10TestResult)
 <LI><a href="#[e2]">UtestShell::assertTrue(bool, const char*, const char*, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell10assertTrueEbPKcS1_S1_S1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[e2]">UtestShell::assertTrue(bool, const char*, const char*, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell10assertTrueEbPKcS1_S1_S1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[e2]">UtestShell::assertTrue(bool, const char*, const char*, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell10assertTrueEbPKcS1_S1_S1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[e2]">UtestShell::assertTrue(bool, const char*, const char*, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell10assertTrueEbPKcS1_S1_S1_iRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[e2]">UtestShell::assertTrue(bool, const char*, const char*, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell10assertTrueEbPKcS1_S1_S1_iRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[de]">UtestShell::countTests()</a> from utest.o(.text._ZN10UtestShell10countTestsEv) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[de]">UtestShell::countTests()</a> from utest.o(.text._ZN10UtestShell10countTestsEv) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[de]">UtestShell::countTests()</a> from utest.o(.text._ZN10UtestShell10countTestsEv) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[de]">UtestShell::countTests()</a> from utest.o(.text._ZN10UtestShell10countTestsEv) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[de]">UtestShell::countTests()</a> from utest.o(.text._ZN10UtestShell10countTestsEv) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[fa]">UtestShell::createTest()</a> from utest.o(.text._ZN10UtestShell10createTestEv) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[fa]">UtestShell::createTest()</a> from utest.o(.text._ZN10UtestShell10createTestEv) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[fa]">UtestShell::createTest()</a> from utest.o(.text._ZN10UtestShell10createTestEv) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[fc]">UtestShell::runOneTest(TestPlugin*, TestResult&)</a> from utest.o(.text._ZN10UtestShell10runOneTestEP10TestPluginR10TestResult) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[fc]">UtestShell::runOneTest(TestPlugin*, TestResult&)</a> from utest.o(.text._ZN10UtestShell10runOneTestEP10TestPluginR10TestResult) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[fc]">UtestShell::runOneTest(TestPlugin*, TestResult&)</a> from utest.o(.text._ZN10UtestShell10runOneTestEP10TestPluginR10TestResult) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[fc]">UtestShell::runOneTest(TestPlugin*, TestResult&)</a> from utest.o(.text._ZN10UtestShell10runOneTestEP10TestPluginR10TestResult) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[fb]">UtestShell::destroyTest(Utest*)</a> from utest.o(.text._ZN10UtestShell11destroyTestEP5Utest) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[fb]">UtestShell::destroyTest(Utest*)</a> from utest.o(.text._ZN10UtestShell11destroyTestEP5Utest) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[fb]">UtestShell::destroyTest(Utest*)</a> from utest.o(.text._ZN10UtestShell11destroyTestEP5Utest) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[fb]">UtestShell::destroyTest(Utest*)</a> from utest.o(.text._ZN10UtestShell11destroyTestEP5Utest) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[fb]">UtestShell::destroyTest(Utest*)</a> from utest.o(.text._ZN10UtestShell11destroyTestEP5Utest) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[f0]">UtestShell::assertEquals(bool, const char*, const char*, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[f0]">UtestShell::assertEquals(bool, const char*, const char*, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[f0]">UtestShell::assertEquals(bool, const char*, const char*, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[f0]">UtestShell::assertEquals(bool, const char*, const char*, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_iRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[f0]">UtestShell::assertEquals(bool, const char*, const char*, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_iRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[f9]">UtestShell::setRunIgnored()</a> from utest.o(.text._ZN10UtestShell13setRunIgnoredEv) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[f9]">UtestShell::setRunIgnored()</a> from utest.o(.text._ZN10UtestShell13setRunIgnoredEv) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[f9]">UtestShell::setRunIgnored()</a> from utest.o(.text._ZN10UtestShell13setRunIgnoredEv) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[f9]">UtestShell::setRunIgnored()</a> from utest.o(.text._ZN10UtestShell13setRunIgnoredEv) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[f2]">UtestShell::assertBitsEqual(unsigned long, unsigned long, unsigned long, unsigned, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell15assertBitsEqualEmmmjPKcS1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[f2]">UtestShell::assertBitsEqual(unsigned long, unsigned long, unsigned long, unsigned, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell15assertBitsEqualEmmmjPKcS1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[f2]">UtestShell::assertBitsEqual(unsigned long, unsigned long, unsigned long, unsigned, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell15assertBitsEqualEmmmjPKcS1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[f2]">UtestShell::assertBitsEqual(unsigned long, unsigned long, unsigned long, unsigned, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell15assertBitsEqualEmmmjPKcS1_iRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[f2]">UtestShell::assertBitsEqual(unsigned long, unsigned long, unsigned long, unsigned, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell15assertBitsEqualEmmmjPKcS1_iRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[e3]">UtestShell::assertCstrEqual(const char*, const char*, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[e3]">UtestShell::assertCstrEqual(const char*, const char*, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[e3]">UtestShell::assertCstrEqual(const char*, const char*, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[e3]">UtestShell::assertCstrEqual(const char*, const char*, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_iRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[e3]">UtestShell::assertCstrEqual(const char*, const char*, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_iRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[e4]">UtestShell::assertCstrNEqual(const char*, const char*, unsigned, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[e4]">UtestShell::assertCstrNEqual(const char*, const char*, unsigned, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[e4]">UtestShell::assertCstrNEqual(const char*, const char*, unsigned, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[e4]">UtestShell::assertCstrNEqual(const char*, const char*, unsigned, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_iRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[e4]">UtestShell::assertCstrNEqual(const char*, const char*, unsigned, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_iRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[e8]">UtestShell::assertLongsEqual(long, long, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell16assertLongsEqualEllPKcS1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[e8]">UtestShell::assertLongsEqual(long, long, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell16assertLongsEqualEllPKcS1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[e8]">UtestShell::assertLongsEqual(long, long, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell16assertLongsEqualEllPKcS1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[e8]">UtestShell::assertLongsEqual(long, long, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell16assertLongsEqualEllPKcS1_iRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[e8]">UtestShell::assertLongsEqual(long, long, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell16assertLongsEqualEllPKcS1_iRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[f1]">UtestShell::assertBinaryEqual(const void*, const void*, unsigned, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[f1]">UtestShell::assertBinaryEqual(const void*, const void*, unsigned, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[f1]">UtestShell::assertBinaryEqual(const void*, const void*, unsigned, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[f1]">UtestShell::assertBinaryEqual(const void*, const void*, unsigned, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_iRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[f1]">UtestShell::assertBinaryEqual(const void*, const void*, unsigned, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_iRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[e6]">UtestShell::assertCstrContains(const char*, const char*, const char*, const char*, int)</a> from utest.o(.text._ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_i) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[e6]">UtestShell::assertCstrContains(const char*, const char*, const char*, const char*, int)</a> from utest.o(.text._ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_i) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[e6]">UtestShell::assertCstrContains(const char*, const char*, const char*, const char*, int)</a> from utest.o(.text._ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_i) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[e6]">UtestShell::assertCstrContains(const char*, const char*, const char*, const char*, int)</a> from utest.o(.text._ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_i) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[e6]">UtestShell::assertCstrContains(const char*, const char*, const char*, const char*, int)</a> from utest.o(.text._ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_i) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[ef]">UtestShell::assertDoublesEqual(double, double, double, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell18assertDoublesEqualEdddPKcS1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[ef]">UtestShell::assertDoublesEqual(double, double, double, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell18assertDoublesEqualEdddPKcS1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[ef]">UtestShell::assertDoublesEqual(double, double, double, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell18assertDoublesEqualEdddPKcS1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[ef]">UtestShell::assertDoublesEqual(double, double, double, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell18assertDoublesEqualEdddPKcS1_iRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[ef]">UtestShell::assertDoublesEqual(double, double, double, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell18assertDoublesEqualEdddPKcS1_iRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[ed]">UtestShell::assertPointersEqual(const void*, const void*, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[ed]">UtestShell::assertPointersEqual(const void*, const void*, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[ed]">UtestShell::assertPointersEqual(const void*, const void*, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[ed]">UtestShell::assertPointersEqual(const void*, const void*, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_iRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[ed]">UtestShell::assertPointersEqual(const void*, const void*, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_iRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[ea]">UtestShell::assertLongLongsEqual(long long, long long, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell20assertLongLongsEqualExxPKcS1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[ea]">UtestShell::assertLongLongsEqual(long long, long long, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell20assertLongLongsEqualExxPKcS1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[ea]">UtestShell::assertLongLongsEqual(long long, long long, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell20assertLongLongsEqualExxPKcS1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[ea]">UtestShell::assertLongLongsEqual(long long, long long, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell20assertLongLongsEqualExxPKcS1_iRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[ea]">UtestShell::assertLongLongsEqual(long long, long long, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell20assertLongLongsEqualExxPKcS1_iRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[e5]">UtestShell::assertCstrNoCaseEqual(const char*, const char*, const char*, const char*, int)</a> from utest.o(.text._ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_i) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[e5]">UtestShell::assertCstrNoCaseEqual(const char*, const char*, const char*, const char*, int)</a> from utest.o(.text._ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_i) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[e5]">UtestShell::assertCstrNoCaseEqual(const char*, const char*, const char*, const char*, int)</a> from utest.o(.text._ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_i) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[e5]">UtestShell::assertCstrNoCaseEqual(const char*, const char*, const char*, const char*, int)</a> from utest.o(.text._ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_i) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[e5]">UtestShell::assertCstrNoCaseEqual(const char*, const char*, const char*, const char*, int)</a> from utest.o(.text._ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_i) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[ec]">UtestShell::assertSignedBytesEqual(signed char, signed char, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[ec]">UtestShell::assertSignedBytesEqual(signed char, signed char, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[ec]">UtestShell::assertSignedBytesEqual(signed char, signed char, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[ec]">UtestShell::assertSignedBytesEqual(signed char, signed char, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_iRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[ec]">UtestShell::assertSignedBytesEqual(signed char, signed char, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_iRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[f8]">UtestShell::setRunInSeperateProcess()</a> from utest.o(.text._ZN10UtestShell23setRunInSeperateProcessEv) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[f8]">UtestShell::setRunInSeperateProcess()</a> from utest.o(.text._ZN10UtestShell23setRunInSeperateProcessEv) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[f8]">UtestShell::setRunInSeperateProcess()</a> from utest.o(.text._ZN10UtestShell23setRunInSeperateProcessEv) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[f8]">UtestShell::setRunInSeperateProcess()</a> from utest.o(.text._ZN10UtestShell23setRunInSeperateProcessEv) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[f8]">UtestShell::setRunInSeperateProcess()</a> from utest.o(.text._ZN10UtestShell23setRunInSeperateProcessEv) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[e7]">UtestShell::assertCstrNoCaseContains(const char*, const char*, const char*, const char*, int)</a> from utest.o(.text._ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_i) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[e7]">UtestShell::assertCstrNoCaseContains(const char*, const char*, const char*, const char*, int)</a> from utest.o(.text._ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_i) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[e7]">UtestShell::assertCstrNoCaseContains(const char*, const char*, const char*, const char*, int)</a> from utest.o(.text._ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_i) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[e7]">UtestShell::assertCstrNoCaseContains(const char*, const char*, const char*, const char*, int)</a> from utest.o(.text._ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_i) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[e7]">UtestShell::assertCstrNoCaseContains(const char*, const char*, const char*, const char*, int)</a> from utest.o(.text._ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_i) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[e9]">UtestShell::assertUnsignedLongsEqual(unsigned long, unsigned long, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[e9]">UtestShell::assertUnsignedLongsEqual(unsigned long, unsigned long, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[e9]">UtestShell::assertUnsignedLongsEqual(unsigned long, unsigned long, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[e9]">UtestShell::assertUnsignedLongsEqual(unsigned long, unsigned long, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_iRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[e9]">UtestShell::assertUnsignedLongsEqual(unsigned long, unsigned long, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_iRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[fd]">UtestShell::runOneTestInCurrentProcess(TestPlugin*, TestResult&)</a> from utest.o(.text._ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[fd]">UtestShell::runOneTestInCurrentProcess(TestPlugin*, TestResult&)</a> from utest.o(.text._ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[fd]">UtestShell::runOneTestInCurrentProcess(TestPlugin*, TestResult&)</a> from utest.o(.text._ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[fd]">UtestShell::runOneTestInCurrentProcess(TestPlugin*, TestResult&)</a> from utest.o(.text._ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[fd]">UtestShell::runOneTestInCurrentProcess(TestPlugin*, TestResult&)</a> from utest.o(.text._ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[ee]">UtestShell::assertFunctionPointersEqual(void(*)(), void(*)(), const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[ee]">UtestShell::assertFunctionPointersEqual(void(*)(), void(*)(), const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[ee]">UtestShell::assertFunctionPointersEqual(void(*)(), void(*)(), const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[ee]">UtestShell::assertFunctionPointersEqual(void(*)(), void(*)(), const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_iRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[ee]">UtestShell::assertFunctionPointersEqual(void(*)(), void(*)(), const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_iRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[eb]">UtestShell::assertUnsignedLongLongsEqual(unsigned long long, unsigned long long, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell28assertUnsignedLongLongsEqualEyyPKcS1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[eb]">UtestShell::assertUnsignedLongLongsEqual(unsigned long long, unsigned long long, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell28assertUnsignedLongLongsEqualEyyPKcS1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[eb]">UtestShell::assertUnsignedLongLongsEqual(unsigned long long, unsigned long long, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell28assertUnsignedLongLongsEqualEyyPKcS1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[eb]">UtestShell::assertUnsignedLongLongsEqual(unsigned long long, unsigned long long, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell28assertUnsignedLongLongsEqualEyyPKcS1_iRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[eb]">UtestShell::assertUnsignedLongLongsEqual(unsigned long long, unsigned long long, const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell28assertUnsignedLongLongsEqualEyyPKcS1_iRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[f3]">UtestShell::fail(const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell4failEPKcS1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[f3]">UtestShell::fail(const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell4failEPKcS1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[f3]">UtestShell::fail(const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell4failEPKcS1_iRK14TestTerminator) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[f3]">UtestShell::fail(const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell4failEPKcS1_iRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[f3]">UtestShell::fail(const char*, const char*, int, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell4failEPKcS1_iRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[f5]">UtestShell::print(const char*, const char*, int)</a> from utest.o(.text._ZN10UtestShell5printEPKcS1_i) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[f5]">UtestShell::print(const char*, const char*, int)</a> from utest.o(.text._ZN10UtestShell5printEPKcS1_i) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[f5]">UtestShell::print(const char*, const char*, int)</a> from utest.o(.text._ZN10UtestShell5printEPKcS1_i) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[f5]">UtestShell::print(const char*, const char*, int)</a> from utest.o(.text._ZN10UtestShell5printEPKcS1_i) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[f5]">UtestShell::print(const char*, const char*, int)</a> from utest.o(.text._ZN10UtestShell5printEPKcS1_i) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[f6]">UtestShell::print(const SimpleString&, const char*, int)</a> from utest.o(.text._ZN10UtestShell5printERK12SimpleStringPKci) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[f6]">UtestShell::print(const SimpleString&, const char*, int)</a> from utest.o(.text._ZN10UtestShell5printERK12SimpleStringPKci) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[f6]">UtestShell::print(const SimpleString&, const char*, int)</a> from utest.o(.text._ZN10UtestShell5printERK12SimpleStringPKci) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[f6]">UtestShell::print(const SimpleString&, const char*, int)</a> from utest.o(.text._ZN10UtestShell5printERK12SimpleStringPKci) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[f6]">UtestShell::print(const SimpleString&, const char*, int)</a> from utest.o(.text._ZN10UtestShell5printERK12SimpleStringPKci) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[dc]">UtestShell::addTest(UtestShell*)</a> from utest.o(.text._ZN10UtestShell7addTestEPS_) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[dc]">UtestShell::addTest(UtestShell*)</a> from utest.o(.text._ZN10UtestShell7addTestEPS_) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[dc]">UtestShell::addTest(UtestShell*)</a> from utest.o(.text._ZN10UtestShell7addTestEPS_) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[dc]">UtestShell::addTest(UtestShell*)</a> from utest.o(.text._ZN10UtestShell7addTestEPS_) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[dc]">UtestShell::addTest(UtestShell*)</a> from utest.o(.text._ZN10UtestShell7addTestEPS_) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[f4]">UtestShell::exitTest(const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell8exitTestERK14TestTerminator) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[f4]">UtestShell::exitTest(const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell8exitTestERK14TestTerminator) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[f4]">UtestShell::exitTest(const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell8exitTestERK14TestTerminator) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[f4]">UtestShell::exitTest(const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell8exitTestERK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[f4]">UtestShell::exitTest(const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell8exitTestERK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[fe]">UtestShell::failWith(const TestFailure&)</a> from utest.o(.text._ZN10UtestShell8failWithERK11TestFailure) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[fe]">UtestShell::failWith(const TestFailure&)</a> from utest.o(.text._ZN10UtestShell8failWithERK11TestFailure) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[fe]">UtestShell::failWith(const TestFailure&)</a> from utest.o(.text._ZN10UtestShell8failWithERK11TestFailure) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[fe]">UtestShell::failWith(const TestFailure&)</a> from utest.o(.text._ZN10UtestShell8failWithERK11TestFailure) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[fe]">UtestShell::failWith(const TestFailure&)</a> from utest.o(.text._ZN10UtestShell8failWithERK11TestFailure) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[ff]">UtestShell::failWith(const TestFailure&, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[ff]">UtestShell::failWith(const TestFailure&, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[ff]">UtestShell::failWith(const TestFailure&, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[ff]">UtestShell::failWith(const TestFailure&, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[ff]">UtestShell::failWith(const TestFailure&, const TestTerminator&)</a> from utest.o(.text._ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[db]">UtestShell::~UtestShell__deallocating()</a> from utest.o(.text._ZN10UtestShellD0Ev) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[6f]">UtestShell::~UtestShell__sub_object()</a> from utest.o(.text._ZN10UtestShellD2Ev) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[6f]">UtestShell::~UtestShell__sub_object()</a> from utest.o(.text._ZN10UtestShellD2Ev) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[6f]">UtestShell::~UtestShell__sub_object()</a> from utest.o(.text._ZN10UtestShellD2Ev) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[6f]">UtestShell::~UtestShell__sub_object()</a> from utest.o(.text._ZN10UtestShellD2Ev) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[6f]">UtestShell::~UtestShell__sub_object()</a> from utest.o(.text._ZN10UtestShellD2Ev) referenced from unittest.o(.text._GLOBAL__sub_I_UnitTest.cpp)
 <LI><a href="#[1b7]">__cxxabiv1::__shim_type_info::~__shim_type_info__sub_object()</a> from private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[1b7]">__cxxabiv1::__shim_type_info::~__shim_type_info__sub_object()</a> from private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[1b7]">__cxxabiv1::__shim_type_info::~__shim_type_info__sub_object()</a> from private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
 <LI><a href="#[1b8]">__cxxabiv1::__class_type_info::~__class_type_info__deallocating()</a> from private_typeinfo.cpp.o(.text._ZN10__cxxabiv117__class_type_infoD0Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[1bf]">__cxxabiv1::__si_class_type_info::~__si_class_type_info__deallocating()</a> from private_typeinfo.cpp.o(.text._ZN10__cxxabiv120__si_class_type_infoD0Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[1c3]">__cxxabiv1::__fundamental_type_info::~__fundamental_type_info__deallocating()</a> from private_typeinfo.cpp.o(.text._ZN10__cxxabiv123__fundamental_type_infoD0Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
 <LI><a href="#[a6]">_ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block</a> from cxa_exception.cpp.o(.text._ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block) referenced 2 times from cxa_exception.cpp.o(.text.__cxa_throw)
 <LI><a href="#[a5]">_ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block</a> from cxa_exception.cpp.o(.text._ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block) referenced 2 times from cxa_exception.cpp.o(.text.__cxa_rethrow_primary_exception)
 <LI><a href="#[102]">FailFailure::~FailFailure__deallocating()</a> from testfailure.o(.text._ZN11FailFailureD0Ev) referenced from testfailure.o(.rodata._ZTV11FailFailure)
 <LI><a href="#[10a]">TestFailure::~TestFailure__deallocating()</a> from testfailure.o(.text._ZN11TestFailureD0Ev) referenced from testfailure.o(.rodata._ZTV11TestFailure)
 <LI><a href="#[101]">TestFailure::~TestFailure__sub_object()</a> from testfailure.o(.text._ZN11TestFailureD2Ev) referenced from testfailure.o(.rodata._ZTV11FailFailure)
 <LI><a href="#[101]">TestFailure::~TestFailure__sub_object()</a> from testfailure.o(.text._ZN11TestFailureD2Ev) referenced from testfailure.o(.rodata._ZTV11TestFailure)
 <LI><a href="#[101]">TestFailure::~TestFailure__sub_object()</a> from testfailure.o(.text._ZN11TestFailureD2Ev) referenced from testfailure.o(.rodata._ZTV12CheckFailure)
 <LI><a href="#[101]">TestFailure::~TestFailure__sub_object()</a> from testfailure.o(.text._ZN11TestFailureD2Ev) referenced from testfailure.o(.rodata._ZTV13EqualsFailure)
 <LI><a href="#[101]">TestFailure::~TestFailure__sub_object()</a> from testfailure.o(.text._ZN11TestFailureD2Ev) referenced from testfailure.o(.rodata._ZTV15ContainsFailure)
 <LI><a href="#[101]">TestFailure::~TestFailure__sub_object()</a> from testfailure.o(.text._ZN11TestFailureD2Ev) referenced from testfailure.o(.rodata._ZTV16BitsEqualFailure)
 <LI><a href="#[101]">TestFailure::~TestFailure__sub_object()</a> from testfailure.o(.text._ZN11TestFailureD2Ev) referenced from testfailure.o(.rodata._ZTV17CheckEqualFailure)
 <LI><a href="#[101]">TestFailure::~TestFailure__sub_object()</a> from testfailure.o(.text._ZN11TestFailureD2Ev) referenced from testfailure.o(.rodata._ZTV17LongsEqualFailure)
 <LI><a href="#[101]">TestFailure::~TestFailure__sub_object()</a> from testfailure.o(.text._ZN11TestFailureD2Ev) referenced from testfailure.o(.rodata._ZTV18BinaryEqualFailure)
 <LI><a href="#[101]">TestFailure::~TestFailure__sub_object()</a> from testfailure.o(.text._ZN11TestFailureD2Ev) referenced from testfailure.o(.rodata._ZTV18StringEqualFailure)
 <LI><a href="#[101]">TestFailure::~TestFailure__sub_object()</a> from testfailure.o(.text._ZN11TestFailureD2Ev) referenced from testfailure.o(.rodata._ZTV19DoublesEqualFailure)
 <LI><a href="#[101]">TestFailure::~TestFailure__sub_object()</a> from testfailure.o(.text._ZN11TestFailureD2Ev) referenced from testfailure.o(.rodata._ZTV21LongLongsEqualFailure)
 <LI><a href="#[101]">TestFailure::~TestFailure__sub_object()</a> from testfailure.o(.text._ZN11TestFailureD2Ev) referenced from testfailure.o(.rodata._ZTV23SignedBytesEqualFailure)
 <LI><a href="#[101]">TestFailure::~TestFailure__sub_object()</a> from testfailure.o(.text._ZN11TestFailureD2Ev) referenced from testfailure.o(.rodata._ZTV24StringEqualNoCaseFailure)
 <LI><a href="#[101]">TestFailure::~TestFailure__sub_object()</a> from testfailure.o(.text._ZN11TestFailureD2Ev) referenced from testfailure.o(.rodata._ZTV25FeatureUnsupportedFailure)
 <LI><a href="#[101]">TestFailure::~TestFailure__sub_object()</a> from testfailure.o(.text._ZN11TestFailureD2Ev) referenced from testfailure.o(.rodata._ZTV25UnsignedLongsEqualFailure)
 <LI><a href="#[101]">TestFailure::~TestFailure__sub_object()</a> from testfailure.o(.text._ZN11TestFailureD2Ev) referenced from testfailure.o(.rodata._ZTV29UnsignedLongLongsEqualFailure)
 <LI><a href="#[10b]">CheckFailure::~CheckFailure__deallocating()</a> from testfailure.o(.text._ZN12CheckFailureD0Ev) referenced from testfailure.o(.rodata._ZTV12CheckFailure)
 <LI><a href="#[76]">SimpleString::~SimpleString()</a> from simplestring.o(.text._ZN12SimpleStringD2Ev) referenced from utest.o(.text._ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_iRK14TestTerminator)
 <LI><a href="#[76]">SimpleString::~SimpleString()</a> from simplestring.o(.text._ZN12SimpleStringD2Ev) referenced from utest.o(.text._ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_iRK14TestTerminator)
 <LI><a href="#[76]">SimpleString::~SimpleString()</a> from simplestring.o(.text._ZN12SimpleStringD2Ev) referenced from utest.o(.text._ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_i)
 <LI><a href="#[76]">SimpleString::~SimpleString()</a> from simplestring.o(.text._ZN12SimpleStringD2Ev) referenced from utest.o(.text._ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_iRK14TestTerminator)
 <LI><a href="#[76]">SimpleString::~SimpleString()</a> from simplestring.o(.text._ZN12SimpleStringD2Ev) referenced from testfailure.o(.text._ZN11TestFailureD2Ev)
 <LI><a href="#[76]">SimpleString::~SimpleString()</a> from simplestring.o(.text._ZN12SimpleStringD2Ev) referenced from junittestoutput.o(.text._ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode)
 <LI><a href="#[76]">SimpleString::~SimpleString()</a> from simplestring.o(.text._ZN12SimpleStringD2Ev) referenced from testfailure.o(.text._ZN17LongsEqualFailureC2EP10UtestShellPKcillRK12SimpleString)
 <LI><a href="#[76]">SimpleString::~SimpleString()</a> from simplestring.o(.text._ZN12SimpleStringD2Ev) referenced from testfailure.o(.text._ZN18BinaryEqualFailureC2EP10UtestShellPKciPKhS5_jRK12SimpleString)
 <LI><a href="#[76]">SimpleString::~SimpleString()</a> from simplestring.o(.text._ZN12SimpleStringD2Ev) referenced from testfailure.o(.text._ZN18StringEqualFailureC2EP10UtestShellPKciS3_S3_RK12SimpleString)
 <LI><a href="#[76]">SimpleString::~SimpleString()</a> from simplestring.o(.text._ZN12SimpleStringD2Ev) referenced from testfailure.o(.text._ZN19DoublesEqualFailureC2EP10UtestShellPKcidddRK12SimpleString)
 <LI><a href="#[76]">SimpleString::~SimpleString()</a> from simplestring.o(.text._ZN12SimpleStringD2Ev) referenced from testfailure.o(.text._ZN21LongLongsEqualFailureC2EP10UtestShellPKcixxRK12SimpleString)
 <LI><a href="#[76]">SimpleString::~SimpleString()</a> from simplestring.o(.text._ZN12SimpleStringD2Ev) referenced from testfailure.o(.text._ZN24StringEqualNoCaseFailureC2EP10UtestShellPKciS3_S3_RK12SimpleString)
 <LI><a href="#[76]">SimpleString::~SimpleString()</a> from simplestring.o(.text._ZN12SimpleStringD2Ev) referenced from testfailure.o(.text._ZN25UnsignedLongsEqualFailureC2EP10UtestShellPKcimmRK12SimpleString)
 <LI><a href="#[76]">SimpleString::~SimpleString()</a> from simplestring.o(.text._ZN12SimpleStringD2Ev) referenced from testfailure.o(.text._ZN29UnsignedLongLongsEqualFailureC2EP10UtestShellPKciyyRK12SimpleString)
 <LI><a href="#[110]">TestRegistry::countTests()</a> from testregistry.o(.text._ZN12TestRegistry10countTestsEv) referenced from testregistry.o(.rodata._ZTV12TestRegistry)
 <LI><a href="#[111]">TestRegistry::runAllTests(TestResult&)</a> from testregistry.o(.text._ZN12TestRegistry11runAllTestsER10TestResult) referenced from testregistry.o(.rodata._ZTV12TestRegistry)
 <LI><a href="#[11b]">TestRegistry::countPlugins()</a> from testregistry.o(.text._ZN12TestRegistry12countPluginsEv) referenced from testregistry.o(.rodata._ZTV12TestRegistry)
 <LI><a href="#[11c]">TestRegistry::getFirstTest()</a> from testregistry.o(.text._ZN12TestRegistry12getFirstTestEv) referenced from testregistry.o(.rodata._ZTV12TestRegistry)
 <LI><a href="#[117]">TestRegistry::resetPlugins()</a> from testregistry.o(.text._ZN12TestRegistry12resetPluginsEv) referenced from testregistry.o(.rodata._ZTV12TestRegistry)
 <LI><a href="#[116]">TestRegistry::installPlugin(TestPlugin*)</a> from testregistry.o(.text._ZN12TestRegistry13installPluginEP10TestPlugin) referenced from testregistry.o(.rodata._ZTV12TestRegistry)
 <LI><a href="#[118]">TestRegistry::getFirstPlugin()</a> from testregistry.o(.text._ZN12TestRegistry14getFirstPluginEv) referenced from testregistry.o(.rodata._ZTV12TestRegistry)
 <LI><a href="#[114]">TestRegistry::setNameFilters(const TestFilter*)</a> from testregistry.o(.text._ZN12TestRegistry14setNameFiltersEPK10TestFilter) referenced from testregistry.o(.rodata._ZTV12TestRegistry)
 <LI><a href="#[119]">TestRegistry::getPluginByName(const SimpleString&)</a> from testregistry.o(.text._ZN12TestRegistry15getPluginByNameERK12SimpleString) referenced from testregistry.o(.rodata._ZTV12TestRegistry)
 <LI><a href="#[11d]">TestRegistry::getTestWithNext(UtestShell*)</a> from testregistry.o(.text._ZN12TestRegistry15getTestWithNextEP10UtestShell) referenced from testregistry.o(.rodata._ZTV12TestRegistry)
 <LI><a href="#[115]">TestRegistry::setGroupFilters(const TestFilter*)</a> from testregistry.o(.text._ZN12TestRegistry15setGroupFiltersEPK10TestFilter) referenced from testregistry.o(.rodata._ZTV12TestRegistry)
 <LI><a href="#[10f]">TestRegistry::unDoLastAddTest()</a> from testregistry.o(.text._ZN12TestRegistry15unDoLastAddTestEv) referenced from testregistry.o(.rodata._ZTV12TestRegistry)
 <LI><a href="#[11e]">TestRegistry::findTestWithName(const SimpleString&)</a> from testregistry.o(.text._ZN12TestRegistry16findTestWithNameERK12SimpleString) referenced from testregistry.o(.rodata._ZTV12TestRegistry)
 <LI><a href="#[11f]">TestRegistry::findTestWithGroup(const SimpleString&)</a> from testregistry.o(.text._ZN12TestRegistry17findTestWithGroupERK12SimpleString) referenced from testregistry.o(.rodata._ZTV12TestRegistry)
 <LI><a href="#[112]">TestRegistry::listTestGroupNames(TestResult&)</a> from testregistry.o(.text._ZN12TestRegistry18listTestGroupNamesER10TestResult) referenced from testregistry.o(.rodata._ZTV12TestRegistry)
 <LI><a href="#[11a]">TestRegistry::removePluginByName(const SimpleString&)</a> from testregistry.o(.text._ZN12TestRegistry18removePluginByNameERK12SimpleString) referenced from testregistry.o(.rodata._ZTV12TestRegistry)
 <LI><a href="#[120]">TestRegistry::setCurrentRegistry(TestRegistry*)</a> from testregistry.o(.text._ZN12TestRegistry18setCurrentRegistryEPS_) referenced from testregistry.o(.rodata._ZTV12TestRegistry)
 <LI><a href="#[113]">TestRegistry::listTestGroupAndCaseNames(TestResult&)</a> from testregistry.o(.text._ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult) referenced from testregistry.o(.rodata._ZTV12TestRegistry)
 <LI><a href="#[121]">TestRegistry::setRunTestsInSeperateProcess()</a> from testregistry.o(.text._ZN12TestRegistry28setRunTestsInSeperateProcessEv) referenced from testregistry.o(.rodata._ZTV12TestRegistry)
 <LI><a href="#[10e]">TestRegistry::addTest(UtestShell*)</a> from testregistry.o(.text._ZN12TestRegistry7addTestEP10UtestShell) referenced from testregistry.o(.rodata._ZTV12TestRegistry)
 <LI><a href="#[10d]">TestRegistry::~TestRegistry__deallocating()</a> from testregistry.o(.text._ZN12TestRegistryD0Ev) referenced from testregistry.o(.rodata._ZTV12TestRegistry)
 <LI><a href="#[10c]">TestRegistry::~TestRegistry__sub_object()</a> from testregistry.o(.text._ZN12TestRegistryD2Ev) referenced from testregistry.o(.rodata._ZTV12TestRegistry)
 <LI><a href="#[122]">EqualsFailure::~EqualsFailure__deallocating()</a> from testfailure.o(.text._ZN13EqualsFailureD0Ev) referenced from testfailure.o(.rodata._ZTV13EqualsFailure)
 <LI><a href="#[124]">TestInstaller::~TestInstaller__deallocating()</a> from utest.o(.text._ZN13TestInstallerD0Ev) referenced from utest.o(.rodata._ZTV13TestInstaller)
 <LI><a href="#[71]">TestInstaller::~TestInstaller()</a> from utest.o(.text._ZN13TestInstallerD2Ev) referenced from unittest.o(.text._GLOBAL__sub_I_UnitTest.cpp)
 <LI><a href="#[123]">TestInstaller::~TestInstaller__sub_object()</a> from utest.o(.text._ZN13TestInstallerD2Ev) referenced from utest.o(.rodata._ZTV13TestInstaller)
 <LI><a href="#[126]">NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)</a> from testplugin.o(.text._ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult) referenced from testplugin.o(.rodata._ZTV14NullTestPlugin)
 <LI><a href="#[127]">NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)</a> from testplugin.o(.text._ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult) referenced from testplugin.o(.rodata._ZTV14NullTestPlugin)
 <LI><a href="#[125]">NullTestPlugin::~NullTestPlugin__deallocating()</a> from testplugin.o(.text._ZN14NullTestPluginD0Ev) referenced from testplugin.o(.rodata._ZTV14NullTestPlugin)
 <LI><a href="#[17f]">TestTerminator::~TestTerminator__sub_object()</a> from utest.o(.text._ZN14TestTerminatorD2Ev) referenced from utest.o(.rodata._ZTV20NormalTestTerminator)
 <LI><a href="#[17f]">TestTerminator::~TestTerminator__sub_object()</a> from utest.o(.text._ZN14TestTerminatorD2Ev) referenced from utest.o(.rodata._ZTV31TestTerminatorWithoutExceptions)
 <LI><a href="#[128]">ContainsFailure::~ContainsFailure__deallocating()</a> from testfailure.o(.text._ZN15ContainsFailureD0Ev) referenced from testfailure.o(.rodata._ZTV15ContainsFailure)
 <LI><a href="#[131]">JUnitTestOutput::printBuffer(const char*)</a> from junittestoutput.o(.text._ZN15JUnitTestOutput11printBufferEPKc) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[139]">JUnitTestOutput::writeToFile(const SimpleString&)</a> from junittestoutput.o(.text._ZN15JUnitTestOutput11writeToFileERK12SimpleString) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[134]">JUnitTestOutput::printFailure(const TestFailure&)</a> from junittestoutput.o(.text._ZN15JUnitTestOutput12printFailureERK11TestFailure) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[13f]">JUnitTestOutput::writeFailure(JUnitTestCaseResultNode*)</a> from junittestoutput.o(.text._ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[136]">JUnitTestOutput::createFileName(const SimpleString&)</a> from junittestoutput.o(.text._ZN15JUnitTestOutput14createFileNameERK12SimpleString) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[13e]">JUnitTestOutput::writeTestCases()</a> from junittestoutput.o(.text._ZN15JUnitTestOutput14writeTestCasesEv) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[13b]">JUnitTestOutput::writeXmlHeader()</a> from junittestoutput.o(.text._ZN15JUnitTestOutput14writeXmlHeaderEv) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[12c]">JUnitTestOutput::printTestsEnded(const TestResult&)</a> from junittestoutput.o(.text._ZN15JUnitTestOutput15printTestsEndedERK10TestResult) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[140]">JUnitTestOutput::writeFileEnding()</a> from junittestoutput.o(.text._ZN15JUnitTestOutput15writeFileEndingEv) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[13d]">JUnitTestOutput::writeProperties()</a> from junittestoutput.o(.text._ZN15JUnitTestOutput15writePropertiesEv) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[137]">JUnitTestOutput::openFileForWrite(const SimpleString&)</a> from junittestoutput.o(.text._ZN15JUnitTestOutput16openFileForWriteERK12SimpleString) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[12b]">JUnitTestOutput::printTestsStarted()</a> from junittestoutput.o(.text._ZN15JUnitTestOutput17printTestsStartedEv) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[138]">JUnitTestOutput::writeTestGroupToFile()</a> from junittestoutput.o(.text._ZN15JUnitTestOutput20writeTestGroupToFileEv) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[12e]">JUnitTestOutput::printCurrentTestEnded(const TestResult&)</a> from junittestoutput.o(.text._ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[13c]">JUnitTestOutput::writeTestSuiteSummary()</a> from junittestoutput.o(.text._ZN15JUnitTestOutput21writeTestSuiteSummaryEv) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[130]">JUnitTestOutput::printCurrentGroupEnded(const TestResult&)</a> from junittestoutput.o(.text._ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[12d]">JUnitTestOutput::printCurrentTestStarted(const UtestShell&)</a> from junittestoutput.o(.text._ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[12f]">JUnitTestOutput::printCurrentGroupStarted(const UtestShell&)</a> from junittestoutput.o(.text._ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[135]">JUnitTestOutput::flush()</a> from junittestoutput.o(.text._ZN15JUnitTestOutput5flushEv) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[132]">JUnitTestOutput::print(const char*)</a> from junittestoutput.o(.text._ZN15JUnitTestOutput5printEPKc) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[133]">JUnitTestOutput::print(long)</a> from junittestoutput.o(.text._ZN15JUnitTestOutput5printEl) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[13a]">JUnitTestOutput::closeFile()</a> from junittestoutput.o(.text._ZN15JUnitTestOutput9closeFileEv) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[12a]">JUnitTestOutput::~JUnitTestOutput__deallocating()</a> from junittestoutput.o(.text._ZN15JUnitTestOutputD0Ev) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[129]">JUnitTestOutput::~JUnitTestOutput__sub_object()</a> from junittestoutput.o(.text._ZN15JUnitTestOutputD2Ev) referenced from junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
 <LI><a href="#[141]">BitsEqualFailure::~BitsEqualFailure__deallocating()</a> from testfailure.o(.text._ZN16BitsEqualFailureD0Ev) referenced from testfailure.o(.rodata._ZTV16BitsEqualFailure)
 <LI><a href="#[145]">ExecFunctionTest::setup()</a> from utest.o(.text._ZN16ExecFunctionTest5setupEv) referenced from utest.o(.rodata._ZTV16ExecFunctionTest)
 <LI><a href="#[146]">ExecFunctionTest::teardown()</a> from utest.o(.text._ZN16ExecFunctionTest8teardownEv) referenced from utest.o(.rodata._ZTV16ExecFunctionTest)
 <LI><a href="#[147]">ExecFunctionTest::testBody()</a> from utest.o(.text._ZN16ExecFunctionTest8testBodyEv) referenced from utest.o(.rodata._ZTV16ExecFunctionTest)
 <LI><a href="#[143]">ExecFunctionTest::~ExecFunctionTest__deallocating()</a> from utest.o(.text._ZN16ExecFunctionTestD0Ev) referenced from utest.o(.rodata._ZTV16ExecFunctionTest)
 <LI><a href="#[149]">SetPointerPlugin::postTestAction(UtestShell&, TestResult&)</a> from testplugin.o(.text._ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult) referenced from testplugin.o(.rodata._ZTV16SetPointerPlugin)
 <LI><a href="#[148]">SetPointerPlugin::~SetPointerPlugin__deallocating()</a> from testplugin.o(.text._ZN16SetPointerPluginD0Ev) referenced from testplugin.o(.rodata._ZTV16SetPointerPlugin)
 <LI><a href="#[14a]">CheckEqualFailure::~CheckEqualFailure__deallocating()</a> from testfailure.o(.text._ZN17CheckEqualFailureD0Ev) referenced from testfailure.o(.rodata._ZTV17CheckEqualFailure)
 <LI><a href="#[14c]">ConsoleTestOutput::printBuffer(const char*)</a> from testoutput.o(.text._ZN17ConsoleTestOutput11printBufferEPKc) referenced from testoutput.o(.rodata._ZTV17ConsoleTestOutput)
 <LI><a href="#[14c]">ConsoleTestOutput::printBuffer(const char*)</a> from testoutput.o(.text._ZN17ConsoleTestOutput11printBufferEPKc) referenced from teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
 <LI><a href="#[14d]">ConsoleTestOutput::flush()</a> from testoutput.o(.text._ZN17ConsoleTestOutput5flushEv) referenced from testoutput.o(.rodata._ZTV17ConsoleTestOutput)
 <LI><a href="#[14d]">ConsoleTestOutput::flush()</a> from testoutput.o(.text._ZN17ConsoleTestOutput5flushEv) referenced from teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
 <LI><a href="#[14b]">ConsoleTestOutput::~ConsoleTestOutput__deallocating()</a> from testoutput.o(.text._ZN17ConsoleTestOutputD0Ev) referenced from testoutput.o(.rodata._ZTV17ConsoleTestOutput)
 <LI><a href="#[151]">IgnoredUtestShell::runOneTest(TestPlugin*, TestResult&)</a> from utest.o(.text._ZN17IgnoredUtestShell10runOneTestEP10TestPluginR10TestResult) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[150]">IgnoredUtestShell::setRunIgnored()</a> from utest.o(.text._ZN17IgnoredUtestShell13setRunIgnoredEv) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[14e]">IgnoredUtestShell::~IgnoredUtestShell__deallocating()</a> from utest.o(.text._ZN17IgnoredUtestShellD0Ev) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[153]">LongsEqualFailure::~LongsEqualFailure__deallocating()</a> from testfailure.o(.text._ZN17LongsEqualFailureD0Ev) referenced from testfailure.o(.rodata._ZTV17LongsEqualFailure)
 <LI><a href="#[1a0]">MemoryLeakFailure::~MemoryLeakFailure__sub_object()</a> from memoryleakwarningplugin.o(.text._ZN17MemoryLeakFailureD2Ev) referenced from memoryleakwarningplugin.o(.rodata._ZTV25MemoryLeakWarningReporter)
 <LI><a href="#[154]">BinaryEqualFailure::~BinaryEqualFailure__deallocating()</a> from testfailure.o(.text._ZN18BinaryEqualFailureD0Ev) referenced from testfailure.o(.rodata._ZTV18BinaryEqualFailure)
 <LI><a href="#[156]">MemoryLeakDetector::~MemoryLeakDetector__deallocating()</a> from memoryleakdetector.o(.text._ZN18MemoryLeakDetectorD0Ev) referenced from memoryleakdetector.o(.rodata._ZTV18MemoryLeakDetector)
 <LI><a href="#[155]">MemoryLeakDetector::~MemoryLeakDetector__sub_object()</a> from memoryleakdetector.o(.text._ZN18MemoryLeakDetectorD2Ev) referenced from memoryleakdetector.o(.rodata._ZTV18MemoryLeakDetector)
 <LI><a href="#[157]">StringEqualFailure::~StringEqualFailure__deallocating()</a> from testfailure.o(.text._ZN18StringEqualFailureD0Ev) referenced from testfailure.o(.rodata._ZTV18StringEqualFailure)
 <LI><a href="#[15e]">TeamCityTestOutput::printFailure(const TestFailure&)</a> from teamcitytestoutput.o(.text._ZN18TeamCityTestOutput12printFailureERK11TestFailure) referenced from teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
 <LI><a href="#[15b]">TeamCityTestOutput::printCurrentTestEnded(const TestResult&)</a> from teamcitytestoutput.o(.text._ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult) referenced from teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
 <LI><a href="#[15d]">TeamCityTestOutput::printCurrentGroupEnded(const TestResult&)</a> from teamcitytestoutput.o(.text._ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult) referenced from teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
 <LI><a href="#[15a]">TeamCityTestOutput::printCurrentTestStarted(const UtestShell&)</a> from teamcitytestoutput.o(.text._ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell) referenced from teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
 <LI><a href="#[15c]">TeamCityTestOutput::printCurrentGroupStarted(const UtestShell&)</a> from teamcitytestoutput.o(.text._ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell) referenced from teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
 <LI><a href="#[159]">TeamCityTestOutput::~TeamCityTestOutput__deallocating()</a> from teamcitytestoutput.o(.text._ZN18TeamCityTestOutputD0Ev) referenced from teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
 <LI><a href="#[158]">TeamCityTestOutput::~TeamCityTestOutput__sub_object()</a> from teamcitytestoutput.o(.text._ZN18TeamCityTestOutputD2Ev) referenced from teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
 <LI><a href="#[169]">CompositeTestOutput::printBuffer(const char*)</a> from testoutput.o(.text._ZN19CompositeTestOutput11printBufferEPKc) referenced from testoutput.o(.rodata._ZTV19CompositeTestOutput)
 <LI><a href="#[16c]">CompositeTestOutput::printDouble(double)</a> from testoutput.o(.text._ZN19CompositeTestOutput11printDoubleEd) referenced from testoutput.o(.rodata._ZTV19CompositeTestOutput)
 <LI><a href="#[16d]">CompositeTestOutput::printFailure(const TestFailure&)</a> from testoutput.o(.text._ZN19CompositeTestOutput12printFailureERK11TestFailure) referenced from testoutput.o(.rodata._ZTV19CompositeTestOutput)
 <LI><a href="#[170]">CompositeTestOutput::setOutputOne(TestOutput*)</a> from testoutput.o(.text._ZN19CompositeTestOutput12setOutputOneEP10TestOutput) referenced from testoutput.o(.rodata._ZTV19CompositeTestOutput)
 <LI><a href="#[171]">CompositeTestOutput::setOutputTwo(TestOutput*)</a> from testoutput.o(.text._ZN19CompositeTestOutput12setOutputTwoEP10TestOutput) referenced from testoutput.o(.rodata._ZTV19CompositeTestOutput)
 <LI><a href="#[162]">CompositeTestOutput::printTestsEnded(const TestResult&)</a> from testoutput.o(.text._ZN19CompositeTestOutput15printTestsEndedERK10TestResult) referenced from testoutput.o(.rodata._ZTV19CompositeTestOutput)
 <LI><a href="#[161]">CompositeTestOutput::printTestsStarted()</a> from testoutput.o(.text._ZN19CompositeTestOutput17printTestsStartedEv) referenced from testoutput.o(.rodata._ZTV19CompositeTestOutput)
 <LI><a href="#[16e]">CompositeTestOutput::setProgressIndicator(const char*)</a> from testoutput.o(.text._ZN19CompositeTestOutput20setProgressIndicatorEPKc) referenced from testoutput.o(.rodata._ZTV19CompositeTestOutput)
 <LI><a href="#[164]">CompositeTestOutput::printCurrentTestEnded(const TestResult&)</a> from testoutput.o(.text._ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult) referenced from testoutput.o(.rodata._ZTV19CompositeTestOutput)
 <LI><a href="#[166]">CompositeTestOutput::printCurrentGroupEnded(const TestResult&)</a> from testoutput.o(.text._ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult) referenced from testoutput.o(.rodata._ZTV19CompositeTestOutput)
 <LI><a href="#[163]">CompositeTestOutput::printCurrentTestStarted(const UtestShell&)</a> from testoutput.o(.text._ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell) referenced from testoutput.o(.rodata._ZTV19CompositeTestOutput)
 <LI><a href="#[165]">CompositeTestOutput::printCurrentGroupStarted(const UtestShell&)</a> from testoutput.o(.text._ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell) referenced from testoutput.o(.rodata._ZTV19CompositeTestOutput)
 <LI><a href="#[168]">CompositeTestOutput::color()</a> from testoutput.o(.text._ZN19CompositeTestOutput5colorEv) referenced from testoutput.o(.rodata._ZTV19CompositeTestOutput)
 <LI><a href="#[16f]">CompositeTestOutput::flush()</a> from testoutput.o(.text._ZN19CompositeTestOutput5flushEv) referenced from testoutput.o(.rodata._ZTV19CompositeTestOutput)
 <LI><a href="#[16a]">CompositeTestOutput::print(const char*)</a> from testoutput.o(.text._ZN19CompositeTestOutput5printEPKc) referenced from testoutput.o(.rodata._ZTV19CompositeTestOutput)
 <LI><a href="#[16b]">CompositeTestOutput::print(long)</a> from testoutput.o(.text._ZN19CompositeTestOutput5printEl) referenced from testoutput.o(.rodata._ZTV19CompositeTestOutput)
 <LI><a href="#[167]">CompositeTestOutput::verbose()</a> from testoutput.o(.text._ZN19CompositeTestOutput7verboseEv) referenced from testoutput.o(.rodata._ZTV19CompositeTestOutput)
 <LI><a href="#[160]">CompositeTestOutput::~CompositeTestOutput__deallocating()</a> from testoutput.o(.text._ZN19CompositeTestOutputD0Ev) referenced from testoutput.o(.rodata._ZTV19CompositeTestOutput)
 <LI><a href="#[15f]">CompositeTestOutput::~CompositeTestOutput__sub_object()</a> from testoutput.o(.text._ZN19CompositeTestOutputD2Ev) referenced from testoutput.o(.rodata._ZTV19CompositeTestOutput)
 <LI><a href="#[172]">DoublesEqualFailure::~DoublesEqualFailure__deallocating()</a> from testfailure.o(.text._ZN19DoublesEqualFailureD0Ev) referenced from testfailure.o(.rodata._ZTV19DoublesEqualFailure)
 <LI><a href="#[177]">TestMemoryAllocator::alloc_name()</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocator10alloc_nameEv) referenced from testmemoryallocator.o(.rodata._ZTV19TestMemoryAllocator)
 <LI><a href="#[177]">TestMemoryAllocator::alloc_name()</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocator10alloc_nameEv) referenced from testmemoryallocator.o(.rodata._ZTV20NullUnknownAllocator)
 <LI><a href="#[177]">TestMemoryAllocator::alloc_name()</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocator10alloc_nameEv) referenced from testmemoryallocator.o(.rodata._ZTV23FailableMemoryAllocator)
 <LI><a href="#[177]">TestMemoryAllocator::alloc_name()</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocator10alloc_nameEv) referenced from testmemoryallocator.o(.rodata._ZTV26CrashOnAllocationAllocator)
 <LI><a href="#[175]">TestMemoryAllocator::free_memory(char*, const char*, int)</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocator11free_memoryEPcPKci) referenced from testmemoryallocator.o(.rodata._ZTV19TestMemoryAllocator)
 <LI><a href="#[175]">TestMemoryAllocator::free_memory(char*, const char*, int)</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocator11free_memoryEPcPKci) referenced from testmemoryallocator.o(.rodata._ZTV23FailableMemoryAllocator)
 <LI><a href="#[175]">TestMemoryAllocator::free_memory(char*, const char*, int)</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocator11free_memoryEPcPKci) referenced from testmemoryallocator.o(.rodata._ZTV26CrashOnAllocationAllocator)
 <LI><a href="#[174]">TestMemoryAllocator::alloc_memory(unsigned, const char*, int)</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocator12alloc_memoryEjPKci) referenced from testmemoryallocator.o(.rodata._ZTV19TestMemoryAllocator)
 <LI><a href="#[179]">TestMemoryAllocator::isOfEqualType(TestMemoryAllocator*)</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocator13isOfEqualTypeEPS_) referenced from testmemoryallocator.o(.rodata._ZTV19TestMemoryAllocator)
 <LI><a href="#[179]">TestMemoryAllocator::isOfEqualType(TestMemoryAllocator*)</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocator13isOfEqualTypeEPS_) referenced from testmemoryallocator.o(.rodata._ZTV20NullUnknownAllocator)
 <LI><a href="#[179]">TestMemoryAllocator::isOfEqualType(TestMemoryAllocator*)</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocator13isOfEqualTypeEPS_) referenced from testmemoryallocator.o(.rodata._ZTV23FailableMemoryAllocator)
 <LI><a href="#[179]">TestMemoryAllocator::isOfEqualType(TestMemoryAllocator*)</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocator13isOfEqualTypeEPS_) referenced from testmemoryallocator.o(.rodata._ZTV26CrashOnAllocationAllocator)
 <LI><a href="#[17b]">TestMemoryAllocator::freeMemoryLeakNode(char*)</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc) referenced from testmemoryallocator.o(.rodata._ZTV19TestMemoryAllocator)
 <LI><a href="#[17b]">TestMemoryAllocator::freeMemoryLeakNode(char*)</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc) referenced from testmemoryallocator.o(.rodata._ZTV20NullUnknownAllocator)
 <LI><a href="#[17b]">TestMemoryAllocator::freeMemoryLeakNode(char*)</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc) referenced from testmemoryallocator.o(.rodata._ZTV23FailableMemoryAllocator)
 <LI><a href="#[17b]">TestMemoryAllocator::freeMemoryLeakNode(char*)</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc) referenced from testmemoryallocator.o(.rodata._ZTV26CrashOnAllocationAllocator)
 <LI><a href="#[17a]">TestMemoryAllocator::allocMemoryLeakNode(unsigned)</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocator19allocMemoryLeakNodeEj) referenced from testmemoryallocator.o(.rodata._ZTV19TestMemoryAllocator)
 <LI><a href="#[17a]">TestMemoryAllocator::allocMemoryLeakNode(unsigned)</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocator19allocMemoryLeakNodeEj) referenced from testmemoryallocator.o(.rodata._ZTV20NullUnknownAllocator)
 <LI><a href="#[17a]">TestMemoryAllocator::allocMemoryLeakNode(unsigned)</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocator19allocMemoryLeakNodeEj) referenced from testmemoryallocator.o(.rodata._ZTV26CrashOnAllocationAllocator)
 <LI><a href="#[176]">TestMemoryAllocator::name()</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocator4nameEv) referenced from testmemoryallocator.o(.rodata._ZTV19TestMemoryAllocator)
 <LI><a href="#[176]">TestMemoryAllocator::name()</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocator4nameEv) referenced from testmemoryallocator.o(.rodata._ZTV20NullUnknownAllocator)
 <LI><a href="#[176]">TestMemoryAllocator::name()</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocator4nameEv) referenced from testmemoryallocator.o(.rodata._ZTV23FailableMemoryAllocator)
 <LI><a href="#[176]">TestMemoryAllocator::name()</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocator4nameEv) referenced from testmemoryallocator.o(.rodata._ZTV26CrashOnAllocationAllocator)
 <LI><a href="#[178]">TestMemoryAllocator::free_name()</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocator9free_nameEv) referenced from testmemoryallocator.o(.rodata._ZTV19TestMemoryAllocator)
 <LI><a href="#[178]">TestMemoryAllocator::free_name()</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocator9free_nameEv) referenced from testmemoryallocator.o(.rodata._ZTV20NullUnknownAllocator)
 <LI><a href="#[178]">TestMemoryAllocator::free_name()</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocator9free_nameEv) referenced from testmemoryallocator.o(.rodata._ZTV23FailableMemoryAllocator)
 <LI><a href="#[178]">TestMemoryAllocator::free_name()</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocator9free_nameEv) referenced from testmemoryallocator.o(.rodata._ZTV26CrashOnAllocationAllocator)
 <LI><a href="#[173]">TestMemoryAllocator::~TestMemoryAllocator__deallocating()</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocatorD0Ev) referenced from testmemoryallocator.o(.rodata._ZTV19TestMemoryAllocator)
 <LI><a href="#[72]">TestMemoryAllocator::~TestMemoryAllocator__sub_object()</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocatorD2Ev) referenced from testmemoryallocator.o(.rodata._ZTV19TestMemoryAllocator)
 <LI><a href="#[72]">TestMemoryAllocator::~TestMemoryAllocator__sub_object()</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocatorD2Ev) referenced from testmemoryallocator.o(.rodata._ZTV20NullUnknownAllocator)
 <LI><a href="#[72]">TestMemoryAllocator::~TestMemoryAllocator__sub_object()</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocatorD2Ev) referenced from testmemoryallocator.o(.rodata._ZTV23FailableMemoryAllocator)
 <LI><a href="#[72]">TestMemoryAllocator::~TestMemoryAllocator__sub_object()</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocatorD2Ev) referenced from testmemoryallocator.o(.rodata._ZTV26CrashOnAllocationAllocator)
 <LI><a href="#[72]">TestMemoryAllocator::~TestMemoryAllocator__sub_object()</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocatorD2Ev) referenced from memoryleakwarningplugin.o(.text._Z26crash_on_allocation_numberj)
 <LI><a href="#[72]">TestMemoryAllocator::~TestMemoryAllocator__sub_object()</a> from testmemoryallocator.o(.text._ZN19TestMemoryAllocatorD2Ev) referenced from testmemoryallocator.o(.text._ZN20NullUnknownAllocator16defaultAllocatorEv)
 <LI><a href="#[17d]">CommandLineArguments::~CommandLineArguments__deallocating()</a> from commandlinearguments.o(.text._ZN20CommandLineArgumentsD0Ev) referenced from commandlinearguments.o(.rodata._ZTV20CommandLineArguments)
 <LI><a href="#[17c]">CommandLineArguments::~CommandLineArguments__sub_object()</a> from commandlinearguments.o(.text._ZN20CommandLineArgumentsD2Ev) referenced from commandlinearguments.o(.rodata._ZTV20CommandLineArguments)
 <LI><a href="#[180]">NormalTestTerminator::~NormalTestTerminator__deallocating()</a> from utest.o(.text._ZN20NormalTestTerminatorD0Ev) referenced from utest.o(.rodata._ZTV20NormalTestTerminator)
 <LI><a href="#[183]">NullUnknownAllocator::free_memory(char*, const char*, int)</a> from testmemoryallocator.o(.text._ZN20NullUnknownAllocator11free_memoryEPcPKci) referenced from testmemoryallocator.o(.rodata._ZTV20NullUnknownAllocator)
 <LI><a href="#[182]">NullUnknownAllocator::alloc_memory(unsigned, const char*, int)</a> from testmemoryallocator.o(.text._ZN20NullUnknownAllocator12alloc_memoryEjPKci) referenced from testmemoryallocator.o(.rodata._ZTV20NullUnknownAllocator)
 <LI><a href="#[181]">NullUnknownAllocator::~NullUnknownAllocator__deallocating()</a> from testmemoryallocator.o(.text._ZN20NullUnknownAllocatorD0Ev) referenced from testmemoryallocator.o(.rodata._ZTV20NullUnknownAllocator)
 <LI><a href="#[187]">CommandLineTestRunner::createJUnitOutput(const SimpleString&)</a> from commandlinetestrunner.o(.text._ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString) referenced from commandlinetestrunner.o(.rodata._ZTV21CommandLineTestRunner)
 <LI><a href="#[188]">CommandLineTestRunner::createConsoleOutput()</a> from commandlinetestrunner.o(.text._ZN21CommandLineTestRunner19createConsoleOutputEv) referenced from commandlinetestrunner.o(.rodata._ZTV21CommandLineTestRunner)
 <LI><a href="#[186]">CommandLineTestRunner::createTeamCityOutput()</a> from commandlinetestrunner.o(.text._ZN21CommandLineTestRunner20createTeamCityOutputEv) referenced from commandlinetestrunner.o(.rodata._ZTV21CommandLineTestRunner)
 <LI><a href="#[189]">CommandLineTestRunner::createCompositeOutput(TestOutput*, TestOutput*)</a> from commandlinetestrunner.o(.text._ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_) referenced from commandlinetestrunner.o(.rodata._ZTV21CommandLineTestRunner)
 <LI><a href="#[185]">CommandLineTestRunner::~CommandLineTestRunner__deallocating()</a> from commandlinetestrunner.o(.text._ZN21CommandLineTestRunnerD0Ev) referenced from commandlinetestrunner.o(.rodata._ZTV21CommandLineTestRunner)
 <LI><a href="#[184]">CommandLineTestRunner::~CommandLineTestRunner__sub_object()</a> from commandlinetestrunner.o(.text._ZN21CommandLineTestRunnerD2Ev) referenced from commandlinetestrunner.o(.rodata._ZTV21CommandLineTestRunner)
 <LI><a href="#[18a]">LongLongsEqualFailure::~LongLongsEqualFailure__deallocating()</a> from testfailure.o(.text._ZN21LongLongsEqualFailureD0Ev) referenced from testfailure.o(.rodata._ZTV21LongLongsEqualFailure)
 <LI><a href="#[18c]">OutsideTestRunnerUTest::getTestResult()</a> from utest.o(.text._ZN22OutsideTestRunnerUTest13getTestResultEv) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[18b]">OutsideTestRunnerUTest::~OutsideTestRunnerUTest__deallocating()</a> from utest.o(.text._ZN22OutsideTestRunnerUTestD0Ev) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[7a]">OutsideTestRunnerUTest::~OutsideTestRunnerUTest__sub_object()</a> from utest.o(.text._ZN22OutsideTestRunnerUTestD2Ev) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[7a]">OutsideTestRunnerUTest::~OutsideTestRunnerUTest__sub_object()</a> from utest.o(.text._ZN22OutsideTestRunnerUTestD2Ev) referenced from utest.o(.text._ZN22OutsideTestRunnerUTest8instanceEv)
 <LI><a href="#[18f]">StringBufferTestOutput::printBuffer(const char*)</a> from testoutput.o(.text._ZN22StringBufferTestOutput11printBufferEPKc) referenced from testoutput.o(.rodata._ZTV22StringBufferTestOutput)
 <LI><a href="#[190]">StringBufferTestOutput::flush()</a> from testoutput.o(.text._ZN22StringBufferTestOutput5flushEv) referenced from testoutput.o(.rodata._ZTV22StringBufferTestOutput)
 <LI><a href="#[18e]">StringBufferTestOutput::~StringBufferTestOutput__deallocating()</a> from testoutput.o(.text._ZN22StringBufferTestOutputD0Ev) referenced from testoutput.o(.rodata._ZTV22StringBufferTestOutput)
 <LI><a href="#[18d]">StringBufferTestOutput::~StringBufferTestOutput__sub_object()</a> from testoutput.o(.text._ZN22StringBufferTestOutputD2Ev) referenced from testoutput.o(.rodata._ZTV22StringBufferTestOutput)
 <LI><a href="#[192]">FailableMemoryAllocator::alloc_memory(unsigned, const char*, int)</a> from testmemoryallocator.o(.text._ZN23FailableMemoryAllocator12alloc_memoryEjPKci) referenced from testmemoryallocator.o(.rodata._ZTV23FailableMemoryAllocator)
 <LI><a href="#[195]">FailableMemoryAllocator::failNthAllocAt(int, const char*, int)</a> from testmemoryallocator.o(.text._ZN23FailableMemoryAllocator14failNthAllocAtEiPKci) referenced from testmemoryallocator.o(.rodata._ZTV23FailableMemoryAllocator)
 <LI><a href="#[194]">FailableMemoryAllocator::failAllocNumber(int)</a> from testmemoryallocator.o(.text._ZN23FailableMemoryAllocator15failAllocNumberEi) referenced from testmemoryallocator.o(.rodata._ZTV23FailableMemoryAllocator)
 <LI><a href="#[197]">FailableMemoryAllocator::clearFailedAllocs()</a> from testmemoryallocator.o(.text._ZN23FailableMemoryAllocator17clearFailedAllocsEv) referenced from testmemoryallocator.o(.rodata._ZTV23FailableMemoryAllocator)
 <LI><a href="#[193]">FailableMemoryAllocator::allocMemoryLeakNode(unsigned)</a> from testmemoryallocator.o(.text._ZN23FailableMemoryAllocator19allocMemoryLeakNodeEj) referenced from testmemoryallocator.o(.rodata._ZTV23FailableMemoryAllocator)
 <LI><a href="#[196]">FailableMemoryAllocator::checkAllFailedAllocsWereDone()</a> from testmemoryallocator.o(.text._ZN23FailableMemoryAllocator28checkAllFailedAllocsWereDoneEv) referenced from testmemoryallocator.o(.rodata._ZTV23FailableMemoryAllocator)
 <LI><a href="#[191]">FailableMemoryAllocator::~FailableMemoryAllocator__deallocating()</a> from testmemoryallocator.o(.text._ZN23FailableMemoryAllocatorD0Ev) referenced from testmemoryallocator.o(.rodata._ZTV23FailableMemoryAllocator)
 <LI><a href="#[19c]">MemoryLeakWarningPlugin::FinalReport(int)</a> from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin11FinalReportEi) referenced from memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[19a]">MemoryLeakWarningPlugin::preTestAction(UtestShell&, TestResult&)</a> from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult) referenced from memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[19b]">MemoryLeakWarningPlugin::postTestAction(UtestShell&, TestResult&)</a> from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult) referenced from memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[199]">MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin__deallocating()</a> from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPluginD0Ev) referenced from memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[198]">MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin__sub_object()</a> from memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPluginD2Ev) referenced from memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[19d]">SignedBytesEqualFailure::~SignedBytesEqualFailure__deallocating()</a> from testfailure.o(.text._ZN23SignedBytesEqualFailureD0Ev) referenced from testfailure.o(.rodata._ZTV23SignedBytesEqualFailure)
 <LI><a href="#[19e]">StringEqualNoCaseFailure::~StringEqualNoCaseFailure__deallocating()</a> from testfailure.o(.text._ZN24StringEqualNoCaseFailureD0Ev) referenced from testfailure.o(.rodata._ZTV24StringEqualNoCaseFailure)
 <LI><a href="#[19f]">FeatureUnsupportedFailure::~FeatureUnsupportedFailure__deallocating()</a> from testfailure.o(.text._ZN25FeatureUnsupportedFailureD0Ev) referenced from testfailure.o(.rodata._ZTV25FeatureUnsupportedFailure)
 <LI><a href="#[1a2]">MemoryLeakWarningReporter::fail(char*)</a> from memoryleakwarningplugin.o(.text._ZN25MemoryLeakWarningReporter4failEPc) referenced from memoryleakwarningplugin.o(.rodata._ZTV25MemoryLeakWarningReporter)
 <LI><a href="#[1a1]">MemoryLeakWarningReporter::~MemoryLeakWarningReporter__deallocating()</a> from memoryleakwarningplugin.o(.text._ZN25MemoryLeakWarningReporterD0Ev) referenced from memoryleakwarningplugin.o(.rodata._ZTV25MemoryLeakWarningReporter)
 <LI><a href="#[1a3]">UnsignedLongsEqualFailure::~UnsignedLongsEqualFailure__deallocating()</a> from testfailure.o(.text._ZN25UnsignedLongsEqualFailureD0Ev) referenced from testfailure.o(.rodata._ZTV25UnsignedLongsEqualFailure)
 <LI><a href="#[1a5]">CrashOnAllocationAllocator::alloc_memory(unsigned, const char*, int)</a> from testmemoryallocator.o(.text._ZN26CrashOnAllocationAllocator12alloc_memoryEjPKci) referenced from testmemoryallocator.o(.rodata._ZTV26CrashOnAllocationAllocator)
 <LI><a href="#[1a6]">CrashOnAllocationAllocator::setNumberToCrashOn(unsigned)</a> from testmemoryallocator.o(.text._ZN26CrashOnAllocationAllocator18setNumberToCrashOnEj) referenced from testmemoryallocator.o(.rodata._ZTV26CrashOnAllocationAllocator)
 <LI><a href="#[1a4]">CrashOnAllocationAllocator::~CrashOnAllocationAllocator__deallocating()</a> from testmemoryallocator.o(.text._ZN26CrashOnAllocationAllocatorD0Ev) referenced from testmemoryallocator.o(.rodata._ZTV26CrashOnAllocationAllocator)
 <LI><a href="#[1a7]">UnsignedLongLongsEqualFailure::~UnsignedLongLongsEqualFailure__deallocating()</a> from testfailure.o(.text._ZN29UnsignedLongLongsEqualFailureD0Ev) referenced from testfailure.o(.rodata._ZTV29UnsignedLongLongsEqualFailure)
 <LI><a href="#[1ab]">TEST_myFirstUnitTest_API1_Test::testBody()</a> from unittest.o(.text._ZN30TEST_myFirstUnitTest_API1_Test8testBodyEv) referenced from unittest.o(.rodata._ZTV30TEST_myFirstUnitTest_API1_Test)
 <LI><a href="#[1a8]">TEST_myFirstUnitTest_API1_Test::~TEST_myFirstUnitTest_API1_Test__deallocating()</a> from unittest.o(.text._ZN30TEST_myFirstUnitTest_API1_TestD0Ev) referenced from unittest.o(.rodata._ZTV30TEST_myFirstUnitTest_API1_Test)
 <LI><a href="#[1ad]">TEST_myFirstUnitTest_API2_Test::testBody()</a> from unittest.o(.text._ZN30TEST_myFirstUnitTest_API2_Test8testBodyEv) referenced from unittest.o(.rodata._ZTV30TEST_myFirstUnitTest_API2_Test)
 <LI><a href="#[1ac]">TEST_myFirstUnitTest_API2_Test::~TEST_myFirstUnitTest_API2_Test__deallocating()</a> from unittest.o(.text._ZN30TEST_myFirstUnitTest_API2_TestD0Ev) referenced from unittest.o(.rodata._ZTV30TEST_myFirstUnitTest_API2_Test)
 <LI><a href="#[1af]">TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions__deallocating()</a> from utest.o(.text._ZN31TestTerminatorWithoutExceptionsD0Ev) referenced from utest.o(.rodata._ZTV31TestTerminatorWithoutExceptions)
 <LI><a href="#[1b1]">TEST_myFirstUnitTest_API1_TestShell::createTest()</a> from unittest.o(.text._ZN35TEST_myFirstUnitTest_API1_TestShell10createTestEv) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[1b0]">TEST_myFirstUnitTest_API1_TestShell::~TEST_myFirstUnitTest_API1_TestShell__deallocating()</a> from unittest.o(.text._ZN35TEST_myFirstUnitTest_API1_TestShellD0Ev) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[1b3]">TEST_myFirstUnitTest_API2_TestShell::createTest()</a> from unittest.o(.text._ZN35TEST_myFirstUnitTest_API2_TestShell10createTestEv) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[1b2]">TEST_myFirstUnitTest_API2_TestShell::~TEST_myFirstUnitTest_API2_TestShell__deallocating()</a> from unittest.o(.text._ZN35TEST_myFirstUnitTest_API2_TestShellD0Ev) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[1b4]">TEST_GROUP_CppUTestGroupmyFirstUnitTest::~TEST_GROUP_CppUTestGroupmyFirstUnitTest__deallocating()</a> from unittest.o(.text._ZN39TEST_GROUP_CppUTestGroupmyFirstUnitTestD0Ev) referenced from unittest.o(.rodata._ZTV39TEST_GROUP_CppUTestGroupmyFirstUnitTest)
 <LI><a href="#[144]">Utest::run()</a> from utest.o(.text._ZN5Utest3runEv) referenced from utest.o(.rodata._ZTV16ExecFunctionTest)
 <LI><a href="#[144]">Utest::run()</a> from utest.o(.text._ZN5Utest3runEv) referenced from unittest.o(.rodata._ZTV30TEST_myFirstUnitTest_API1_Test)
 <LI><a href="#[144]">Utest::run()</a> from utest.o(.text._ZN5Utest3runEv) referenced from unittest.o(.rodata._ZTV30TEST_myFirstUnitTest_API2_Test)
 <LI><a href="#[144]">Utest::run()</a> from utest.o(.text._ZN5Utest3runEv) referenced from unittest.o(.rodata._ZTV39TEST_GROUP_CppUTestGroupmyFirstUnitTest)
 <LI><a href="#[144]">Utest::run()</a> from utest.o(.text._ZN5Utest3runEv) referenced from utest.o(.rodata._ZTV5Utest)
 <LI><a href="#[1a9]">Utest::setup()</a> from utest.o(.text._ZN5Utest5setupEv) referenced from unittest.o(.rodata._ZTV30TEST_myFirstUnitTest_API1_Test)
 <LI><a href="#[1a9]">Utest::setup()</a> from utest.o(.text._ZN5Utest5setupEv) referenced from unittest.o(.rodata._ZTV30TEST_myFirstUnitTest_API2_Test)
 <LI><a href="#[1a9]">Utest::setup()</a> from utest.o(.text._ZN5Utest5setupEv) referenced from unittest.o(.rodata._ZTV39TEST_GROUP_CppUTestGroupmyFirstUnitTest)
 <LI><a href="#[1a9]">Utest::setup()</a> from utest.o(.text._ZN5Utest5setupEv) referenced from utest.o(.rodata._ZTV5Utest)
 <LI><a href="#[1aa]">Utest::teardown()</a> from utest.o(.text._ZN5Utest8teardownEv) referenced from unittest.o(.rodata._ZTV30TEST_myFirstUnitTest_API1_Test)
 <LI><a href="#[1aa]">Utest::teardown()</a> from utest.o(.text._ZN5Utest8teardownEv) referenced from unittest.o(.rodata._ZTV30TEST_myFirstUnitTest_API2_Test)
 <LI><a href="#[1aa]">Utest::teardown()</a> from utest.o(.text._ZN5Utest8teardownEv) referenced from unittest.o(.rodata._ZTV39TEST_GROUP_CppUTestGroupmyFirstUnitTest)
 <LI><a href="#[1aa]">Utest::teardown()</a> from utest.o(.text._ZN5Utest8teardownEv) referenced from utest.o(.rodata._ZTV5Utest)
 <LI><a href="#[1b5]">Utest::testBody()</a> from utest.o(.text._ZN5Utest8testBodyEv) referenced from unittest.o(.rodata._ZTV39TEST_GROUP_CppUTestGroupmyFirstUnitTest)
 <LI><a href="#[1b5]">Utest::testBody()</a> from utest.o(.text._ZN5Utest8testBodyEv) referenced from utest.o(.rodata._ZTV5Utest)
 <LI><a href="#[1b6]">Utest::~Utest__deallocating()</a> from utest.o(.text._ZN5UtestD0Ev) referenced from utest.o(.rodata._ZTV5Utest)
 <LI><a href="#[142]">Utest::~Utest__sub_object()</a> from utest.o(.text._ZN5UtestD2Ev) referenced from utest.o(.rodata._ZTV16ExecFunctionTest)
 <LI><a href="#[142]">Utest::~Utest__sub_object()</a> from utest.o(.text._ZN5UtestD2Ev) referenced from unittest.o(.rodata._ZTV30TEST_myFirstUnitTest_API1_Test)
 <LI><a href="#[142]">Utest::~Utest__sub_object()</a> from utest.o(.text._ZN5UtestD2Ev) referenced from unittest.o(.rodata._ZTV30TEST_myFirstUnitTest_API2_Test)
 <LI><a href="#[142]">Utest::~Utest__sub_object()</a> from utest.o(.text._ZN5UtestD2Ev) referenced from unittest.o(.rodata._ZTV39TEST_GROUP_CppUTestGroupmyFirstUnitTest)
 <LI><a href="#[142]">Utest::~Utest__sub_object()</a> from utest.o(.text._ZN5UtestD2Ev) referenced from utest.o(.rodata._ZTV5Utest)
 <LI><a href="#[1d4]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::saveVFPAsX()</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE10saveVFPAsXEv) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[1cb]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFloatReg(int)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE11getFloatRegEi) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[1cc]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setFloatReg(int, unsigned long long)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE11setFloatRegEiy) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[1d0]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::isSignalFrame()</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE13isSignalFrameEv) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[1ca]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::validFloatReg(int)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE13validFloatRegEi) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[1d1]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFunctionName(char*, unsigned, unsigned*)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE15getFunctionNameEPcjPj) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[1d3]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getRegisterName(int)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE15getRegisterNameEi) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[1d2]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE24setInfoBasedOnIPRegisterEb) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[1cd]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::step()</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE4stepEv) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[1c8]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getReg(int)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE6getRegEi) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[1cf]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::jumpto()</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE6jumptoEv) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[1c9]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setReg(int, unsigned)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE6setRegEij) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[1ce]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfo(unw_proc_info_t*)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE7getInfoEP15unw_proc_info_t) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[1c7]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::validReg(int)</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE8validRegEi) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[1c6]">libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::~UnwindCursor__deallocating()</a> from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEED0Ev) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[1c5]">libunwind::AbstractUnwindCursor::~AbstractUnwindCursor__sub_object()</a> from libunwind.cpp.o(.text._ZN9libunwind20AbstractUnwindCursorD2Ev) referenced from libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
 <LI><a href="#[100]">UtestShell::getMacroName() const</a> from utest.o(.text._ZNK10UtestShell12getMacroNameEv) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[100]">UtestShell::getMacroName() const</a> from utest.o(.text._ZNK10UtestShell12getMacroNameEv) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[100]">UtestShell::getMacroName() const</a> from utest.o(.text._ZNK10UtestShell12getMacroNameEv) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[100]">UtestShell::getMacroName() const</a> from utest.o(.text._ZNK10UtestShell12getMacroNameEv) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[df]">UtestShell::getFormattedName() const</a> from utest.o(.text._ZNK10UtestShell16getFormattedNameEv) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[df]">UtestShell::getFormattedName() const</a> from utest.o(.text._ZNK10UtestShell16getFormattedNameEv) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[df]">UtestShell::getFormattedName() const</a> from utest.o(.text._ZNK10UtestShell16getFormattedNameEv) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[df]">UtestShell::getFormattedName() const</a> from utest.o(.text._ZNK10UtestShell16getFormattedNameEv) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[df]">UtestShell::getFormattedName() const</a> from utest.o(.text._ZNK10UtestShell16getFormattedNameEv) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[f7]">UtestShell::isRunInSeperateProcess() const</a> from utest.o(.text._ZNK10UtestShell22isRunInSeperateProcessEv) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[f7]">UtestShell::isRunInSeperateProcess() const</a> from utest.o(.text._ZNK10UtestShell22isRunInSeperateProcessEv) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[f7]">UtestShell::isRunInSeperateProcess() const</a> from utest.o(.text._ZNK10UtestShell22isRunInSeperateProcessEv) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[f7]">UtestShell::isRunInSeperateProcess() const</a> from utest.o(.text._ZNK10UtestShell22isRunInSeperateProcessEv) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[f7]">UtestShell::isRunInSeperateProcess() const</a> from utest.o(.text._ZNK10UtestShell22isRunInSeperateProcessEv) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[dd]">UtestShell::getNext() const</a> from utest.o(.text._ZNK10UtestShell7getNextEv) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[dd]">UtestShell::getNext() const</a> from utest.o(.text._ZNK10UtestShell7getNextEv) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[dd]">UtestShell::getNext() const</a> from utest.o(.text._ZNK10UtestShell7getNextEv) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[dd]">UtestShell::getNext() const</a> from utest.o(.text._ZNK10UtestShell7getNextEv) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[dd]">UtestShell::getNext() const</a> from utest.o(.text._ZNK10UtestShell7getNextEv) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[e0]">UtestShell::willRun() const</a> from utest.o(.text._ZNK10UtestShell7willRunEv) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[e0]">UtestShell::willRun() const</a> from utest.o(.text._ZNK10UtestShell7willRunEv) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[e0]">UtestShell::willRun() const</a> from utest.o(.text._ZNK10UtestShell7willRunEv) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[e0]">UtestShell::willRun() const</a> from utest.o(.text._ZNK10UtestShell7willRunEv) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[e1]">UtestShell::hasFailed() const</a> from utest.o(.text._ZNK10UtestShell9hasFailedEv) referenced from utest.o(.rodata._ZTV10UtestShell)
 <LI><a href="#[e1]">UtestShell::hasFailed() const</a> from utest.o(.text._ZNK10UtestShell9hasFailedEv) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[e1]">UtestShell::hasFailed() const</a> from utest.o(.text._ZNK10UtestShell9hasFailedEv) referenced from utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[e1]">UtestShell::hasFailed() const</a> from utest.o(.text._ZNK10UtestShell9hasFailedEv) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
 <LI><a href="#[e1]">UtestShell::hasFailed() const</a> from utest.o(.text._ZNK10UtestShell9hasFailedEv) referenced from unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
 <LI><a href="#[1b9]">__cxxabiv1::__shim_type_info::noop1() const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop1Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[1b9]">__cxxabiv1::__shim_type_info::noop1() const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop1Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[1b9]">__cxxabiv1::__shim_type_info::noop1() const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop1Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
 <LI><a href="#[1ba]">__cxxabiv1::__shim_type_info::noop2() const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop2Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[1ba]">__cxxabiv1::__shim_type_info::noop2() const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop2Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[1ba]">__cxxabiv1::__shim_type_info::noop2() const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop2Ev) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
 <LI><a href="#[1bc]">__cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[1bd]">__cxxabiv1::__class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[1be]">__cxxabiv1::__class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[1bb]">__cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[1bb]">__cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[1c0]">__cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[1c1]">__cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[1c2]">__cxxabiv1::__si_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[1c4]">__cxxabiv1::__fundamental_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</a> from private_typeinfo.cpp.o(.text._ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv) referenced from private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
 <LI><a href="#[107]">TestFailure::getMessage() const</a> from testfailure.o(.text._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.rodata._ZTV11FailFailure)
 <LI><a href="#[107]">TestFailure::getMessage() const</a> from testfailure.o(.text._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.rodata._ZTV11TestFailure)
 <LI><a href="#[107]">TestFailure::getMessage() const</a> from testfailure.o(.text._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.rodata._ZTV12CheckFailure)
 <LI><a href="#[107]">TestFailure::getMessage() const</a> from testfailure.o(.text._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.rodata._ZTV13EqualsFailure)
 <LI><a href="#[107]">TestFailure::getMessage() const</a> from testfailure.o(.text._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.rodata._ZTV15ContainsFailure)
 <LI><a href="#[107]">TestFailure::getMessage() const</a> from testfailure.o(.text._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.rodata._ZTV16BitsEqualFailure)
 <LI><a href="#[107]">TestFailure::getMessage() const</a> from testfailure.o(.text._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.rodata._ZTV17CheckEqualFailure)
 <LI><a href="#[107]">TestFailure::getMessage() const</a> from testfailure.o(.text._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.rodata._ZTV17LongsEqualFailure)
 <LI><a href="#[107]">TestFailure::getMessage() const</a> from testfailure.o(.text._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.rodata._ZTV18BinaryEqualFailure)
 <LI><a href="#[107]">TestFailure::getMessage() const</a> from testfailure.o(.text._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.rodata._ZTV18StringEqualFailure)
 <LI><a href="#[107]">TestFailure::getMessage() const</a> from testfailure.o(.text._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.rodata._ZTV19DoublesEqualFailure)
 <LI><a href="#[107]">TestFailure::getMessage() const</a> from testfailure.o(.text._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.rodata._ZTV21LongLongsEqualFailure)
 <LI><a href="#[107]">TestFailure::getMessage() const</a> from testfailure.o(.text._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.rodata._ZTV23SignedBytesEqualFailure)
 <LI><a href="#[107]">TestFailure::getMessage() const</a> from testfailure.o(.text._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.rodata._ZTV24StringEqualNoCaseFailure)
 <LI><a href="#[107]">TestFailure::getMessage() const</a> from testfailure.o(.text._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.rodata._ZTV25FeatureUnsupportedFailure)
 <LI><a href="#[107]">TestFailure::getMessage() const</a> from testfailure.o(.text._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.rodata._ZTV25UnsignedLongsEqualFailure)
 <LI><a href="#[107]">TestFailure::getMessage() const</a> from testfailure.o(.text._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.rodata._ZTV29UnsignedLongLongsEqualFailure)
 <LI><a href="#[103]">TestFailure::getFileName() const</a> from testfailure.o(.text._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.rodata._ZTV11FailFailure)
 <LI><a href="#[103]">TestFailure::getFileName() const</a> from testfailure.o(.text._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.rodata._ZTV11TestFailure)
 <LI><a href="#[103]">TestFailure::getFileName() const</a> from testfailure.o(.text._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.rodata._ZTV12CheckFailure)
 <LI><a href="#[103]">TestFailure::getFileName() const</a> from testfailure.o(.text._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.rodata._ZTV13EqualsFailure)
 <LI><a href="#[103]">TestFailure::getFileName() const</a> from testfailure.o(.text._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.rodata._ZTV15ContainsFailure)
 <LI><a href="#[103]">TestFailure::getFileName() const</a> from testfailure.o(.text._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.rodata._ZTV16BitsEqualFailure)
 <LI><a href="#[103]">TestFailure::getFileName() const</a> from testfailure.o(.text._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.rodata._ZTV17CheckEqualFailure)
 <LI><a href="#[103]">TestFailure::getFileName() const</a> from testfailure.o(.text._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.rodata._ZTV17LongsEqualFailure)
 <LI><a href="#[103]">TestFailure::getFileName() const</a> from testfailure.o(.text._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.rodata._ZTV18BinaryEqualFailure)
 <LI><a href="#[103]">TestFailure::getFileName() const</a> from testfailure.o(.text._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.rodata._ZTV18StringEqualFailure)
 <LI><a href="#[103]">TestFailure::getFileName() const</a> from testfailure.o(.text._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.rodata._ZTV19DoublesEqualFailure)
 <LI><a href="#[103]">TestFailure::getFileName() const</a> from testfailure.o(.text._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.rodata._ZTV21LongLongsEqualFailure)
 <LI><a href="#[103]">TestFailure::getFileName() const</a> from testfailure.o(.text._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.rodata._ZTV23SignedBytesEqualFailure)
 <LI><a href="#[103]">TestFailure::getFileName() const</a> from testfailure.o(.text._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.rodata._ZTV24StringEqualNoCaseFailure)
 <LI><a href="#[103]">TestFailure::getFileName() const</a> from testfailure.o(.text._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.rodata._ZTV25FeatureUnsupportedFailure)
 <LI><a href="#[103]">TestFailure::getFileName() const</a> from testfailure.o(.text._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.rodata._ZTV25UnsignedLongsEqualFailure)
 <LI><a href="#[103]">TestFailure::getFileName() const</a> from testfailure.o(.text._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.rodata._ZTV29UnsignedLongLongsEqualFailure)
 <LI><a href="#[104]">TestFailure::getTestName() const</a> from testfailure.o(.text._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.rodata._ZTV11FailFailure)
 <LI><a href="#[104]">TestFailure::getTestName() const</a> from testfailure.o(.text._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.rodata._ZTV11TestFailure)
 <LI><a href="#[104]">TestFailure::getTestName() const</a> from testfailure.o(.text._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.rodata._ZTV12CheckFailure)
 <LI><a href="#[104]">TestFailure::getTestName() const</a> from testfailure.o(.text._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.rodata._ZTV13EqualsFailure)
 <LI><a href="#[104]">TestFailure::getTestName() const</a> from testfailure.o(.text._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.rodata._ZTV15ContainsFailure)
 <LI><a href="#[104]">TestFailure::getTestName() const</a> from testfailure.o(.text._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.rodata._ZTV16BitsEqualFailure)
 <LI><a href="#[104]">TestFailure::getTestName() const</a> from testfailure.o(.text._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.rodata._ZTV17CheckEqualFailure)
 <LI><a href="#[104]">TestFailure::getTestName() const</a> from testfailure.o(.text._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.rodata._ZTV17LongsEqualFailure)
 <LI><a href="#[104]">TestFailure::getTestName() const</a> from testfailure.o(.text._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.rodata._ZTV18BinaryEqualFailure)
 <LI><a href="#[104]">TestFailure::getTestName() const</a> from testfailure.o(.text._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.rodata._ZTV18StringEqualFailure)
 <LI><a href="#[104]">TestFailure::getTestName() const</a> from testfailure.o(.text._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.rodata._ZTV19DoublesEqualFailure)
 <LI><a href="#[104]">TestFailure::getTestName() const</a> from testfailure.o(.text._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.rodata._ZTV21LongLongsEqualFailure)
 <LI><a href="#[104]">TestFailure::getTestName() const</a> from testfailure.o(.text._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.rodata._ZTV23SignedBytesEqualFailure)
 <LI><a href="#[104]">TestFailure::getTestName() const</a> from testfailure.o(.text._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.rodata._ZTV24StringEqualNoCaseFailure)
 <LI><a href="#[104]">TestFailure::getTestName() const</a> from testfailure.o(.text._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.rodata._ZTV25FeatureUnsupportedFailure)
 <LI><a href="#[104]">TestFailure::getTestName() const</a> from testfailure.o(.text._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.rodata._ZTV25UnsignedLongsEqualFailure)
 <LI><a href="#[104]">TestFailure::getTestName() const</a> from testfailure.o(.text._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.rodata._ZTV29UnsignedLongLongsEqualFailure)
 <LI><a href="#[108]">TestFailure::getTestFileName() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.rodata._ZTV11FailFailure)
 <LI><a href="#[108]">TestFailure::getTestFileName() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.rodata._ZTV11TestFailure)
 <LI><a href="#[108]">TestFailure::getTestFileName() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.rodata._ZTV12CheckFailure)
 <LI><a href="#[108]">TestFailure::getTestFileName() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.rodata._ZTV13EqualsFailure)
 <LI><a href="#[108]">TestFailure::getTestFileName() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.rodata._ZTV15ContainsFailure)
 <LI><a href="#[108]">TestFailure::getTestFileName() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.rodata._ZTV16BitsEqualFailure)
 <LI><a href="#[108]">TestFailure::getTestFileName() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.rodata._ZTV17CheckEqualFailure)
 <LI><a href="#[108]">TestFailure::getTestFileName() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.rodata._ZTV17LongsEqualFailure)
 <LI><a href="#[108]">TestFailure::getTestFileName() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.rodata._ZTV18BinaryEqualFailure)
 <LI><a href="#[108]">TestFailure::getTestFileName() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.rodata._ZTV18StringEqualFailure)
 <LI><a href="#[108]">TestFailure::getTestFileName() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.rodata._ZTV19DoublesEqualFailure)
 <LI><a href="#[108]">TestFailure::getTestFileName() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.rodata._ZTV21LongLongsEqualFailure)
 <LI><a href="#[108]">TestFailure::getTestFileName() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.rodata._ZTV23SignedBytesEqualFailure)
 <LI><a href="#[108]">TestFailure::getTestFileName() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.rodata._ZTV24StringEqualNoCaseFailure)
 <LI><a href="#[108]">TestFailure::getTestFileName() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.rodata._ZTV25FeatureUnsupportedFailure)
 <LI><a href="#[108]">TestFailure::getTestFileName() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.rodata._ZTV25UnsignedLongsEqualFailure)
 <LI><a href="#[108]">TestFailure::getTestFileName() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.rodata._ZTV29UnsignedLongLongsEqualFailure)
 <LI><a href="#[105]">TestFailure::getTestNameOnly() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.rodata._ZTV11FailFailure)
 <LI><a href="#[105]">TestFailure::getTestNameOnly() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.rodata._ZTV11TestFailure)
 <LI><a href="#[105]">TestFailure::getTestNameOnly() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.rodata._ZTV12CheckFailure)
 <LI><a href="#[105]">TestFailure::getTestNameOnly() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.rodata._ZTV13EqualsFailure)
 <LI><a href="#[105]">TestFailure::getTestNameOnly() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.rodata._ZTV15ContainsFailure)
 <LI><a href="#[105]">TestFailure::getTestNameOnly() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.rodata._ZTV16BitsEqualFailure)
 <LI><a href="#[105]">TestFailure::getTestNameOnly() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.rodata._ZTV17CheckEqualFailure)
 <LI><a href="#[105]">TestFailure::getTestNameOnly() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.rodata._ZTV17LongsEqualFailure)
 <LI><a href="#[105]">TestFailure::getTestNameOnly() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.rodata._ZTV18BinaryEqualFailure)
 <LI><a href="#[105]">TestFailure::getTestNameOnly() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.rodata._ZTV18StringEqualFailure)
 <LI><a href="#[105]">TestFailure::getTestNameOnly() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.rodata._ZTV19DoublesEqualFailure)
 <LI><a href="#[105]">TestFailure::getTestNameOnly() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.rodata._ZTV21LongLongsEqualFailure)
 <LI><a href="#[105]">TestFailure::getTestNameOnly() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.rodata._ZTV23SignedBytesEqualFailure)
 <LI><a href="#[105]">TestFailure::getTestNameOnly() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.rodata._ZTV24StringEqualNoCaseFailure)
 <LI><a href="#[105]">TestFailure::getTestNameOnly() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.rodata._ZTV25FeatureUnsupportedFailure)
 <LI><a href="#[105]">TestFailure::getTestNameOnly() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.rodata._ZTV25UnsignedLongsEqualFailure)
 <LI><a href="#[105]">TestFailure::getTestNameOnly() const</a> from testfailure.o(.text._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.rodata._ZTV29UnsignedLongLongsEqualFailure)
 <LI><a href="#[109]">TestFailure::getTestLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.rodata._ZTV11FailFailure)
 <LI><a href="#[109]">TestFailure::getTestLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.rodata._ZTV11TestFailure)
 <LI><a href="#[109]">TestFailure::getTestLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.rodata._ZTV12CheckFailure)
 <LI><a href="#[109]">TestFailure::getTestLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.rodata._ZTV13EqualsFailure)
 <LI><a href="#[109]">TestFailure::getTestLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.rodata._ZTV15ContainsFailure)
 <LI><a href="#[109]">TestFailure::getTestLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.rodata._ZTV16BitsEqualFailure)
 <LI><a href="#[109]">TestFailure::getTestLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.rodata._ZTV17CheckEqualFailure)
 <LI><a href="#[109]">TestFailure::getTestLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.rodata._ZTV17LongsEqualFailure)
 <LI><a href="#[109]">TestFailure::getTestLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.rodata._ZTV18BinaryEqualFailure)
 <LI><a href="#[109]">TestFailure::getTestLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.rodata._ZTV18StringEqualFailure)
 <LI><a href="#[109]">TestFailure::getTestLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.rodata._ZTV19DoublesEqualFailure)
 <LI><a href="#[109]">TestFailure::getTestLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.rodata._ZTV21LongLongsEqualFailure)
 <LI><a href="#[109]">TestFailure::getTestLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.rodata._ZTV23SignedBytesEqualFailure)
 <LI><a href="#[109]">TestFailure::getTestLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.rodata._ZTV24StringEqualNoCaseFailure)
 <LI><a href="#[109]">TestFailure::getTestLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.rodata._ZTV25FeatureUnsupportedFailure)
 <LI><a href="#[109]">TestFailure::getTestLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.rodata._ZTV25UnsignedLongsEqualFailure)
 <LI><a href="#[109]">TestFailure::getTestLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.rodata._ZTV29UnsignedLongLongsEqualFailure)
 <LI><a href="#[106]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.rodata._ZTV11FailFailure)
 <LI><a href="#[106]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.rodata._ZTV11TestFailure)
 <LI><a href="#[106]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.rodata._ZTV12CheckFailure)
 <LI><a href="#[106]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.rodata._ZTV13EqualsFailure)
 <LI><a href="#[106]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.rodata._ZTV15ContainsFailure)
 <LI><a href="#[106]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.rodata._ZTV16BitsEqualFailure)
 <LI><a href="#[106]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.rodata._ZTV17CheckEqualFailure)
 <LI><a href="#[106]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.rodata._ZTV17LongsEqualFailure)
 <LI><a href="#[106]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.rodata._ZTV18BinaryEqualFailure)
 <LI><a href="#[106]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.rodata._ZTV18StringEqualFailure)
 <LI><a href="#[106]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.rodata._ZTV19DoublesEqualFailure)
 <LI><a href="#[106]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.rodata._ZTV21LongLongsEqualFailure)
 <LI><a href="#[106]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.rodata._ZTV23SignedBytesEqualFailure)
 <LI><a href="#[106]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.rodata._ZTV24StringEqualNoCaseFailure)
 <LI><a href="#[106]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.rodata._ZTV25FeatureUnsupportedFailure)
 <LI><a href="#[106]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.rodata._ZTV25UnsignedLongsEqualFailure)
 <LI><a href="#[106]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(.text._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.rodata._ZTV29UnsignedLongLongsEqualFailure)
 <LI><a href="#[79]">SimpleString::asCharString() const</a> from simplestring.o(.text._ZNK12SimpleString12asCharStringEv) referenced from junittestoutput.o(.text._ZN15JUnitTestOutput14writeTestCasesEv)
 <LI><a href="#[152]">IgnoredUtestShell::getMacroName() const</a> from utest.o(.text._ZNK17IgnoredUtestShell12getMacroNameEv) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[14f]">IgnoredUtestShell::willRun() const</a> from utest.o(.text._ZNK17IgnoredUtestShell7willRunEv) referenced from utest.o(.rodata._ZTV17IgnoredUtestShell)
 <LI><a href="#[17e]">NormalTestTerminator::exitCurrentTest() const</a> from utest.o(.text._ZNK20NormalTestTerminator15exitCurrentTestEv) referenced from utest.o(.rodata._ZTV20NormalTestTerminator)
 <LI><a href="#[1ae]">TestTerminatorWithoutExceptions::exitCurrentTest() const</a> from utest.o(.text._ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv) referenced from utest.o(.rodata._ZTV31TestTerminatorWithoutExceptions)
 <LI><a href="#[1d7]">std::bad_exception::what() const</a> from stdlib_exception.cpp.o(.text._ZNKSt13bad_exception4whatEv) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt13bad_exception)
 <LI><a href="#[1d9]">std::bad_array_new_length::what() const</a> from stdlib_exception.cpp.o(.text._ZNKSt20bad_array_new_length4whatEv) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt20bad_array_new_length)
 <LI><a href="#[1db]">std::bad_alloc::what() const</a> from stdlib_exception.cpp.o(.text._ZNKSt9bad_alloc4whatEv) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt9bad_alloc)
 <LI><a href="#[1d6]">std::bad_exception::~bad_exception__deallocating()</a> from stdlib_exception.cpp.o(.text._ZNSt13bad_exceptionD0Ev) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt13bad_exception)
 <LI><a href="#[a4]">std::bad_exception::~bad_exception()</a> from stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev) referenced 2 times from cxa_personality.cpp.o(.text.__cxa_call_unexpected)
 <LI><a href="#[1d8]">std::bad_array_new_length::~bad_array_new_length__deallocating()</a> from stdlib_exception.cpp.o(.text._ZNSt20bad_array_new_lengthD0Ev) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt20bad_array_new_length)
 <LI><a href="#[1da]">std::bad_alloc::~bad_alloc__deallocating()</a> from stdlib_exception.cpp.o(.text._ZNSt9bad_allocD0Ev) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt9bad_alloc)
 <LI><a href="#[73]">std::bad_alloc::~bad_alloc()</a> from stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev) referenced from memoryleakwarningplugin.o(.text._ZL32threadsafe_mem_leak_operator_newj)
 <LI><a href="#[73]">std::bad_alloc::~bad_alloc()</a> from stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev) referenced from memoryleakwarningplugin.o(.text._ZL33mem_leak_operator_new_array_debugjPKci)
 <LI><a href="#[73]">std::bad_alloc::~bad_alloc()</a> from stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev) referenced from memoryleakwarningplugin.o(.text._ZL38threadsafe_mem_leak_operator_new_arrayj)
 <LI><a href="#[73]">std::bad_alloc::~bad_alloc()</a> from stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev) referenced from memoryleakwarningplugin.o(.text._ZL38threadsafe_mem_leak_operator_new_debugjPKci)
 <LI><a href="#[73]">std::bad_alloc::~bad_alloc()</a> from stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev) referenced from memoryleakwarningplugin.o(.text._ZL44threadsafe_mem_leak_operator_new_array_debugjPKci)
 <LI><a href="#[1d5]">std::exception::~exception__sub_object()</a> from stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt13bad_exception)
 <LI><a href="#[1d5]">std::exception::~exception__sub_object()</a> from stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt20bad_array_new_length)
 <LI><a href="#[1d5]">std::exception::~exception__sub_object()</a> from stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev) referenced from stdlib_exception.cpp.o(.rodata._ZTVSt9bad_alloc)
 <LI><a href="#[a3]">std::terminate()</a> from cxa_handlers.cpp.o(.text._ZSt9terminatev) referenced from cxa_default_handlers.cpp.o(.data.__cxa_unexpected_handler)
 <LI><a href="#[a3]">std::terminate()</a> from cxa_handlers.cpp.o(.text._ZSt9terminatev) referenced 2 times from cxa_default_handlers.cpp.o(.text._ZSt14set_unexpectedPFvvE)
 <LI><a href="#[9f]">__aeabi_unwind_cpp_pr0</a> from Unwind-EHABI.cpp.o(.text.__aeabi_unwind_cpp_pr0) referenced 2 times from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE23getInfoFromEHABISectionEjRKNS_18UnwindInfoSectionsE)
 <LI><a href="#[a0]">__aeabi_unwind_cpp_pr1</a> from Unwind-EHABI.cpp.o(.text.__aeabi_unwind_cpp_pr1) referenced 2 times from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE23getInfoFromEHABISectionEjRKNS_18UnwindInfoSectionsE)
 <LI><a href="#[a1]">__aeabi_unwind_cpp_pr2</a> from Unwind-EHABI.cpp.o(.text.__aeabi_unwind_cpp_pr2) referenced 2 times from libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE23getInfoFromEHABISectionEjRKNS_18UnwindInfoSectionsE)
 <LI><a href="#[70]">__cxa_atexit</a> from cxa_atexit.o(.text) referenced from unittest.o(.text._GLOBAL__sub_I_UnitTest.cpp)
 <LI><a href="#[b4]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced 2 times from testoutput.o(.rodata._ZTV10TestOutput)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from simplestring.o(.ARM.extab.text._Z10StringFromPFvvE)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from simplestring.o(.ARM.extab.text._Z10StringFromPKv)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testplugin.o(.ARM.extab.text._Z13CppUTestStorePPv)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from simplestring.o(.ARM.extab.text._Z13HexStringFroma)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from simplestring.o(.ARM.extab.text._Z16StringFromBinaryPKhj)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from simplestring.o(.ARM.extab.text._Z16StringFromFormatPKcz)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from simplestring.o(.ARM.extab.text._Z17VStringFromFormatPKcSt9__va_list)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from simplestring.o(.ARM.extab.text._Z20StringFromMaskedBitsmmj)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from simplestring.o(.ARM.extab.text._Z24StringFromBinaryWithSizePKhj)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from memoryleakwarningplugin.o(.ARM.extab.text._Z26crash_on_allocation_numberj)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from memoryleakwarningplugin.o(.ARM.extab.text._ZL22normal_operator_deletePv)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from memoryleakwarningplugin.o(.ARM.extab.text._ZL24mem_leak_operator_deletePv)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from memoryleakwarningplugin.o(.ARM.extab.text._ZL24threadsafe_mem_leak_freePvPKci)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from memoryleakwarningplugin.o(.ARM.extab.text._ZL26threadsafe_mem_leak_mallocjPKci)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from memoryleakwarningplugin.o(.ARM.extab.text._ZL27normal_operator_new_nothrowj)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from memoryleakwarningplugin.o(.ARM.extab.text._ZL27threadsafe_mem_leak_reallocPvjPKci)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from memoryleakwarningplugin.o(.ARM.extab.text._ZL28normal_operator_delete_arrayPv)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from memoryleakwarningplugin.o(.ARM.extab.text._ZL29mem_leak_operator_new_nothrowj)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from utestplatform.o(.ARM.extab.text._ZL30DummyRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from memoryleakwarningplugin.o(.ARM.extab.text._ZL30mem_leak_operator_delete_arrayPv)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from memoryleakwarningplugin.o(.ARM.extab.text._ZL32threadsafe_mem_leak_operator_newj)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from memoryleakwarningplugin.o(.ARM.extab.text._ZL33normal_operator_new_array_nothrowj)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from memoryleakwarningplugin.o(.ARM.extab.text._ZL35mem_leak_operator_new_array_nothrowj)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from memoryleakwarningplugin.o(.ARM.extab.text._ZL35threadsafe_mem_leak_operator_deletePv)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from memoryleakwarningplugin.o(.ARM.extab.text._ZL38threadsafe_mem_leak_operator_new_arrayj)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from memoryleakwarningplugin.o(.ARM.extab.text._ZL38threadsafe_mem_leak_operator_new_debugjPKci)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from memoryleakwarningplugin.o(.ARM.extab.text._ZL40threadsafe_mem_leak_operator_new_nothrowj)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from memoryleakwarningplugin.o(.ARM.extab.text._ZL41threadsafe_mem_leak_operator_delete_arrayPv)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from memoryleakwarningplugin.o(.ARM.extab.text._ZL44threadsafe_mem_leak_operator_new_array_debugjPKci)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from memoryleakwarningplugin.o(.ARM.extab.text._ZL46threadsafe_mem_leak_operator_new_array_nothrowj)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testfilter.o(.ARM.extab.text._ZN10TestFilterC2EPKc)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testfilter.o(.ARM.extab.text._ZN10TestFilterC2ERK12SimpleString)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testoutput.o(.ARM.extab.text._ZN10TestOutput11printDoubleEd)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testoutput.o(.ARM.extab.text._ZN10TestOutput12printFailureERK11TestFailure)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testoutput.o(.ARM.extab.text._ZN10TestOutput23printCurrentTestStartedERK10UtestShell)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testoutput.o(.ARM.extab.text._ZN10TestOutput26printFileAndLineForFailureERK11TestFailure)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testoutput.o(.ARM.extab.text._ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testoutput.o(.ARM.extab.text._ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringi)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testoutput.o(.ARM.extab.text._ZN10TestOutput5printEl)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from utest.o(.ARM.extab.text._ZN10UtestShell10assertTrueEbPKcS1_S1_S1_iRK14TestTerminator)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from utest.o(.ARM.extab.text._ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_iRK14TestTerminator)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from utest.o(.ARM.extab.text._ZN10UtestShell15assertBitsEqualEmmmjPKcS1_iRK14TestTerminator)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from utest.o(.ARM.extab.text._ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_iRK14TestTerminator)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from utest.o(.ARM.extab.text._ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_iRK14TestTerminator)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from utest.o(.ARM.extab.text._ZN10UtestShell16assertLongsEqualEllPKcS1_iRK14TestTerminator)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from utest.o(.ARM.extab.text._ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_iRK14TestTerminator)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from utest.o(.ARM.extab.text._ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_i)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from utest.o(.ARM.extab.text._ZN10UtestShell18assertDoublesEqualEdddPKcS1_iRK14TestTerminator)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from utest.o(.ARM.extab.text._ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_iRK14TestTerminator)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from utest.o(.ARM.extab.text._ZN10UtestShell20assertLongLongsEqualExxPKcS1_iRK14TestTerminator)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from utest.o(.ARM.extab.text._ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_i)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from utest.o(.ARM.extab.text._ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_iRK14TestTerminator)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from utest.o(.ARM.extab.text._ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_i)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from utest.o(.ARM.extab.text._ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_iRK14TestTerminator)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from utest.o(.ARM.extab.text._ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_iRK14TestTerminator)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from utest.o(.ARM.extab.text._ZN10UtestShell28assertUnsignedLongLongsEqualEyyPKcS1_iRK14TestTerminator)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from utest.o(.ARM.extab.text._ZN10UtestShell4failEPKcS1_iRK14TestTerminator)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from utest.o(.ARM.extab.text._ZN10UtestShell5printEPKcS1_i)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from utest.o(.ARM.extab.text._ZN10UtestShell8failWithERK11TestFailure)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testfailure.o(.ARM.extab.text._ZN11FailFailureC2EP10UtestShellPKciRK12SimpleString)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from simplemutex.o(.ARM.extab.text._ZN11SimpleMutexD2Ev)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testfailure.o(.ARM.extab.text._ZN11TestFailure14createUserTextERK12SimpleString)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testfailure.o(.ARM.extab.text._ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjNS_16DifferenceFormatE)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testfailure.o(.ARM.extab.text._ZN11TestFailureC2EP10UtestShellPKci)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testfailure.o(.ARM.extab.text._ZN11TestFailureC2EP10UtestShellPKciRK12SimpleString)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testfailure.o(.ARM.extab.text._ZN11TestFailureC2EP10UtestShellRK12SimpleString)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testfailure.o(.ARM.extab.text._ZN11TestFailureC2ERKS_)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testfailure.o(.ARM.extab.text._ZN12CheckFailureC2EP10UtestShellPKciRK12SimpleStringS6_S6_)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from simplestring.o(.ARM.extab.text._ZN12SimpleString22padStringsToSameLengthERS_S0_c)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from simplestring.o(.ARM.extab.text._ZN12SimpleStringD2Ev)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testregistry.o(.ARM.extab.text._ZN12TestRegistry10endOfGroupEP10UtestShell)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testregistry.o(.ARM.extab.text._ZN12TestRegistry16findTestWithNameERK12SimpleString)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testregistry.o(.ARM.extab.text._ZN12TestRegistry17findTestWithGroupERK12SimpleString)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testregistry.o(.ARM.extab.text._ZN12TestRegistry18getCurrentRegistryEv)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testregistry.o(.ARM.extab.text._ZN12TestRegistry18listTestGroupNamesER10TestResult)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testregistry.o(.ARM.extab.text._ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testfailure.o(.ARM.extab.text._ZN13EqualsFailureC2EP10UtestShellPKciRK12SimpleStringS6_S6_)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testfailure.o(.ARM.extab.text._ZN13EqualsFailureC2EP10UtestShellPKciS3_S3_RK12SimpleString)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testplugin.o(.ARM.extab.text._ZN14NullTestPlugin8instanceEv)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testfailure.o(.ARM.extab.text._ZN15ContainsFailureC2EP10UtestShellPKciRK12SimpleStringS6_S6_)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from junittestoutput.o(.ARM.extab.text._ZN15JUnitTestOutput12printFailureERK11TestFailure)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from junittestoutput.o(.ARM.extab.text._ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from junittestoutput.o(.ARM.extab.text._ZN15JUnitTestOutput14createFileNameERK12SimpleString)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from junittestoutput.o(.ARM.extab.text._ZN15JUnitTestOutput14writeTestCasesEv)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from junittestoutput.o(.ARM.extab.text._ZN15JUnitTestOutput14writeXmlHeaderEv)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from junittestoutput.o(.ARM.extab.text._ZN15JUnitTestOutput15writeFileEndingEv)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from junittestoutput.o(.ARM.extab.text._ZN15JUnitTestOutput15writePropertiesEv)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from junittestoutput.o(.ARM.extab.text._ZN15JUnitTestOutput20resetTestGroupResultEv)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from junittestoutput.o(.ARM.extab.text._ZN15JUnitTestOutput20writeTestGroupToFileEv)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from junittestoutput.o(.ARM.extab.text._ZN15JUnitTestOutput21writeTestSuiteSummaryEv)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from junittestoutput.o(.ARM.extab.text._ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from junittestoutput.o(.ARM.extab.text._ZN15JUnitTestOutputC2Ev)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from junittestoutput.o(.ARM.extab.text._ZN15JUnitTestOutputD2Ev)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from simplemutex.o(.ARM.extab.text._ZN15ScopedMutexLockD2Ev)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testfailure.o(.ARM.extab.text._ZN16BitsEqualFailureC2EP10UtestShellPKcimmmjRK12SimpleString)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testfailure.o(.ARM.extab.text._ZN17CheckEqualFailureC2EP10UtestShellPKciRK12SimpleStringS6_S6_)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testfailure.o(.ARM.extab.text._ZN17LongsEqualFailureC2EP10UtestShellPKcillRK12SimpleString)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testfailure.o(.ARM.extab.text._ZN18BinaryEqualFailureC2EP10UtestShellPKciPKhS5_jRK12SimpleString)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from memoryleakdetector.o(.ARM.extab.text._ZN18MemoryLeakDetectorC2EP17MemoryLeakFailure)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testfailure.o(.ARM.extab.text._ZN18StringEqualFailureC2EP10UtestShellPKciS3_S3_RK12SimpleString)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from teamcitytestoutput.o(.ARM.extab.text._ZN18TeamCityTestOutput12printFailureERK11TestFailure)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from teamcitytestoutput.o(.ARM.extab.text._ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from teamcitytestoutput.o(.ARM.extab.text._ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from teamcitytestoutput.o(.ARM.extab.text._ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from teamcitytestoutput.o(.ARM.extab.text._ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from teamcitytestoutput.o(.ARM.extab.text._ZN18TeamCityTestOutputC2Ev)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testfailure.o(.ARM.extab.text._ZN19DoublesEqualFailureC2EP10UtestShellPKcidddRK12SimpleString)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from junittestoutput.o(.ARM.extab.text._ZN19JUnitTestOutputImplC2Ev)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testmemoryallocator.o(.ARM.extab.text._ZN19TestMemoryAllocator12alloc_memoryEjPKci)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from commandlinearguments.o(.ARM.extab.text._ZN20CommandLineArguments13AddNameFilterEiPPKcRi)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from commandlinearguments.o(.ARM.extab.text._ZN20CommandLineArguments13SetOutputTypeEiPPKcRi)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from commandlinearguments.o(.ARM.extab.text._ZN20CommandLineArguments14AddGroupFilterEiPPKcRi)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from commandlinearguments.o(.ARM.extab.text._ZN20CommandLineArguments14SetPackageNameEiPPKcRi)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from commandlinearguments.o(.ARM.extab.text._ZN20CommandLineArguments14SetRepeatCountEiPPKcRi)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from commandlinearguments.o(.ARM.extab.text._ZN20CommandLineArguments17getParameterFieldEiPPKcRiRK12SimpleString)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from commandlinearguments.o(.ARM.extab.text._ZN20CommandLineArguments19AddStrictNameFilterEiPPKcRi)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from commandlinearguments.o(.ARM.extab.text._ZN20CommandLineArguments20AddExcludeNameFilterEiPPKcRi)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from commandlinearguments.o(.ARM.extab.text._ZN20CommandLineArguments20AddStrictGroupFilterEiPPKcRi)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from commandlinearguments.o(.ARM.extab.text._ZN20CommandLineArguments21AddExcludeGroupFilterEiPPKcRi)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from commandlinearguments.o(.ARM.extab.text._ZN20CommandLineArguments26AddExcludeStrictNameFilterEiPPKcRi)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from commandlinearguments.o(.ARM.extab.text._ZN20CommandLineArguments27AddExcludeStrictGroupFilterEiPPKcRi)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from commandlinearguments.o(.ARM.extab.text._ZN20CommandLineArguments32AddTestToRunBasedOnVerboseOutputEiPPKcRiS1_)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from commandlinearguments.o(.ARM.extab.text._ZN20CommandLineArguments5parseEP10TestPlugin)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from commandlinearguments.o(.ARM.extab.text._ZN20CommandLineArgumentsD2Ev)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from commandlinetestrunner.o(.ARM.extab.text._ZN21CommandLineTestRunner11RunAllTestsEiPPKc)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from commandlinetestrunner.o(.ARM.extab.text._ZN21CommandLineTestRunner11runAllTestsEv)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from commandlinetestrunner.o(.ARM.extab.text._ZN21CommandLineTestRunner15runAllTestsMainEv)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from commandlinetestrunner.o(.ARM.extab.text._ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from commandlinetestrunner.o(.ARM.extab.text._ZN21CommandLineTestRunner19createConsoleOutputEv)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from commandlinetestrunner.o(.ARM.extab.text._ZN21CommandLineTestRunner20createTeamCityOutputEv)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from commandlinetestrunner.o(.ARM.extab.text._ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from commandlinetestrunner.o(.ARM.extab.text._ZN21CommandLineTestRunnerC2EiPPKcP12TestRegistry)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testfailure.o(.ARM.extab.text._ZN21LongLongsEqualFailureC2EP10UtestShellPKcixxRK12SimpleString)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from utest.o(.ARM.extab.text._ZN22OutsideTestRunnerUTest8instanceEv)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from utest.o(.ARM.extab.text._ZN22OutsideTestRunnerUTestC2Ev)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from simplestring.o(.ARM.extab.text._ZN22SimpleStringCollection8allocateEj)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from simplestring.o(.ARM.extab.text._ZN22SimpleStringCollectionixEj)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testoutput.o(.ARM.extab.text._ZN22StringBufferTestOutput5flushEv)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testmemoryallocator.o(.ARM.extab.text._ZN23FailableMemoryAllocator28checkAllFailedAllocsWereDoneEv)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from memoryleakwarningplugin.o(.ARM.extab.text._ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from memoryleakwarningplugin.o(.ARM.extab.text._ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from memoryleakwarningplugin.o(.ARM.extab.text._ZN23MemoryLeakWarningPluginC2ERK12SimpleStringP18MemoryLeakDetector)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testfailure.o(.ARM.extab.text._ZN23SignedBytesEqualFailureC2EP10UtestShellPKciaaRK12SimpleString)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testfailure.o(.ARM.extab.text._ZN24StringEqualNoCaseFailureC2EP10UtestShellPKciS3_S3_RK12SimpleString)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testfailure.o(.ARM.extab.text._ZN25FeatureUnsupportedFailureC2EP10UtestShellPKciRK12SimpleStringS6_)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from memoryleakwarningplugin.o(.ARM.extab.text._ZN25MemoryLeakWarningReporter4failEPc)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testfailure.o(.ARM.extab.text._ZN25UnsignedLongsEqualFailureC2EP10UtestShellPKcimmRK12SimpleString)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from testfailure.o(.ARM.extab.text._ZN29UnsignedLongLongsEqualFailureC2EP10UtestShellPKciyyRK12SimpleString)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from unittest.o(.ARM.extab.text._ZN30TEST_myFirstUnitTest_API1_Test8testBodyEv)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from unittest.o(.ARM.extab.text._ZN30TEST_myFirstUnitTest_API2_Test8testBodyEv)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from unittest.o(.ARM.extab.text._ZN35TEST_myFirstUnitTest_API1_TestShell10createTestEv)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from unittest.o(.ARM.extab.text._ZN35TEST_myFirstUnitTest_API2_TestShell10createTestEv)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from utest.o(.ARM.extab.text._ZN5Utest3runEv)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from utest.o(.ARM.extab.text._ZNK10UtestShell16getFormattedNameEv)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from utest.o(.ARM.extab.text._ZNK10UtestShell5matchEPKcPK10TestFilter)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from simplestring.o(.ARM.extab.text._ZNK12SimpleString12equalsNoCaseERKS_)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from simplestring.o(.ARM.extab.text._ZNK12SimpleString14containsNoCaseERKS_)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from simplestring.o(.ARM.extab.text._ZNK12SimpleString5splitERKS_R22SimpleStringCollection)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from simplestring.o(.ARM.extab.text._ZNK12SimpleString9subStringEjj)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from simplestring.o(.ARM.extab.text._ZNK12SimpleStringplERKS_)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from cxa_handlers.cpp.o(.ARM.extab.text._ZSt11__terminatePFvvE)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from cxa_handlers.cpp.o(.ARM.extab.text._ZSt9terminatev)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from cxa_exception.cpp.o(.ARM.extab.text.__cxa_allocate_exception)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from cxa_exception.cpp.o(.ARM.extab.text.__cxa_begin_catch)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from cxa_exception.cpp.o(.ARM.extab.text.__cxa_begin_cleanup)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from cxa_personality.cpp.o(.ARM.extab.text.__cxa_call_unexpected)
 <LI><a href="#[a9]">__gxx_personality_v0</a> from cxa_personality.cpp.o(.text.__gxx_personality_v0) referenced from cxa_exception.cpp.o(.ARM.extab.text.__cxa_decrement_exception_refcount)
 <LI><a href="#[6d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f746xx.o(.text)
 <LI><a href="#[a8]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[a2]">abort</a> from abort.o(.text) referenced from cxa_default_handlers.cpp.o(.data.__cxa_terminate_handler)
 <LI><a href="#[a2]">abort</a> from abort.o(.text) referenced 2 times from cxa_default_handlers.cpp.o(.text._ZSt13set_terminatePFvvE)
 <LI><a href="#[a7]">fputc</a> from fputc_debug.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[1e4]">free</a> from mallocra.o(i.__free$realloc$memalign) referenced from utestplatform.o(.data.PlatformSpecificFree)
 <LI><a href="#[6b]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[1e8]">malloc</a> from mallocra.o(i.__malloc$realloc$memalign) referenced from utestplatform.o(.data.PlatformSpecificMalloc)
 <LI><a href="#[1e9]">memset</a> from memseta.o(.text) referenced from utestplatform.o(.data.PlatformSpecificMemset)
 <LI><a href="#[1ee]">putchar</a> from utestplatform.o(.text.putchar) referenced from utestplatform.o(.data.PlatformSpecificPutchar)
 <LI><a href="#[1ef]">realloc</a> from mallocra.o(i.__realloc$memalign) referenced from utestplatform.o(.data.PlatformSpecificRealloc)
 <LI><a href="#[1f3]">vsnprintf</a> from printfa.o(i.__0vsnprintf) referenced from utestplatform.o(.data.PlatformSpecificVSNprintf)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(.text)
</UL>
<P><STRONG><a name="[3ba]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[1f6]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[20e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3bb]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1f8]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[3bc]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[3bd]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[3be]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1f9]"></a>__rt_final_cpp$nonempty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10b.o(.ARM.Collect$$$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = __rt_final_cpp$nonempty &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[3bf]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f746xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1fb]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1fe]"></a>ctime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ctime &rArr; asctime
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24TimeStringImplementationv
</UL>

<P><STRONG><a name="[3c0]"></a>___aeabi_memcpy4$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[3c1]"></a>___aeabi_memcpy8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[3b0]"></a>__aeabi_memcpy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_init_local
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>

<P><STRONG><a name="[3c2]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memcpy.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[3c3]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3c4]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[201]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_dependent_exception
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__calloc_with_fallback(unsigned, unsigned)
</UL>

<P><STRONG><a name="[2a1]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestResult::TestResult(TestOutput&)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure*)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
</UL>

<P><STRONG><a name="[2c5]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_init_local
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
</UL>

<P><STRONG><a name="[1e9]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data.PlatformSpecificMemset)
</UL>
<P><STRONG><a name="[1f5]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[70]"></a>__cxa_atexit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cxa_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullUnknownAllocator::defaultAllocator()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crash_on_allocation_number(unsigned)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultNewArrayAllocator()
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultMallocAllocator()
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultNewAllocator()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullTestPlugin::instance()
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsideTestRunnerUTest::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> unittest.o(.text._GLOBAL__sub_I_UnitTest.cpp)
</UL>
<P><STRONG><a name="[204]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[208]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doubles_equal(double, double, double)
</UL>

<P><STRONG><a name="[209]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[257]"></a>__aeabi_dcmple</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, dcmple.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doubles_equal(double, double, double)
</UL>

<P><STRONG><a name="[288]"></a>setjmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, setjmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL36PlatformSpecificSetJmpImplementationPFvPvES_
</UL>

<P><STRONG><a name="[289]"></a>longjmp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, setjmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL37PlatformSpecificLongJmpImplementationv
</UL>

<P><STRONG><a name="[229]"></a>unw_getcontext</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersSave.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
</UL>

<P><STRONG><a name="[386]"></a>libunwind::Registers_arm::saveVFPWithFSTMD(void*)</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersSave.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setFloatReg(int, unsigned long long)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFloatReg(int)
</UL>

<P><STRONG><a name="[384]"></a>libunwind::Registers_arm::saveVFPWithFSTMX(void*)</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersSave.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setFloatReg(int, unsigned long long)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFloatReg(int)
</UL>

<P><STRONG><a name="[385]"></a>libunwind::Registers_arm::saveVFPv3(void*)</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersSave.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setFloatReg(int, unsigned long long)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFloatReg(int)
</UL>

<P><STRONG><a name="[3c5]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[3b9]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1fd]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[3c6]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[3c7]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3c8]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>abort</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, abort.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> cxa_default_handlers.cpp.o(.text._ZSt13set_terminatePFvvE)
<LI> cxa_default_handlers.cpp.o(.data.__cxa_terminate_handler)
</UL>
<P><STRONG><a name="[1ff]"></a>localtime</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, localtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[200]"></a>asctime</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, asctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = asctime
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[392]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__vmi_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pbase_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const
</UL>

<P><STRONG><a name="[3c9]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[203]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>

<P><STRONG><a name="[207]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[206]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[20b]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[20c]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[20d]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3b6]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[38c]"></a>libunwind::Registers_arm::restoreCoreAndJumpTo()</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersRestore.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::jumpto()
</UL>

<P><STRONG><a name="[38e]"></a>libunwind::Registers_arm::restoreVFPWithFLDMD(void*)</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersRestore.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreSavedFloatRegisters()
</UL>

<P><STRONG><a name="[38d]"></a>libunwind::Registers_arm::restoreVFPWithFLDMX(void*)</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersRestore.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreSavedFloatRegisters()
</UL>

<P><STRONG><a name="[38f]"></a>libunwind::Registers_arm::restoreVFPv3(void*)</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, UnwindRegistersRestore.S.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreSavedFloatRegisters()
</UL>

<P><STRONG><a name="[1f7]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[3ca]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>calloc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, calloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__calloc_with_fallback(unsigned, unsigned)
</UL>

<P><STRONG><a name="[210]"></a>posix_memalign</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, memalign.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = posix_memalign &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aligned_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_malloc_with_fallback(unsigned)
</UL>

<P><STRONG><a name="[20a]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpp_dtor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[1fa]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_final_cpp$nonempty
</UL>

<P><STRONG><a name="[3cb]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cpp_final.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[212]"></a>HAL_Delay</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f7xx_hal.o(.text.HAL_Delay), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>

<P><STRONG><a name="[213]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[3cc]"></a>HAL_GetTickFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal.o(.text.HAL_GetTickFreq), UNUSED)

<P><STRONG><a name="[3cd]"></a>HAL_GetTickPrio</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal.o(.text.HAL_GetTickPrio), UNUSED)

<P><STRONG><a name="[221]"></a>HAL_IncTick</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f7xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[214]"></a>HAL_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f7xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[216]"></a>HAL_InitTick</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f7xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SetTickFreq
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[217]"></a>HAL_MspInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f7xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[6e]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f7xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_msp.o(.text.HAL_MspInit)
</UL>
<P><STRONG><a name="[215]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[21a]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f7xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[21b]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, stm32f7xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[260]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[21c]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f7xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[21d]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 776 bytes, Stack size 32 bytes, stm32f7xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[261]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(.text.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[21f]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(.text.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[218]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>

<P><STRONG><a name="[21e]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(.text.HAL_SYSTICK_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[220]"></a>HAL_SetTickFreq</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f7xx_hal.o(.text.HAL_SetTickFreq), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3ae]"></a>MX_GPIO_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MX_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f7xx_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3ce]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, system_stm32f7xx.o(.text.SystemCoreClockUpdate), UNUSED)

<P><STRONG><a name="[6c]"></a>SystemInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, system_stm32f7xx.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(.text)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f746xx.o(RESET)
</UL>
<P><STRONG><a name="[3cf]"></a>_Unwind_Complete</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_Complete), UNUSED)

<P><STRONG><a name="[3ab]"></a>_Unwind_DeleteException</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_DeleteException))
<BR><BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
</UL>

<P><STRONG><a name="[225]"></a>_Unwind_GetLanguageSpecificData</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_GetLanguageSpecificData))
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_proc_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
</UL>

<P><STRONG><a name="[227]"></a>_Unwind_GetRegionStart</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_GetRegionStart))
<BR><BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_proc_info
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
</UL>

<P><STRONG><a name="[228]"></a>_Unwind_RaiseException</STRONG> (Thumb, 122 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_RaiseException))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _Unwind_RaiseException &rArr; unw_init_local &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_init_local
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_getcontext
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_proc_info
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow_primary_exception
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
</UL>

<P><STRONG><a name="[22c]"></a>_Unwind_Resume</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _Unwind_Resume &rArr; _ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb &rArr; unw_init_local &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_getcontext
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::RunAllTests(int, const char**)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned, unsigned) const
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddTestToRunBasedOnVerboseOutput(int, const char**, int&, const char*)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeStrictGroupFilter(int, const char**, int&)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeStrictNameFilter(int, const char**, int&)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeGroupFilter(int, const char**, int&)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddStrictGroupFilter(int, const char**, int&)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeNameFilter(int, const char**, int&)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddStrictNameFilter(int, const char**, int&)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::SetRepeatCount(int, const char**, int&)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::SetPackageName(int, const char**, int&)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddGroupFilter(int, const char**, int&)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::SetOutputType(int, const char**, int&)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddNameFilter(int, const char**, int&)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::TestFilter(const SimpleString&)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getFormattedName() const
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utest::run()
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_myFirstUnitTest_API2_TestShell::createTest()
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_myFirstUnitTest_API1_TestShell::createTest()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_myFirstUnitTest_API2_Test::testBody()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_myFirstUnitTest_API1_Test::testBody()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::failWith(const TestFailure&)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::print(const char*, const char*, int)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::fail(const char*, const char*, int, const TestTerminator&)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertUnsignedLongLongsEqual(unsigned long long, unsigned long long, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertFunctionPointersEqual(void(*)(), void(*)(), const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertUnsignedLongsEqual(unsigned long, unsigned long, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNoCaseContains(const char*, const char*, const char*, const char*, int)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertSignedBytesEqual(signed char, signed char, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNoCaseEqual(const char*, const char*, const char*, const char*, int)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertLongLongsEqual(long long, long long, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertPointersEqual(const void*, const void*, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertDoublesEqual(double, double, double, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrContains(const char*, const char*, const char*, const char*, int)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertBinaryEqual(const void*, const void*, unsigned, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertLongsEqual(long, long, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNEqual(const char*, const char*, unsigned, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrEqual(const char*, const char*, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertBitsEqual(unsigned long, unsigned long, unsigned long, unsigned, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertEquals(bool, const char*, const char*, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertTrue(bool, const char*, const char*, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString&, MemoryLeakDetector*)
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::CommandLineTestRunner(int, const char**, TestRegistry*)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::createCompositeOutput(TestOutput*, TestOutput*)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::createTeamCityOutput()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::createConsoleOutput()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::createJUnitOutput(const SimpleString&)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTestsMain()
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTests()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::TeamCityTestOutput()
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::JUnitTestOutput()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::getCurrentRegistry()
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure*)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutputImpl::JUnitTestOutputImpl__sub_object()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::printCurrentTestStarted(const UtestShell&)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeTestSuiteSummary()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeTestGroupToFile()
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::resetTestGroupResult()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeProperties()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeFileEnding()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeXmlHeader()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeTestCases()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::createFileName(const SimpleString&)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeFailure(JUnitTestCaseResultNode*)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::printFailure(const TestFailure&)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(const TestFailure&)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printDouble(double)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::TestFilter(const char*)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningReporter::fail(char*)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::postTestAction(UtestShell&, TestResult&)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const SimpleString&)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailFailure::FailFailure(UtestShell*, const char*, int, const SimpleString&)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crash_on_allocation_number(unsigned)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL44threadsafe_mem_leak_operator_new_array_debugjPKci
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38threadsafe_mem_leak_operator_new_debugjPKci
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38threadsafe_mem_leak_operator_new_arrayj
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32threadsafe_mem_leak_operator_newj
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27threadsafe_mem_leak_reallocPvjPKci
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26threadsafe_mem_leak_mallocjPKci
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24threadsafe_mem_leak_freePvPKci
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentGroupStarted(const UtestShell&)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentTestStarted(const UtestShell&)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentGroupEnded(const TestResult&)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentTestEnded(const TestResult&)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printFailure(const TestFailure&)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::print(long)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +(const SimpleString&) const
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::split(const SimpleString&, SimpleStringCollection&) const
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::containsNoCase(const SimpleString&) const
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::equalsNoCase(const SimpleString&) const
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringCollection::operator [](unsigned)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringCollection::allocate(unsigned)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinaryWithSize(const unsigned char*, unsigned)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromMaskedBits(unsigned long, unsigned long, unsigned)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VStringFromFormat(const char*, std::__va_list)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinary(const unsigned char*, unsigned)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(signed char)
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(const void*)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(void(*)())
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, int, unsigned long long, unsigned long long, const SimpleString&)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, int, unsigned long, unsigned long, const SimpleString&)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, int, signed char, signed char, const SimpleString&)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, int, long long, long long, const SimpleString&)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoublesEqualFailure::DoublesEqualFailure(UtestShell*, const char*, int, double, double, double, const SimpleString&)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::StringEqualFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinaryEqualFailure::BinaryEqualFailure(UtestShell*, const char*, int, const unsigned char*, const unsigned char*, unsigned, const SimpleString&)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, int, long, long, const SimpleString&)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEqualFailure::CheckEqualFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsEqualFailure::BitsEqualFailure(UtestShell*, const char*, int, unsigned long, unsigned long, unsigned long, unsigned, const SimpleString&)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsFailure::ContainsFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::EqualsFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::EqualsFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFailure::CheckFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, int, const SimpleString&)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, int)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, TestFailure::DifferenceFormat)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailableMemoryAllocator::checkAllFailedAllocsWereDone()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMemoryAllocator::alloc_memory(unsigned, const char*, int)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullTestPlugin::instance()
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CppUTestStore(void**)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBufferTestOutput::flush()
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString, int)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFileAndLineForTestAndFailure(const TestFailure&)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFileAndLineForFailure(const TestFailure&)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printCurrentTestStarted(const UtestShell&)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFailure(const TestFailure&)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupAndCaseNames(TestResult&)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupNames(TestResult&)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::findTestWithGroup(const SimpleString&)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::findTestWithName(const SimpleString&)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::endOfGroup(UtestShell*)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL30DummyRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::match(const char*, const TestFilter*) const
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsideTestRunnerUTest::OutsideTestRunnerUTest__sub_object()
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsideTestRunnerUTest::instance()
</UL>

<P><STRONG><a name="[22d]"></a>_Unwind_VRS_Get</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_VRS_Get))
<BR><BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_save_vfp_as_X
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_reg
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_fpreg
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gxx_personality_v0
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L13set_registersEP21_Unwind_Control_BlockP15_Unwind_ContextRKNS_12_GLOBAL__N_112scan_resultsE
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
</UL>

<P><STRONG><a name="[231]"></a>_Unwind_VRS_Interpret</STRONG> (Thumb, 554 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_VRS_Interpret))
<BR><BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_set_reg
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_reg
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Pop
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::stepWithEHABI()
</UL>

<P><STRONG><a name="[232]"></a>_Unwind_VRS_Pop</STRONG> (Thumb, 232 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_VRS_Pop))
<BR><BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_set_reg
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_reg
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Interpret
</UL>

<P><STRONG><a name="[234]"></a>_Unwind_VRS_Set</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._Unwind_VRS_Set))
<BR><BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_set_reg
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_set_fpreg
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_save_vfp_as_X
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Pop
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L13set_registersEP21_Unwind_Control_BlockP15_Unwind_ContextRKNS_12_GLOBAL__N_112scan_resultsE
</UL>

<P><STRONG><a name="[236]"></a>StringFrom(void(*)())</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, simplestring.o(.text._Z10StringFromPFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = StringFrom(void(*)()) &rArr; HexStringFrom(void(*)()) &rArr; HexStringFrom(unsigned long long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +(const SimpleString&) const
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString__sub_object()
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString__sub_object(const char*)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertFunctionPointersEqual(void(*)(), void(*)(), const char*, const char*, int, const TestTerminator&)
</UL>

<P><STRONG><a name="[23b]"></a>StringFrom(const char*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, simplestring.o(.text._Z10StringFromPKc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString__sub_object(const char*)
</UL>

<P><STRONG><a name="[23c]"></a>StringFrom(const void*)</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, simplestring.o(.text._Z10StringFromPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = StringFrom(const void*) &rArr; HexStringFrom(const void*) &rArr; HexStringFrom(unsigned long long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +(const SimpleString&) const
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString__sub_object()
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString__sub_object(const char*)
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(const void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertPointersEqual(const void*, const void*, const char*, const char*, int, const TestTerminator&)
</UL>

<P><STRONG><a name="[23e]"></a>StringFrom(const SimpleString&)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, simplestring.o(.text._Z10StringFromRK12SimpleString), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString__sub_object(const SimpleString&)
</UL>

<P><STRONG><a name="[240]"></a>StringFrom(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, simplestring.o(.text._Z10StringFromRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString__sub_object(const char*)
</UL>

<P><STRONG><a name="[241]"></a>StringFrom(bool)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, simplestring.o(.text._Z10StringFromb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>

<P><STRONG><a name="[243]"></a>StringFrom(char)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, simplestring.o(.text._Z10StringFromc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>

<P><STRONG><a name="[244]"></a>StringFrom(double, int)</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, simplestring.o(.text._Z10StringFromdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = StringFrom(double, int) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printDouble(double)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoublesEqualFailure::DoublesEqualFailure(UtestShell*, const char*, int, double, double, double, const SimpleString&)
</UL>

<P><STRONG><a name="[245]"></a>StringFrom(int)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, simplestring.o(.text._Z10StringFromi))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = StringFrom(int) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::print(const char*, const char*, int)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, int, signed char, signed char, const SimpleString&)
</UL>

<P><STRONG><a name="[246]"></a>StringFrom(unsigned)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, simplestring.o(.text._Z10StringFromj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>

<P><STRONG><a name="[247]"></a>StringFrom(long)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, simplestring.o(.text._Z10StringFroml))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = StringFrom(long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::print(long)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, int, long, long, const SimpleString&)
</UL>

<P><STRONG><a name="[248]"></a>StringFrom(unsigned long)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, simplestring.o(.text._Z10StringFromm))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = StringFrom(unsigned long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, int, unsigned long, unsigned long, const SimpleString&)
</UL>

<P><STRONG><a name="[249]"></a>StringFrom(long long)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, simplestring.o(.text._Z10StringFromx))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = StringFrom(long long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, int, long long, long long, const SimpleString&)
</UL>

<P><STRONG><a name="[24a]"></a>StringFrom(unsigned long long)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, simplestring.o(.text._Z10StringFromy))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = StringFrom(unsigned long long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, int, unsigned long long, unsigned long long, const SimpleString&)
</UL>

<P><STRONG><a name="[24b]"></a>CppUTestStore(void**)</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, testplugin.o(.text._Z13CppUTestStorePPv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalTestTerminator::~NormalTestTerminator()
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getCurrent()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>

<P><STRONG><a name="[238]"></a>HexStringFrom(void(*)())</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, simplestring.o(.text._Z13HexStringFromPFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = HexStringFrom(void(*)()) &rArr; HexStringFrom(unsigned long long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(void(*)())
</UL>

<P><STRONG><a name="[23d]"></a>HexStringFrom(const void*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, simplestring.o(.text._Z13HexStringFromPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = HexStringFrom(const void*) &rArr; HexStringFrom(unsigned long long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(const void*)
</UL>

<P><STRONG><a name="[24f]"></a>HexStringFrom(signed char)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, simplestring.o(.text._Z13HexStringFroma))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = HexStringFrom(signed char) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned) const
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, int, signed char, signed char, const SimpleString&)
</UL>

<P><STRONG><a name="[253]"></a>HexStringFrom(long)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, simplestring.o(.text._Z13HexStringFroml))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = HexStringFrom(long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, int, long, long, const SimpleString&)
</UL>

<P><STRONG><a name="[254]"></a>HexStringFrom(unsigned long)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, simplestring.o(.text._Z13HexStringFromm))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = HexStringFrom(unsigned long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, int, unsigned long, unsigned long, const SimpleString&)
</UL>

<P><STRONG><a name="[255]"></a>HexStringFrom(long long)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, simplestring.o(.text._Z13HexStringFromx))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = HexStringFrom(long long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, int, long long, long long, const SimpleString&)
</UL>

<P><STRONG><a name="[24e]"></a>HexStringFrom(unsigned long long)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, simplestring.o(.text._Z13HexStringFromy))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = HexStringFrom(unsigned long long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(const void*)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(void(*)())
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, int, unsigned long long, unsigned long long, const SimpleString&)
</UL>

<P><STRONG><a name="[256]"></a>doubles_equal(double, double, double)</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, utest.o(.text._Z13doubles_equalddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = doubles_equal(double, double, double) &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertDoublesEqual(double, double, double, const char*, const char*, int, const TestTerminator&)
</UL>

<P><STRONG><a name="[258]"></a>StringFromBinary(const unsigned char*, unsigned)</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, simplestring.o(.text._Z16StringFromBinaryPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = StringFromBinary(const unsigned char*, unsigned) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned, unsigned) const
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString__sub_object()
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinaryOrNull(const unsigned char*, unsigned)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinaryEqualFailure::BinaryEqualFailure(UtestShell*, const char*, int, const unsigned char*, const unsigned char*, unsigned, const SimpleString&)
</UL>

<P><STRONG><a name="[242]"></a>StringFromFormat(const char*, ...)</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, simplestring.o(.text._Z16StringFromFormatPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString__sub_object()
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString__sub_object(const char*)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VStringFromFormat(const char*, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeTestSuiteSummary()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeTestCases()
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeFailure(JUnitTestCaseResultNode*)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinaryWithSize(const unsigned char*, unsigned)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromOrdinalNumber(unsigned)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinary(const unsigned char*, unsigned)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(unsigned long long)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(long long)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(unsigned long)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(long)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(signed char)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(unsigned long long)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(long long)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(unsigned long)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(long)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(unsigned)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(int)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(double, int)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(char)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(bool)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsFailure::ContainsFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, TestFailure::DifferenceFormat)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createButWasString(const SimpleString&, const SimpleString&)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailableMemoryAllocator::checkAllFailedAllocsWereDone()
</UL>

<P><STRONG><a name="[25c]"></a>StringFromOrNull(const char*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, simplestring.o(.text._Z16StringFromOrNullPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StringFromOrNull(const char*) &rArr; SimpleString::SimpleString__sub_object(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::StringEqualFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::EqualsFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
</UL>

<P><STRONG><a name="[25b]"></a>VStringFromFormat(const char*, std::__va_list)</STRONG> (Thumb, 176 bytes, Stack size 136 bytes, simplestring.o(.text._Z17VStringFromFormatPKcSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString__sub_object()
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString__sub_object(const char*)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::deallocStringBuffer(char*, const char*, int)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::allocStringBuffer(unsigned, const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>

<P><STRONG><a name="[25f]"></a>SystemClock_Config()</STRONG> (Thumb, 156 bytes, Stack size 88 bytes, main.o(.text._Z18SystemClock_Configv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SystemClock_Config() &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[262]"></a>defaultNewAllocator()</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, testmemoryallocator.o(.text._Z19defaultNewAllocatorv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = defaultNewAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentNewAllocatorToDefault()
</UL>

<P><STRONG><a name="[264]"></a>StringFromMaskedBits(unsigned long, unsigned long, unsigned)</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, simplestring.o(.text._Z20StringFromMaskedBitsmmj))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = StringFromMaskedBits(unsigned long, unsigned long, unsigned) &rArr; SimpleString::operator +=(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString__sub_object()
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsEqualFailure::BitsEqualFailure(UtestShell*, const char*, int, unsigned long, unsigned long, unsigned long, unsigned, const SimpleString&)
</UL>

<P><STRONG><a name="[265]"></a>StringFromBinaryOrNull(const unsigned char*, unsigned)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, simplestring.o(.text._Z22StringFromBinaryOrNullPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = StringFromBinaryOrNull(const unsigned char*, unsigned) &rArr; StringFromBinary(const unsigned char*, unsigned) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString__sub_object(const char*)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinary(const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinaryWithSize(const unsigned char*, unsigned)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinaryEqualFailure::BinaryEqualFailure(UtestShell*, const char*, int, const unsigned char*, const unsigned char*, unsigned, const SimpleString&)
</UL>

<P><STRONG><a name="[266]"></a>defaultMallocAllocator()</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, testmemoryallocator.o(.text._Z22defaultMallocAllocatorv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = defaultMallocAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentMallocAllocatorToDefault()
</UL>

<P><STRONG><a name="[267]"></a>getCurrentNewAllocator()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, testmemoryallocator.o(.text._Z22getCurrentNewAllocatorv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = getCurrentNewAllocator() &rArr; setCurrentNewAllocatorToDefault() &rArr; defaultNewAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentNewAllocatorToDefault()
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL40threadsafe_mem_leak_operator_new_nothrowj
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38threadsafe_mem_leak_operator_new_debugjPKci
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL35threadsafe_mem_leak_operator_deletePv
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32threadsafe_mem_leak_operator_newj
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mem_leak_operator_new_nothrowj
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27mem_leak_operator_new_debugjPKci
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24mem_leak_operator_deletePv
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mem_leak_operator_newj
</UL>

<P><STRONG><a name="[270]"></a>setCurrentNewAllocator(TestMemoryAllocator*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, testmemoryallocator.o(.text._Z22setCurrentNewAllocatorP19TestMemoryAllocator), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crash_on_allocation_number(unsigned)
</UL>

<P><STRONG><a name="[269]"></a>StringFromOrdinalNumber(unsigned)</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, simplestring.o(.text._Z23StringFromOrdinalNumberj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>

<P><STRONG><a name="[26a]"></a>StringFromBinaryWithSize(const unsigned char*, unsigned)</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, simplestring.o(.text._Z24StringFromBinaryWithSizePKhj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString__sub_object()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinaryOrNull(const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinaryWithSizeOrNull(const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[26b]"></a>defaultNewArrayAllocator()</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, testmemoryallocator.o(.text._Z24defaultNewArrayAllocatorv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::getStringAllocator()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentNewArrayAllocatorToDefault()
</UL>

<P><STRONG><a name="[26c]"></a>getCurrentMallocAllocator()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, testmemoryallocator.o(.text._Z25getCurrentMallocAllocatorv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = getCurrentMallocAllocator() &rArr; setCurrentMallocAllocatorToDefault() &rArr; defaultMallocAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentMallocAllocatorToDefault()
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27threadsafe_mem_leak_reallocPvjPKci
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26threadsafe_mem_leak_mallocjPKci
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24threadsafe_mem_leak_freePvPKci
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16mem_leak_reallocPvjPKci
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15mem_leak_mallocjPKci
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13mem_leak_freePvPKci
</UL>

<P><STRONG><a name="[26f]"></a>setCurrentMallocAllocator(TestMemoryAllocator*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, testmemoryallocator.o(.text._Z25setCurrentMallocAllocatorP19TestMemoryAllocator), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crash_on_allocation_number(unsigned)
</UL>

<P><STRONG><a name="[26e]"></a>crash_on_allocation_number(unsigned)</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, memoryleakwarningplugin.o(.text._Z26crash_on_allocation_numberj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrashOnAllocationAllocator::CrashOnAllocationAllocator()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrashOnAllocationAllocator::setNumberToCrashOn(unsigned)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentNewArrayAllocator(TestMemoryAllocator*)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentMallocAllocator(TestMemoryAllocator*)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentNewAllocator(TestMemoryAllocator*)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>

<P><STRONG><a name="[273]"></a>getCurrentNewArrayAllocator()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, testmemoryallocator.o(.text._Z27getCurrentNewArrayAllocatorv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = getCurrentNewArrayAllocator() &rArr; setCurrentNewArrayAllocatorToDefault() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentNewArrayAllocatorToDefault()
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL46threadsafe_mem_leak_operator_new_array_nothrowj
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL44threadsafe_mem_leak_operator_new_array_debugjPKci
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL41threadsafe_mem_leak_operator_delete_arrayPv
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38threadsafe_mem_leak_operator_new_arrayj
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL35mem_leak_operator_new_array_nothrowj
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mem_leak_operator_new_array_debugjPKci
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL30mem_leak_operator_delete_arrayPv
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27mem_leak_operator_new_arrayj
</UL>

<P><STRONG><a name="[271]"></a>setCurrentNewArrayAllocator(TestMemoryAllocator*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, testmemoryallocator.o(.text._Z27setCurrentNewArrayAllocatorP19TestMemoryAllocator), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crash_on_allocation_number(unsigned)
</UL>

<P><STRONG><a name="[275]"></a>StringFromBinaryWithSizeOrNull(const unsigned char*, unsigned)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, simplestring.o(.text._Z30StringFromBinaryWithSizeOrNullPKhj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString__sub_object(const char*)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinaryWithSize(const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[268]"></a>setCurrentNewAllocatorToDefault()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, testmemoryallocator.o(.text._Z31setCurrentNewAllocatorToDefaultv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = setCurrentNewAllocatorToDefault() &rArr; defaultNewAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultNewAllocator()
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentNewAllocator()
</UL>

<P><STRONG><a name="[26d]"></a>setCurrentMallocAllocatorToDefault()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, testmemoryallocator.o(.text._Z34setCurrentMallocAllocatorToDefaultv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = setCurrentMallocAllocatorToDefault() &rArr; defaultMallocAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultMallocAllocator()
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentMallocAllocator()
</UL>

<P><STRONG><a name="[274]"></a>setCurrentNewArrayAllocatorToDefault()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, testmemoryallocator.o(.text._Z36setCurrentNewArrayAllocatorToDefaultv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = setCurrentNewArrayAllocatorToDefault() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultNewArrayAllocator()
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentNewArrayAllocator()
</UL>

<P><STRONG><a name="[295]"></a>PlatformSpecificGetWorkingEnvironment()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utestplatform.o(.text._Z37PlatformSpecificGetWorkingEnvironmentv))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::getWorkingEnvironment()
</UL>

<P><STRONG><a name="[1e2]"></a>abs(double)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, utestplatform.o(.text._Z3absd))
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data.PlatformSpecificFabs)
</UL>
<P><STRONG><a name="[3d0]"></a>cpputest_free_location_with_leak_detection(void*, const char*, int)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(.text._Z42cpputest_free_location_with_leak_detectionPvPKci), UNUSED)

<P><STRONG><a name="[3d1]"></a>cpputest_malloc_location_with_leak_detection(unsigned, const char*, int)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(.text._Z44cpputest_malloc_location_with_leak_detectionjPKci), UNUSED)

<P><STRONG><a name="[3d2]"></a>cpputest_realloc_location_with_leak_detection(void*, unsigned, const char*, int)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(.text._Z45cpputest_realloc_location_with_leak_detectionPvjPKci), UNUSED)

<P><STRONG><a name="[32f]"></a>TestFilter::invertMatching()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testfilter.o(.text._ZN10TestFilter14invertMatchingEv))
<BR><BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeStrictGroupFilter(int, const char**, int&)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeStrictNameFilter(int, const char**, int&)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeGroupFilter(int, const char**, int&)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeNameFilter(int, const char**, int&)
</UL>

<P><STRONG><a name="[32d]"></a>TestFilter::strictMatching()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testfilter.o(.text._ZN10TestFilter14strictMatchingEv))
<BR><BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddTestToRunBasedOnVerboseOutput(int, const char**, int&, const char*)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeStrictGroupFilter(int, const char**, int&)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeStrictNameFilter(int, const char**, int&)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddStrictGroupFilter(int, const char**, int&)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddStrictNameFilter(int, const char**, int&)
</UL>

<P><STRONG><a name="[326]"></a>TestFilter::add(TestFilter*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testfilter.o(.text._ZN10TestFilter3addEPS_))
<BR><BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddTestToRunBasedOnVerboseOutput(int, const char**, int&, const char*)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeStrictGroupFilter(int, const char**, int&)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeStrictNameFilter(int, const char**, int&)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeGroupFilter(int, const char**, int&)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddStrictGroupFilter(int, const char**, int&)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeNameFilter(int, const char**, int&)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddStrictNameFilter(int, const char**, int&)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddGroupFilter(int, const char**, int&)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddNameFilter(int, const char**, int&)
</UL>

<P><STRONG><a name="[28a]"></a>TestFilter::TestFilter(const char*)</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, testfilter.o(.text._ZN10TestFilterC2EPKc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>

<P><STRONG><a name="[3d3]"></a>TestFilter::TestFilter__sub_object(const char*)</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, testfilter.o(.text._ZN10TestFilterC2EPKc), UNUSED)

<P><STRONG><a name="[28b]"></a>TestFilter::TestFilter(const SimpleString&)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, testfilter.o(.text._ZN10TestFilterC2ERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = TestFilter::TestFilter(const SimpleString&) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddTestToRunBasedOnVerboseOutput(int, const char**, int&, const char*)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeStrictGroupFilter(int, const char**, int&)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeStrictNameFilter(int, const char**, int&)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeGroupFilter(int, const char**, int&)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddStrictGroupFilter(int, const char**, int&)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeNameFilter(int, const char**, int&)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddStrictNameFilter(int, const char**, int&)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddGroupFilter(int, const char**, int&)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddNameFilter(int, const char**, int&)
</UL>

<P><STRONG><a name="[3d4]"></a>TestFilter::TestFilter__sub_object(const SimpleString&)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, testfilter.o(.text._ZN10TestFilterC2ERK12SimpleString), UNUSED)

<P><STRONG><a name="[28c]"></a>TestFilter::TestFilter()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, testfilter.o(.text._ZN10TestFilterC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
</UL>

<P><STRONG><a name="[3d5]"></a>TestFilter::TestFilter__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, testfilter.o(.text._ZN10TestFilterC2Ev), UNUSED)

<P><STRONG><a name="[b7]"></a>TestOutput::printDouble(double)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, testoutput.o(.text._ZN10TestOutput11printDoubleEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = TestOutput::printDouble(double) &rArr; StringFrom(double, int) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(double, int)
</UL>
<BR>[Address Reference Count : 5]<UL><LI> teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
<LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
<LI> testoutput.o(.rodata._ZTV10TestOutput)
<LI> testoutput.o(.rodata._ZTV22StringBufferTestOutput)
<LI> testoutput.o(.rodata._ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[b8]"></a>TestOutput::printFailure(const TestFailure&)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, testoutput.o(.text._ZN10TestOutput12printFailureERK11TestFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = TestOutput::printFailure(const TestFailure&) &rArr; TestOutput::printFileAndLineForTestAndFailure(const TestFailure&) &rArr; TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString, int) &rArr; SimpleString::SimpleString(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::isInHelperFunction() const
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::isOutsideTestFile() const
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFileAndLineForTestAndFailure(const TestFailure&)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFileAndLineForFailure(const TestFailure&)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFailureMessage(SimpleString)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> testoutput.o(.rodata._ZTV10TestOutput)
<LI> testoutput.o(.rodata._ZTV22StringBufferTestOutput)
<LI> testoutput.o(.rodata._ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[b9]"></a>TestOutput::printTestRun(int, int)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, testoutput.o(.text._ZN10TestOutput12printTestRunEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestOutput::printTestRun(int, int)
</UL>
<BR>[Address Reference Count : 6]<UL><LI> teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
<LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
<LI> testoutput.o(.rodata._ZTV10TestOutput)
<LI> testoutput.o(.rodata._ZTV22StringBufferTestOutput)
<LI> testoutput.o(.rodata._ZTV19CompositeTestOutput)
<LI> testoutput.o(.rodata._ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[ad]"></a>TestOutput::printTestsEnded(const TestResult&)</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, testoutput.o(.text._ZN10TestOutput15printTestsEndedERK10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestOutput::printTestsEnded(const TestResult&)
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestResult::getTotalExecutionTime() const
</UL>
<BR>[Address Reference Count : 4]<UL><LI> teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
<LI> testoutput.o(.rodata._ZTV10TestOutput)
<LI> testoutput.o(.rodata._ZTV22StringBufferTestOutput)
<LI> testoutput.o(.rodata._ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[ac]"></a>TestOutput::printTestsStarted()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testoutput.o(.text._ZN10TestOutput17printTestsStartedEv))
<BR>[Address Reference Count : 4]<UL><LI> teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
<LI> testoutput.o(.rodata._ZTV10TestOutput)
<LI> testoutput.o(.rodata._ZTV22StringBufferTestOutput)
<LI> testoutput.o(.rodata._ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[293]"></a>TestOutput::printFailureInTest(SimpleString)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, testoutput.o(.text._ZN10TestOutput18printFailureInTestE12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestOutput::printFailureInTest(SimpleString)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFileAndLineForTestAndFailure(const TestFailure&)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFileAndLineForFailure(const TestFailure&)
</UL>

<P><STRONG><a name="[291]"></a>TestOutput::printFailureMessage(SimpleString)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, testoutput.o(.text._ZN10TestOutput19printFailureMessageE12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestOutput::printFailureMessage(SimpleString)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFailure(const TestFailure&)
</UL>

<P><STRONG><a name="[ba]"></a>TestOutput::setProgressIndicator(const char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testoutput.o(.text._ZN10TestOutput20setProgressIndicatorEPKc))
<BR>[Address Reference Count : 5]<UL><LI> teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
<LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
<LI> testoutput.o(.rodata._ZTV10TestOutput)
<LI> testoutput.o(.rodata._ZTV22StringBufferTestOutput)
<LI> testoutput.o(.rodata._ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[294]"></a>TestOutput::getWorkingEnvironment()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, testoutput.o(.text._ZN10TestOutput21getWorkingEnvironmentEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TestOutput::getWorkingEnvironment()
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlatformSpecificGetWorkingEnvironment()
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString, int)
</UL>

<P><STRONG><a name="[af]"></a>TestOutput::printCurrentTestEnded(const TestResult&)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, testoutput.o(.text._ZN10TestOutput21printCurrentTestEndedERK10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestOutput::printCurrentTestEnded(const TestResult&)
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestResult::getCurrentTestTotalExecutionTime() const
</UL>
<BR>[Address Reference Count : 3]<UL><LI> testoutput.o(.rodata._ZTV10TestOutput)
<LI> testoutput.o(.rodata._ZTV22StringBufferTestOutput)
<LI> testoutput.o(.rodata._ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[3d6]"></a>TestOutput::setWorkingEnvironment(TestOutput::WorkingEnvironment)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, testoutput.o(.text._ZN10TestOutput21setWorkingEnvironmentENS_18WorkingEnvironmentE), UNUSED)

<P><STRONG><a name="[b1]"></a>TestOutput::printCurrentGroupEnded(const TestResult&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testoutput.o(.text._ZN10TestOutput22printCurrentGroupEndedERK10TestResult))
<BR>[Address Reference Count : 3]<UL><LI> testoutput.o(.rodata._ZTV10TestOutput)
<LI> testoutput.o(.rodata._ZTV22StringBufferTestOutput)
<LI> testoutput.o(.rodata._ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[bd]"></a>TestOutput::printProgressIndicator()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, testoutput.o(.text._ZN10TestOutput22printProgressIndicatorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TestOutput::printProgressIndicator()
</UL>
<BR>[Address Reference Count : 6]<UL><LI> teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
<LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
<LI> testoutput.o(.rodata._ZTV10TestOutput)
<LI> testoutput.o(.rodata._ZTV22StringBufferTestOutput)
<LI> testoutput.o(.rodata._ZTV19CompositeTestOutput)
<LI> testoutput.o(.rodata._ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[ae]"></a>TestOutput::printCurrentTestStarted(const UtestShell&)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, testoutput.o(.text._ZN10TestOutput23printCurrentTestStartedERK10UtestShell))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = TestOutput::printCurrentTestStarted(const UtestShell&) &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocStringBuffer(char*, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
</UL>
<BR>[Address Reference Count : 3]<UL><LI> testoutput.o(.rodata._ZTV10TestOutput)
<LI> testoutput.o(.rodata._ZTV22StringBufferTestOutput)
<LI> testoutput.o(.rodata._ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[b0]"></a>TestOutput::printCurrentGroupStarted(const UtestShell&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testoutput.o(.text._ZN10TestOutput24printCurrentGroupStartedERK10UtestShell))
<BR>[Address Reference Count : 3]<UL><LI> testoutput.o(.rodata._ZTV10TestOutput)
<LI> testoutput.o(.rodata._ZTV22StringBufferTestOutput)
<LI> testoutput.o(.rodata._ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[290]"></a>TestOutput::printFileAndLineForFailure(const TestFailure&)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, testoutput.o(.text._ZN10TestOutput26printFileAndLineForFailureERK11TestFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = TestOutput::printFileAndLineForFailure(const TestFailure&) &rArr; TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString, int) &rArr; SimpleString::SimpleString(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString, int)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFailureInTest(SimpleString)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFailure(const TestFailure&)
</UL>

<P><STRONG><a name="[bb]"></a>TestOutput::printEclipseErrorInFileOnLine(SimpleString, int)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, testoutput.o(.text._ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestOutput::printEclipseErrorInFileOnLine(SimpleString, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
</UL>
<BR>[Address Reference Count : 6]<UL><LI> teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
<LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
<LI> testoutput.o(.rodata._ZTV10TestOutput)
<LI> testoutput.o(.rodata._ZTV22StringBufferTestOutput)
<LI> testoutput.o(.rodata._ZTV19CompositeTestOutput)
<LI> testoutput.o(.rodata._ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[28f]"></a>TestOutput::printFileAndLineForTestAndFailure(const TestFailure&)</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, testoutput.o(.text._ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = TestOutput::printFileAndLineForTestAndFailure(const TestFailure&) &rArr; TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString, int) &rArr; SimpleString::SimpleString(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString, int)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFailureInTest(SimpleString)
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFailure(const TestFailure&)
</UL>

<P><STRONG><a name="[bc]"></a>TestOutput::printVisualStudioErrorInFileOnLine(SimpleString, int)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, testoutput.o(.text._ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestOutput::printVisualStudioErrorInFileOnLine(SimpleString, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
</UL>
<BR>[Address Reference Count : 6]<UL><LI> teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
<LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
<LI> testoutput.o(.rodata._ZTV10TestOutput)
<LI> testoutput.o(.rodata._ZTV22StringBufferTestOutput)
<LI> testoutput.o(.rodata._ZTV19CompositeTestOutput)
<LI> testoutput.o(.rodata._ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[297]"></a>TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString, int)</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, testoutput.o(.text._ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringi))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString, int) &rArr; SimpleString::SimpleString(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const SimpleString&)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::getWorkingEnvironment()
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFileAndLineForTestAndFailure(const TestFailure&)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFileAndLineForFailure(const TestFailure&)
</UL>

<P><STRONG><a name="[b3]"></a>TestOutput::color()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testoutput.o(.text._ZN10TestOutput5colorEv))
<BR>[Address Reference Count : 5]<UL><LI> teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
<LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
<LI> testoutput.o(.rodata._ZTV10TestOutput)
<LI> testoutput.o(.rodata._ZTV22StringBufferTestOutput)
<LI> testoutput.o(.rodata._ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[b5]"></a>TestOutput::print(const char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testoutput.o(.text._ZN10TestOutput5printEPKc))
<BR>[Address Reference Count : 4]<UL><LI> teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
<LI> testoutput.o(.rodata._ZTV10TestOutput)
<LI> testoutput.o(.rodata._ZTV22StringBufferTestOutput)
<LI> testoutput.o(.rodata._ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[b6]"></a>TestOutput::print(long)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, testoutput.o(.text._ZN10TestOutput5printEl))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = TestOutput::print(long) &rArr; StringFrom(long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(long)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
<LI> testoutput.o(.rodata._ZTV10TestOutput)
<LI> testoutput.o(.rodata._ZTV22StringBufferTestOutput)
<LI> testoutput.o(.rodata._ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[b2]"></a>TestOutput::verbose()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testoutput.o(.text._ZN10TestOutput7verboseEv))
<BR>[Address Reference Count : 5]<UL><LI> teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
<LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
<LI> testoutput.o(.rodata._ZTV10TestOutput)
<LI> testoutput.o(.rodata._ZTV22StringBufferTestOutput)
<LI> testoutput.o(.rodata._ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[2fd]"></a>TestOutput::TestOutput__sub_object()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, testoutput.o(.text._ZN10TestOutputC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleTestOutput::ConsoleTestOutput__sub_object()
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::JUnitTestOutput()
</UL>

<P><STRONG><a name="[ab]"></a>TestOutput::~TestOutput__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testoutput.o(.text._ZN10TestOutputD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.rodata._ZTV10TestOutput)
</UL>
<P><STRONG><a name="[3d7]"></a>TestOutput::~TestOutput()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testoutput.o(.text._ZN10TestOutputD2Ev), UNUSED)

<P><STRONG><a name="[aa]"></a>TestOutput::~TestOutput__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testoutput.o(.text._ZN10TestOutputD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::RunAllTests(int, const char**)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::TeamCityTestOutput()
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::JUnitTestOutput()
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::~JUnitTestOutput()
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::~TeamCityTestOutput()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsideTestRunnerUTest::~OutsideTestRunnerUTest__sub_object()
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsideTestRunnerUTest::OutsideTestRunnerUTest__sub_object()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> testoutput.o(.rodata._ZTV10TestOutput)
<LI> testoutput.o(.rodata._ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[bf]"></a>TestPlugin::preTestAction(UtestShell&, TestResult&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testplugin.o(.text._ZN10TestPlugin13preTestActionER10UtestShellR10TestResult))
<BR>[Address Reference Count : 3]<UL><LI> testplugin.o(.rodata._ZTV10TestPlugin)
<LI> testplugin.o(.rodata._ZTV16SetPointerPlugin)
<LI> testplugin.o(.rodata._ZTV14NullTestPlugin)
</UL>
<P><STRONG><a name="[c1]"></a>TestPlugin::parseArguments(int, const char**, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(.text._ZN10TestPlugin14parseArgumentsEiPPKci))
<BR>[Address Reference Count : 4]<UL><LI> memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
<LI> testplugin.o(.rodata._ZTV10TestPlugin)
<LI> testplugin.o(.rodata._ZTV16SetPointerPlugin)
<LI> testplugin.o(.rodata._ZTV14NullTestPlugin)
</UL>
<P><STRONG><a name="[c0]"></a>TestPlugin::postTestAction(UtestShell&, TestResult&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testplugin.o(.text._ZN10TestPlugin14postTestActionER10UtestShellR10TestResult))
<BR>[Address Reference Count : 2]<UL><LI> testplugin.o(.rodata._ZTV10TestPlugin)
<LI> testplugin.o(.rodata._ZTV14NullTestPlugin)
</UL>
<P><STRONG><a name="[299]"></a>TestPlugin::getPluginByName(const SimpleString&)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, testplugin.o(.text._ZN10TestPlugin15getPluginByNameERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TestPlugin::getPluginByName(const SimpleString&) &rArr; operator ==(const SimpleString&, const SimpleString&)
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ==(const SimpleString&, const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::getPluginByName(const SimpleString&)
</UL>

<P><STRONG><a name="[c4]"></a>TestPlugin::parseAllArguments(int, const char**, int)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, testplugin.o(.text._ZN10TestPlugin17parseAllArgumentsEiPPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TestPlugin::parseAllArguments(int, const char**, int)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
<LI> testplugin.o(.rodata._ZTV10TestPlugin)
<LI> testplugin.o(.rodata._ZTV16SetPointerPlugin)
<LI> testplugin.o(.rodata._ZTV14NullTestPlugin)
</UL>
<P><STRONG><a name="[c5]"></a>TestPlugin::parseAllArguments(int, char**, int)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, testplugin.o(.text._ZN10TestPlugin17parseAllArgumentsEiPPci))
<BR>[Address Reference Count : 4]<UL><LI> memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
<LI> testplugin.o(.rodata._ZTV10TestPlugin)
<LI> testplugin.o(.rodata._ZTV16SetPointerPlugin)
<LI> testplugin.o(.rodata._ZTV14NullTestPlugin)
</UL>
<P><STRONG><a name="[c7]"></a>TestPlugin::removePluginByName(const SimpleString&)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, testplugin.o(.text._ZN10TestPlugin18removePluginByNameERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestPlugin::removePluginByName(const SimpleString&) &rArr; operator ==(const SimpleString&, const SimpleString&)
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ==(const SimpleString&, const SimpleString&)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
<LI> testplugin.o(.rodata._ZTV10TestPlugin)
<LI> testplugin.o(.rodata._ZTV16SetPointerPlugin)
<LI> testplugin.o(.rodata._ZTV14NullTestPlugin)
</UL>
<P><STRONG><a name="[c2]"></a>TestPlugin::runAllPreTestAction(UtestShell&, TestResult&)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, testplugin.o(.text._ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
<LI> testplugin.o(.rodata._ZTV10TestPlugin)
<LI> testplugin.o(.rodata._ZTV16SetPointerPlugin)
</UL>
<P><STRONG><a name="[c3]"></a>TestPlugin::runAllPostTestAction(UtestShell&, TestResult&)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, testplugin.o(.text._ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
<LI> testplugin.o(.rodata._ZTV10TestPlugin)
<LI> testplugin.o(.rodata._ZTV16SetPointerPlugin)
</UL>
<P><STRONG><a name="[ca]"></a>TestPlugin::enable()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testplugin.o(.text._ZN10TestPlugin6enableEv))
<BR>[Address Reference Count : 4]<UL><LI> memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
<LI> testplugin.o(.rodata._ZTV10TestPlugin)
<LI> testplugin.o(.rodata._ZTV16SetPointerPlugin)
<LI> testplugin.o(.rodata._ZTV14NullTestPlugin)
</UL>
<P><STRONG><a name="[c9]"></a>TestPlugin::disable()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testplugin.o(.text._ZN10TestPlugin7disableEv))
<BR>[Address Reference Count : 4]<UL><LI> memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
<LI> testplugin.o(.rodata._ZTV10TestPlugin)
<LI> testplugin.o(.rodata._ZTV16SetPointerPlugin)
<LI> testplugin.o(.rodata._ZTV14NullTestPlugin)
</UL>
<P><STRONG><a name="[2ef]"></a>TestPlugin::getName()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testplugin.o(.text._ZN10TestPlugin7getNameEv))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::removePluginByName(const SimpleString&)
</UL>

<P><STRONG><a name="[c8]"></a>TestPlugin::getNext()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testplugin.o(.text._ZN10TestPlugin7getNextEv))
<BR>[Address Reference Count : 4]<UL><LI> memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
<LI> testplugin.o(.rodata._ZTV10TestPlugin)
<LI> testplugin.o(.rodata._ZTV16SetPointerPlugin)
<LI> testplugin.o(.rodata._ZTV14NullTestPlugin)
</UL>
<P><STRONG><a name="[c6]"></a>TestPlugin::addPlugin(TestPlugin*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testplugin.o(.text._ZN10TestPlugin9addPluginEPS_))
<BR>[Address Reference Count : 4]<UL><LI> memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
<LI> testplugin.o(.rodata._ZTV10TestPlugin)
<LI> testplugin.o(.rodata._ZTV16SetPointerPlugin)
<LI> testplugin.o(.rodata._ZTV14NullTestPlugin)
</UL>
<P><STRONG><a name="[cb]"></a>TestPlugin::isEnabled()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testplugin.o(.text._ZN10TestPlugin9isEnabledEv))
<BR>[Address Reference Count : 4]<UL><LI> memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
<LI> testplugin.o(.rodata._ZTV10TestPlugin)
<LI> testplugin.o(.rodata._ZTV16SetPointerPlugin)
<LI> testplugin.o(.rodata._ZTV14NullTestPlugin)
</UL>
<P><STRONG><a name="[29b]"></a>TestPlugin::TestPlugin(TestPlugin*)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, testplugin.o(.text._ZN10TestPluginC2EPS_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
</UL>

<P><STRONG><a name="[2f6]"></a>TestPlugin::TestPlugin__sub_object(TestPlugin*)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, testplugin.o(.text._ZN10TestPluginC2EPS_), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullTestPlugin::NullTestPlugin()
</UL>

<P><STRONG><a name="[29c]"></a>TestPlugin::TestPlugin(const SimpleString&)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, testplugin.o(.text._ZN10TestPluginC2ERK12SimpleString), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const SimpleString&)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullTestPlugin::instance()
</UL>

<P><STRONG><a name="[302]"></a>TestPlugin::TestPlugin__sub_object(const SimpleString&)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, testplugin.o(.text._ZN10TestPluginC2ERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestPlugin::TestPlugin__sub_object(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString&, MemoryLeakDetector*)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPointerPlugin::SetPointerPlugin(const SimpleString&)
</UL>

<P><STRONG><a name="[be]"></a>TestPlugin::~TestPlugin__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, testplugin.o(.text._ZN10TestPluginD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestPlugin::~TestPlugin__deallocating() &rArr; TestPlugin::~TestPlugin__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::~TestPlugin__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testplugin.o(.rodata._ZTV10TestPlugin)
</UL>
<P><STRONG><a name="[29f]"></a>TestPlugin::~TestPlugin()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, testplugin.o(.text._ZN10TestPluginD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
</UL>

<P><STRONG><a name="[78]"></a>TestPlugin::~TestPlugin__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, testplugin.o(.text._ZN10TestPluginD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TestPlugin::~TestPlugin__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString&, MemoryLeakDetector*)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTestsMain()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPointerPlugin::~SetPointerPlugin__deallocating()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullTestPlugin::~NullTestPlugin__deallocating()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::~TestPlugin__deallocating()
</UL>
<BR>[Address Reference Count : 4]<UL><LI> testplugin.o(.rodata._ZTV10TestPlugin)
<LI> testplugin.o(.rodata._ZTV16SetPointerPlugin)
<LI> testplugin.o(.rodata._ZTV14NullTestPlugin)
<LI> testplugin.o(.text._ZN14NullTestPlugin8instanceEv)
</UL>
<P><STRONG><a name="[d9]"></a>TestResult::addFailure(const TestFailure&)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, testresult.o(.text._ZN10TestResult10addFailureERK11TestFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TestResult::addFailure(const TestFailure&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testresult.o(.rodata._ZTV10TestResult)
</UL>
<P><STRONG><a name="[d6]"></a>TestResult::countCheck()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testresult.o(.text._ZN10TestResult10countCheckEv))
<BR>[Address Reference Count : 1]<UL><LI> testresult.o(.rodata._ZTV10TestResult)
</UL>
<P><STRONG><a name="[cf]"></a>TestResult::testsEnded()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, testresult.o(.text._ZN10TestResult10testsEndedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TestResult::testsEnded()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testresult.o(.rodata._ZTV10TestResult)
</UL>
<P><STRONG><a name="[d8]"></a>TestResult::countIgnored()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testresult.o(.text._ZN10TestResult12countIgnoredEv))
<BR>[Address Reference Count : 1]<UL><LI> testresult.o(.rodata._ZTV10TestResult)
</UL>
<P><STRONG><a name="[ce]"></a>TestResult::testsStarted()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, testresult.o(.text._ZN10TestResult12testsStartedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TestResult::testsStarted()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testresult.o(.rodata._ZTV10TestResult)
</UL>
<P><STRONG><a name="[d7]"></a>TestResult::countFilteredOut()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testresult.o(.text._ZN10TestResult16countFilteredOutEv))
<BR>[Address Reference Count : 1]<UL><LI> testresult.o(.rodata._ZTV10TestResult)
</UL>
<P><STRONG><a name="[d3]"></a>TestResult::currentTestEnded(UtestShell*)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, testresult.o(.text._ZN10TestResult16currentTestEndedEP10UtestShell))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TestResult::currentTestEnded(UtestShell*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testresult.o(.rodata._ZTV10TestResult)
</UL>
<P><STRONG><a name="[d1]"></a>TestResult::currentGroupEnded(UtestShell*)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, testresult.o(.text._ZN10TestResult17currentGroupEndedEP10UtestShell))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TestResult::currentGroupEnded(UtestShell*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testresult.o(.rodata._ZTV10TestResult)
</UL>
<P><STRONG><a name="[d2]"></a>TestResult::currentTestStarted(UtestShell*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, testresult.o(.text._ZN10TestResult18currentTestStartedEP10UtestShell))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TestResult::currentTestStarted(UtestShell*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testresult.o(.rodata._ZTV10TestResult)
</UL>
<P><STRONG><a name="[d0]"></a>TestResult::currentGroupStarted(UtestShell*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, testresult.o(.text._ZN10TestResult19currentGroupStartedEP10UtestShell))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TestResult::currentGroupStarted(UtestShell*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testresult.o(.rodata._ZTV10TestResult)
</UL>
<P><STRONG><a name="[da]"></a>TestResult::print(const char*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testresult.o(.text._ZN10TestResult5printEPKc))
<BR>[Address Reference Count : 1]<UL><LI> testresult.o(.rodata._ZTV10TestResult)
</UL>
<P><STRONG><a name="[d5]"></a>TestResult::countRun()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testresult.o(.text._ZN10TestResult8countRunEv))
<BR>[Address Reference Count : 1]<UL><LI> testresult.o(.rodata._ZTV10TestResult)
</UL>
<P><STRONG><a name="[d4]"></a>TestResult::countTest()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testresult.o(.text._ZN10TestResult9countTestEv))
<BR>[Address Reference Count : 1]<UL><LI> testresult.o(.rodata._ZTV10TestResult)
</UL>
<P><STRONG><a name="[2a0]"></a>TestResult::TestResult(TestOutput&)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, testresult.o(.text._ZN10TestResultC2ER10TestOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TestResult::TestResult(TestOutput&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTests()
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsideTestRunnerUTest::OutsideTestRunnerUTest__sub_object()
</UL>

<P><STRONG><a name="[3d8]"></a>TestResult::TestResult__sub_object(TestOutput&)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, testresult.o(.text._ZN10TestResultC2ER10TestOutput), UNUSED)

<P><STRONG><a name="[cd]"></a>TestResult::~TestResult__deallocating()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testresult.o(.text._ZN10TestResultD0Ev))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testresult.o(.rodata._ZTV10TestResult)
</UL>
<P><STRONG><a name="[34a]"></a>TestResult::~TestResult()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testresult.o(.text._ZN10TestResultD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTests()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsideTestRunnerUTest::~OutsideTestRunnerUTest__sub_object()
</UL>

<P><STRONG><a name="[cc]"></a>TestResult::~TestResult__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testresult.o(.text._ZN10TestResultD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> testresult.o(.rodata._ZTV10TestResult)
</UL>
<P><STRONG><a name="[e2]"></a>UtestShell::assertTrue(bool, const char*, const char*, const char*, const char*, int, const TestTerminator&)</STRONG> (Thumb, 160 bytes, Stack size 80 bytes, utest.o(.text._ZN10UtestShell10assertTrueEbPKcS1_S1_S1_iRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = UtestShell::assertTrue(bool, const char*, const char*, const char*, const char*, int, const TestTerminator&) &rArr; CheckFailure::CheckFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&) &rArr; TestFailure::createUserText(const SimpleString&) &rArr; SimpleString::operator +=(const SimpleString&) &rArr; SimpleString::operator +=(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFailure::CheckFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[2a4]"></a>UtestShell::countCheck()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, utest.o(.text._ZN10UtestShell10countCheckEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>

<P><STRONG><a name="[de]"></a>UtestShell::countTests()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, utest.o(.text._ZN10UtestShell10countTestsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UtestShell::countTests()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[fa]"></a>UtestShell::createTest()</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, utest.o(.text._ZN10UtestShell10createTestEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UtestShell::createTest()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[24c]"></a>UtestShell::getCurrent()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, utest.o(.text._ZN10UtestShell10getCurrentEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = UtestShell::getCurrent() &rArr; OutsideTestRunnerUTest::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsideTestRunnerUTest::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_myFirstUnitTest_API2_Test::testBody()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_myFirstUnitTest_API1_Test::testBody()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::runOneTestInCurrentProcess(TestPlugin*, TestResult&)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningReporter::fail(char*)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailableMemoryAllocator::checkAllFailedAllocsWereDone()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMemoryAllocator::alloc_memory(unsigned, const char*, int)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CppUTestStore(void**)
</UL>

<P><STRONG><a name="[fc]"></a>UtestShell::runOneTest(TestPlugin*, TestResult&)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, utest.o(.text._ZN10UtestShell10runOneTestEP10TestPluginR10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UtestShell::runOneTest(TestPlugin*, TestResult&)
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IgnoredUtestShell::runOneTest(TestPlugin*, TestResult&)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[fb]"></a>UtestShell::destroyTest(Utest*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, utest.o(.text._ZN10UtestShell11destroyTestEP5Utest))
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[f0]"></a>UtestShell::assertEquals(bool, const char*, const char*, const char*, const char*, int, const TestTerminator&)</STRONG> (Thumb, 160 bytes, Stack size 80 bytes, utest.o(.text._ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_iRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = UtestShell::assertEquals(bool, const char*, const char*, const char*, const char*, int, const TestTerminator&) &rArr; CheckEqualFailure::CheckEqualFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&) &rArr; TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, TestFailure::DifferenceFormat) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEqualFailure::CheckEqualFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[2a2]"></a>UtestShell::getTestResult()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, utest.o(.text._ZN10UtestShell13getTestResultEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = UtestShell::getTestResult() &rArr; OutsideTestRunnerUTest::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsideTestRunnerUTest::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::failWith(const TestFailure&, const TestTerminator&)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::print(const char*, const char*, int)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::fail(const char*, const char*, int, const TestTerminator&)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertUnsignedLongLongsEqual(unsigned long long, unsigned long long, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertFunctionPointersEqual(void(*)(), void(*)(), const char*, const char*, int, const TestTerminator&)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::runOneTestInCurrentProcess(TestPlugin*, TestResult&)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertUnsignedLongsEqual(unsigned long, unsigned long, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNoCaseContains(const char*, const char*, const char*, const char*, int)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertSignedBytesEqual(signed char, signed char, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNoCaseEqual(const char*, const char*, const char*, const char*, int)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertLongLongsEqual(long long, long long, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertPointersEqual(const void*, const void*, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertDoublesEqual(double, double, double, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrContains(const char*, const char*, const char*, const char*, int)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertBinaryEqual(const void*, const void*, unsigned, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertLongsEqual(long, long, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNEqual(const char*, const char*, unsigned, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrEqual(const char*, const char*, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertBitsEqual(unsigned long, unsigned long, unsigned long, unsigned, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertEquals(bool, const char*, const char*, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertTrue(bool, const char*, const char*, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::countCheck()
</UL>

<P><STRONG><a name="[f9]"></a>UtestShell::setRunIgnored()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utest.o(.text._ZN10UtestShell13setRunIgnoredEv))
<BR>[Address Reference Count : 4]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[3d9]"></a>UtestShell::setTestResult(TestResult*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, utest.o(.text._ZN10UtestShell13setTestResultEP10TestResult), UNUSED)

<P><STRONG><a name="[3da]"></a>UtestShell::setCrashMethod(void(*)())</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, utest.o(.text._ZN10UtestShell14setCrashMethodEPFvvE), UNUSED)

<P><STRONG><a name="[3db]"></a>UtestShell::setCurrentTest(UtestShell*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, utest.o(.text._ZN10UtestShell14setCurrentTestEPS_), UNUSED)

<P><STRONG><a name="[f2]"></a>UtestShell::assertBitsEqual(unsigned long, unsigned long, unsigned long, unsigned, const char*, const char*, int, const TestTerminator&)</STRONG> (Thumb, 126 bytes, Stack size 88 bytes, utest.o(.text._ZN10UtestShell15assertBitsEqualEmmmjPKcS1_iRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = UtestShell::assertBitsEqual(unsigned long, unsigned long, unsigned long, unsigned, const char*, const char*, int, const TestTerminator&) &rArr; BitsEqualFailure::BitsEqualFailure(UtestShell*, const char*, int, unsigned long, unsigned long, unsigned long, unsigned, const SimpleString&) &rArr; TestFailure::createButWasString(const SimpleString&, const SimpleString&) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsEqualFailure::BitsEqualFailure(UtestShell*, const char*, int, unsigned long, unsigned long, unsigned long, unsigned, const SimpleString&)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[e3]"></a>UtestShell::assertCstrEqual(const char*, const char*, const char*, const char*, int, const TestTerminator&)</STRONG> (Thumb, 198 bytes, Stack size 80 bytes, utest.o(.text._ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_iRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = UtestShell::assertCstrEqual(const char*, const char*, const char*, const char*, int, const TestTerminator&) &rArr; StringEqualFailure::StringEqualFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&) &rArr; TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, TestFailure::DifferenceFormat) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrCmp(const char*, const char*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::StringEqualFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[e4]"></a>UtestShell::assertCstrNEqual(const char*, const char*, unsigned, const char*, const char*, int, const TestTerminator&)</STRONG> (Thumb, 204 bytes, Stack size 88 bytes, utest.o(.text._ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_iRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = UtestShell::assertCstrNEqual(const char*, const char*, unsigned, const char*, const char*, int, const TestTerminator&) &rArr; StringEqualFailure::StringEqualFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&) &rArr; TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, TestFailure::DifferenceFormat) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrNCmp(const char*, const char*, unsigned)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::StringEqualFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[e8]"></a>UtestShell::assertLongsEqual(long, long, const char*, const char*, int, const TestTerminator&)</STRONG> (Thumb, 116 bytes, Stack size 80 bytes, utest.o(.text._ZN10UtestShell16assertLongsEqualEllPKcS1_iRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = UtestShell::assertLongsEqual(long, long, const char*, const char*, int, const TestTerminator&) &rArr; LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, int, long, long, const SimpleString&) &rArr; TestFailure::createButWasString(const SimpleString&, const SimpleString&) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, int, long, long, const SimpleString&)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[3dc]"></a>UtestShell::resetCrashMethod()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, utest.o(.text._ZN10UtestShell16resetCrashMethodEv), UNUSED)

<P><STRONG><a name="[f1]"></a>UtestShell::assertBinaryEqual(const void*, const void*, unsigned, const char*, const char*, int, const TestTerminator&)</STRONG> (Thumb, 208 bytes, Stack size 88 bytes, utest.o(.text._ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_iRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = UtestShell::assertBinaryEqual(const void*, const void*, unsigned, const char*, const char*, int, const TestTerminator&) &rArr; BinaryEqualFailure::BinaryEqualFailure(UtestShell*, const char*, int, const unsigned char*, const unsigned char*, unsigned, const SimpleString&) &rArr; StringFromBinaryOrNull(const unsigned char*, unsigned) &rArr; StringFromBinary(const unsigned char*, unsigned) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::MemCmp(const void*, const void*, unsigned)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinaryEqualFailure::BinaryEqualFailure(UtestShell*, const char*, int, const unsigned char*, const unsigned char*, unsigned, const SimpleString&)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[e6]"></a>UtestShell::assertCstrContains(const char*, const char*, const char*, const char*, int)</STRONG> (Thumb, 328 bytes, Stack size 96 bytes, utest.o(.text._ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = UtestShell::assertCstrContains(const char*, const char*, const char*, const char*, int) &rArr; ContainsFailure::ContainsFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::contains(const SimpleString&) const
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsFailure::ContainsFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[ef]"></a>UtestShell::assertDoublesEqual(double, double, double, const char*, const char*, int, const TestTerminator&)</STRONG> (Thumb, 184 bytes, Stack size 88 bytes, utest.o(.text._ZN10UtestShell18assertDoublesEqualEdddPKcS1_iRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = UtestShell::assertDoublesEqual(double, double, double, const char*, const char*, int, const TestTerminator&) &rArr; DoublesEqualFailure::DoublesEqualFailure(UtestShell*, const char*, int, double, double, double, const SimpleString&) &rArr; StringFrom(double, int) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoublesEqualFailure::DoublesEqualFailure(UtestShell*, const char*, int, double, double, double, const SimpleString&)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doubles_equal(double, double, double)
</UL>
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[ed]"></a>UtestShell::assertPointersEqual(const void*, const void*, const char*, const char*, int, const TestTerminator&)</STRONG> (Thumb, 168 bytes, Stack size 80 bytes, utest.o(.text._ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_iRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = UtestShell::assertPointersEqual(const void*, const void*, const char*, const char*, int, const TestTerminator&) &rArr; EqualsFailure::EqualsFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&) &rArr; TestFailure::createButWasString(const SimpleString&, const SimpleString&) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(const void*)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::EqualsFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[ea]"></a>UtestShell::assertLongLongsEqual(long long, long long, const char*, const char*, int, const TestTerminator&)</STRONG> (Thumb, 134 bytes, Stack size 88 bytes, utest.o(.text._ZN10UtestShell20assertLongLongsEqualExxPKcS1_iRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = UtestShell::assertLongLongsEqual(long long, long long, const char*, const char*, int, const TestTerminator&) &rArr; LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, int, long long, long long, const SimpleString&) &rArr; TestFailure::createButWasString(const SimpleString&, const SimpleString&) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, int, long long, long long, const SimpleString&)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[e5]"></a>UtestShell::assertCstrNoCaseEqual(const char*, const char*, const char*, const char*, int)</STRONG> (Thumb, 244 bytes, Stack size 88 bytes, utest.o(.text._ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = UtestShell::assertCstrNoCaseEqual(const char*, const char*, const char*, const char*, int) &rArr; StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&) &rArr; TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, TestFailure::DifferenceFormat) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::equalsNoCase(const SimpleString&) const
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[ec]"></a>UtestShell::assertSignedBytesEqual(signed char, signed char, const char*, const char*, int, const TestTerminator&)</STRONG> (Thumb, 116 bytes, Stack size 80 bytes, utest.o(.text._ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_iRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = UtestShell::assertSignedBytesEqual(signed char, signed char, const char*, const char*, int, const TestTerminator&) &rArr; SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, int, signed char, signed char, const SimpleString&) &rArr; HexStringFrom(signed char) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, int, signed char, signed char, const SimpleString&)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[f8]"></a>UtestShell::setRunInSeperateProcess()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utest.o(.text._ZN10UtestShell23setRunInSeperateProcessEv))
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[e7]"></a>UtestShell::assertCstrNoCaseContains(const char*, const char*, const char*, const char*, int)</STRONG> (Thumb, 328 bytes, Stack size 96 bytes, utest.o(.text._ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = UtestShell::assertCstrNoCaseContains(const char*, const char*, const char*, const char*, int) &rArr; ContainsFailure::ContainsFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::containsNoCase(const SimpleString&) const
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsFailure::ContainsFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[e9]"></a>UtestShell::assertUnsignedLongsEqual(unsigned long, unsigned long, const char*, const char*, int, const TestTerminator&)</STRONG> (Thumb, 116 bytes, Stack size 80 bytes, utest.o(.text._ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_iRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = UtestShell::assertUnsignedLongsEqual(unsigned long, unsigned long, const char*, const char*, int, const TestTerminator&) &rArr; UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, int, unsigned long, unsigned long, const SimpleString&) &rArr; TestFailure::createButWasString(const SimpleString&, const SimpleString&) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, int, unsigned long, unsigned long, const SimpleString&)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[fd]"></a>UtestShell::runOneTestInCurrentProcess(TestPlugin*, TestResult&)</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, utest.o(.text._ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = UtestShell::runOneTestInCurrentProcess(TestPlugin*, TestResult&) &rArr; UtestShell::getCurrent() &rArr; OutsideTestRunnerUTest::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getCurrent()
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[ee]"></a>UtestShell::assertFunctionPointersEqual(void(*)(), void(*)(), const char*, const char*, int, const TestTerminator&)</STRONG> (Thumb, 168 bytes, Stack size 80 bytes, utest.o(.text._ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_iRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = UtestShell::assertFunctionPointersEqual(void(*)(), void(*)(), const char*, const char*, int, const TestTerminator&) &rArr; EqualsFailure::EqualsFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&) &rArr; TestFailure::createButWasString(const SimpleString&, const SimpleString&) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(void(*)())
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::EqualsFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[eb]"></a>UtestShell::assertUnsignedLongLongsEqual(unsigned long long, unsigned long long, const char*, const char*, int, const TestTerminator&)</STRONG> (Thumb, 134 bytes, Stack size 88 bytes, utest.o(.text._ZN10UtestShell28assertUnsignedLongLongsEqualEyyPKcS1_iRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = UtestShell::assertUnsignedLongLongsEqual(unsigned long long, unsigned long long, const char*, const char*, int, const TestTerminator&) &rArr; UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, int, unsigned long long, unsigned long long, const SimpleString&) &rArr; StringFrom(unsigned long long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, int, unsigned long long, unsigned long long, const SimpleString&)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[f3]"></a>UtestShell::fail(const char*, const char*, int, const TestTerminator&)</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, utest.o(.text._ZN10UtestShell4failEPKcS1_iRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = UtestShell::fail(const char*, const char*, int, const TestTerminator&) &rArr; FailFailure::FailFailure(UtestShell*, const char*, int, const SimpleString&) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailFailure::FailFailure(UtestShell*, const char*, int, const SimpleString&)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[375]"></a>UtestShell::crash()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, utest.o(.text._ZN10UtestShell5crashEv))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrashOnAllocationAllocator::alloc_memory(unsigned, const char*, int)
</UL>

<P><STRONG><a name="[f5]"></a>UtestShell::print(const char*, const char*, int)</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, utest.o(.text._ZN10UtestShell5printEPKcS1_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = UtestShell::print(const char*, const char*, int) &rArr; StringFrom(int) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(int)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[f6]"></a>UtestShell::print(const SimpleString&, const char*, int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, utest.o(.text._ZN10UtestShell5printERK12SimpleStringPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UtestShell::print(const SimpleString&, const char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
</UL>
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[dc]"></a>UtestShell::addTest(UtestShell*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utest.o(.text._ZN10UtestShell7addTestEPS_))
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[f4]"></a>UtestShell::exitTest(const TestTerminator&)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, utest.o(.text._ZN10UtestShell8exitTestERK14TestTerminator))
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[fe]"></a>UtestShell::failWith(const TestFailure&)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, utest.o(.text._ZN10UtestShell8failWithERK11TestFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = UtestShell::failWith(const TestFailure&) &rArr; _Unwind_Resume &rArr; _ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb &rArr; unw_init_local &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[ff]"></a>UtestShell::failWith(const TestFailure&, const TestTerminator&)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, utest.o(.text._ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = UtestShell::failWith(const TestFailure&, const TestTerminator&) &rArr; UtestShell::getTestResult() &rArr; OutsideTestRunnerUTest::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[3dd]"></a>UtestShell::UtestShell(const char*, const char*, const char*, int)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, utest.o(.text._ZN10UtestShellC2EPKcS1_S1_i), UNUSED)

<P><STRONG><a name="[3de]"></a>UtestShell::UtestShell__sub_object(const char*, const char*, const char*, int)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, utest.o(.text._ZN10UtestShellC2EPKcS1_S1_i), UNUSED)

<P><STRONG><a name="[3df]"></a>UtestShell::UtestShell(const char*, const char*, const char*, int, UtestShell*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, utest.o(.text._ZN10UtestShellC2EPKcS1_S1_iPS_), UNUSED)

<P><STRONG><a name="[3e0]"></a>UtestShell::UtestShell__sub_object(const char*, const char*, const char*, int, UtestShell*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, utest.o(.text._ZN10UtestShellC2EPKcS1_S1_iPS_), UNUSED)

<P><STRONG><a name="[3e1]"></a>UtestShell::UtestShell()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, utest.o(.text._ZN10UtestShellC2Ev), UNUSED)

<P><STRONG><a name="[381]"></a>UtestShell::UtestShell__sub_object()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, utest.o(.text._ZN10UtestShellC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UtestShell::UtestShell__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_myFirstUnitTest_API2_TestShell::TEST_myFirstUnitTest_API2_TestShell__sub_object()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_myFirstUnitTest_API1_TestShell::TEST_myFirstUnitTest_API1_TestShell__sub_object()
</UL>

<P><STRONG><a name="[db]"></a>UtestShell::~UtestShell__deallocating()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utest.o(.text._ZN10UtestShellD0Ev))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.rodata._ZTV10UtestShell)
</UL>
<P><STRONG><a name="[3e2]"></a>UtestShell::~UtestShell()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utest.o(.text._ZN10UtestShellD2Ev), UNUSED)

<P><STRONG><a name="[6f]"></a>UtestShell::~UtestShell__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utest.o(.text._ZN10UtestShellD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_myFirstUnitTest_API2_TestShell::~TEST_myFirstUnitTest_API2_TestShell__deallocating()
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_myFirstUnitTest_API1_TestShell::~TEST_myFirstUnitTest_API1_TestShell__deallocating()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.text._GLOBAL__sub_I_UnitTest.cpp)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
</UL>
<P><STRONG><a name="[3e3]"></a>IgnoredUtestShell::~IgnoredUtestShell()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utest.o(.text._ZN10UtestShellD2Ev), UNUSED)

<P><STRONG><a name="[3e4]"></a>IgnoredUtestShell::~IgnoredUtestShell__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utest.o(.text._ZN10UtestShellD2Ev), UNUSED)

<P><STRONG><a name="[3e5]"></a>ExecFunctionTestShell::~ExecFunctionTestShell()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utest.o(.text._ZN10UtestShellD2Ev), UNUSED)

<P><STRONG><a name="[3e6]"></a>ExecFunctionTestShell::~ExecFunctionTestShell__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utest.o(.text._ZN10UtestShellD2Ev), UNUSED)

<P><STRONG><a name="[2bc]"></a>__cxxabiv1::__enum_type_info::~__enum_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::type_info::~type_info__sub_object()
</UL>

<P><STRONG><a name="[3e7]"></a>__cxxabiv1::__enum_type_info::~__enum_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[3e8]"></a>__cxxabiv1::__shim_type_info::~__shim_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[1b7]"></a>__cxxabiv1::__shim_type_info::~__shim_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev))
<BR>[Address Reference Count : 3]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[3e9]"></a>__cxxabiv1::__array_type_info::~__array_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[3ea]"></a>__cxxabiv1::__array_type_info::~__array_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[3eb]"></a>__cxxabiv1::__class_type_info::~__class_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[3ec]"></a>__cxxabiv1::__class_type_info::~__class_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[3ed]"></a>__cxxabiv1::__pbase_type_info::~__pbase_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[3ee]"></a>__cxxabiv1::__pbase_type_info::~__pbase_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[3ef]"></a>__cxxabiv1::__pointer_type_info::~__pointer_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[3f0]"></a>__cxxabiv1::__pointer_type_info::~__pointer_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[3f1]"></a>__cxxabiv1::__function_type_info::~__function_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[3f2]"></a>__cxxabiv1::__function_type_info::~__function_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[3f3]"></a>__cxxabiv1::__si_class_type_info::~__si_class_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[3f4]"></a>__cxxabiv1::__si_class_type_info::~__si_class_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[3f5]"></a>__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[3f6]"></a>__cxxabiv1::__vmi_class_type_info::~__vmi_class_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[3f7]"></a>__cxxabiv1::__fundamental_type_info::~__fundamental_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[3f8]"></a>__cxxabiv1::__fundamental_type_info::~__fundamental_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[3f9]"></a>__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[3fa]"></a>__cxxabiv1::__pointer_to_member_type_info::~__pointer_to_member_type_info__sub_object()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv116__shim_type_infoD2Ev), UNUSED)

<P><STRONG><a name="[1b8]"></a>__cxxabiv1::__class_type_info::~__class_type_info__deallocating()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv117__class_type_infoD0Ev))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
</UL>
<P><STRONG><a name="[2be]"></a>__cxxabiv1::__free_with_fallback(void*)</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, fallback_malloc.cpp.o(.text._ZN10__cxxabiv120__free_with_fallbackEPv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::fallback_free(void*)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[1bf]"></a>__cxxabiv1::__si_class_type_info::~__si_class_type_info__deallocating()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv120__si_class_type_infoD0Ev))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[3a3]"></a>__cxxabiv1::__isOurExceptionClass(const _Unwind_Control_Block*)</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text._ZN10__cxxabiv121__isOurExceptionClassEPK21_Unwind_Control_Block))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gxx_personality_v0
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[2c0]"></a>__cxxabiv1::__calloc_with_fallback(unsigned, unsigned)</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, fallback_malloc.cpp.o(.text._ZN10__cxxabiv122__calloc_with_fallbackEjj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::fallback_malloc(unsigned)
</UL>

<P><STRONG><a name="[1c3]"></a>__cxxabiv1::__fundamental_type_info::~__fundamental_type_info__deallocating()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZN10__cxxabiv123__fundamental_type_infoD0Ev))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
</UL>
<P><STRONG><a name="[2c2]"></a>__cxxabiv1::__aligned_free_with_fallback(void*)</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, fallback_malloc.cpp.o(.text._ZN10__cxxabiv128__aligned_free_with_fallbackEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__aligned_free_with_fallback(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::fallback_free(void*)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_decrement_exception_refcount
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
</UL>

<P><STRONG><a name="[2c3]"></a>__cxxabiv1::__aligned_malloc_with_fallback(unsigned)</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, fallback_malloc.cpp.o(.text._ZN10__cxxabiv130__aligned_malloc_with_fallbackEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__aligned_malloc_with_fallback(unsigned) &rArr; posix_memalign &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posix_memalign
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::fallback_malloc(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_dependent_exception
</UL>

<P><STRONG><a name="[2ba]"></a>FailFailure::FailFailure(UtestShell*, const char*, int, const SimpleString&)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, testfailure.o(.text._ZN11FailFailureC2EP10UtestShellPKciRK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = FailFailure::FailFailure(UtestShell*, const char*, int, const SimpleString&) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure__sub_object(UtestShell*, const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::fail(const char*, const char*, int, const TestTerminator&)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningReporter::fail(char*)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailableMemoryAllocator::checkAllFailedAllocsWereDone()
</UL>

<P><STRONG><a name="[3fb]"></a>FailFailure::FailFailure__sub_object(UtestShell*, const char*, int, const SimpleString&)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, testfailure.o(.text._ZN11FailFailureC2EP10UtestShellPKciRK12SimpleString), UNUSED)

<P><STRONG><a name="[102]"></a>FailFailure::~FailFailure__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, testfailure.o(.text._ZN11FailFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FailFailure::~FailFailure__deallocating() &rArr; TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.rodata._ZTV11FailFailure)
</UL>
<P><STRONG><a name="[31c]"></a>SimpleMutex::SimpleMutex()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, simplemutex.o(.text._ZN11SimpleMutexC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SimpleMutex::SimpleMutex()
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure*)
</UL>

<P><STRONG><a name="[3fc]"></a>SimpleMutex::SimpleMutex__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, simplemutex.o(.text._ZN11SimpleMutexC2Ev), UNUSED)

<P><STRONG><a name="[2cf]"></a>SimpleMutex::~SimpleMutex()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, simplemutex.o(.text._ZN11SimpleMutexD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::~MemoryLeakDetector()
</UL>

<P><STRONG><a name="[3fd]"></a>SimpleMutex::~SimpleMutex__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, simplemutex.o(.text._ZN11SimpleMutexD2Ev), UNUSED)

<P><STRONG><a name="[2d0]"></a>TestFailure::createUserText(const SimpleString&)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, testfailure.o(.text._ZN11TestFailure14createUserTextERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = TestFailure::createUserText(const SimpleString&) &rArr; SimpleString::operator +=(const SimpleString&) &rArr; SimpleString::operator +=(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::isEmpty() const
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, int, unsigned long long, unsigned long long, const SimpleString&)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, int, unsigned long, unsigned long, const SimpleString&)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, int, signed char, signed char, const SimpleString&)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, int, long long, long long, const SimpleString&)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoublesEqualFailure::DoublesEqualFailure(UtestShell*, const char*, int, double, double, double, const SimpleString&)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::StringEqualFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinaryEqualFailure::BinaryEqualFailure(UtestShell*, const char*, int, const unsigned char*, const unsigned char*, unsigned, const SimpleString&)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, int, long, long, const SimpleString&)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEqualFailure::CheckEqualFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsEqualFailure::BitsEqualFailure(UtestShell*, const char*, int, unsigned long, unsigned long, unsigned long, unsigned, const SimpleString&)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsFailure::ContainsFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::EqualsFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::EqualsFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFailure::CheckFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
</UL>

<P><STRONG><a name="[2d2]"></a>TestFailure::createButWasString(const SimpleString&, const SimpleString&)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, testfailure.o(.text._ZN11TestFailure18createButWasStringERK12SimpleStringS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = TestFailure::createButWasString(const SimpleString&, const SimpleString&) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, int, unsigned long long, unsigned long long, const SimpleString&)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, int, unsigned long, unsigned long, const SimpleString&)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, int, signed char, signed char, const SimpleString&)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, int, long long, long long, const SimpleString&)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoublesEqualFailure::DoublesEqualFailure(UtestShell*, const char*, int, double, double, double, const SimpleString&)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::StringEqualFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinaryEqualFailure::BinaryEqualFailure(UtestShell*, const char*, int, const unsigned char*, const unsigned char*, unsigned, const SimpleString&)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, int, long, long, const SimpleString&)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEqualFailure::CheckEqualFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsEqualFailure::BitsEqualFailure(UtestShell*, const char*, int, unsigned long, unsigned long, unsigned long, unsigned, const SimpleString&)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::EqualsFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::EqualsFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
</UL>

<P><STRONG><a name="[2d3]"></a>TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, TestFailure::DifferenceFormat)</STRONG> (Thumb, 576 bytes, Stack size 48 bytes, testfailure.o(.text._ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjNS_16DifferenceFormatE))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, TestFailure::DifferenceFormat) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned, unsigned) const
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +(const SimpleString&) const
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::copyToBuffer(char*, unsigned) const
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::StringEqualFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinaryEqualFailure::BinaryEqualFailure(UtestShell*, const char*, int, const unsigned char*, const unsigned char*, unsigned, const SimpleString&)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEqualFailure::CheckEqualFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
</UL>

<P><STRONG><a name="[2d6]"></a>TestFailure::TestFailure(UtestShell*, const char*, int)</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, testfailure.o(.text._ZN11TestFailureC2EP10UtestShellPKci), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getName() const
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getLineNumber() const
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getFile() const
</UL>

<P><STRONG><a name="[2ce]"></a>TestFailure::TestFailure__sub_object(UtestShell*, const char*, int)</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, testfailure.o(.text._ZN11TestFailureC2EP10UtestShellPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TestFailure::TestFailure__sub_object(UtestShell*, const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailFailure::FailFailure(UtestShell*, const char*, int, const SimpleString&)
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, int, unsigned long long, unsigned long long, const SimpleString&)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, int, unsigned long, unsigned long, const SimpleString&)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, int, signed char, signed char, const SimpleString&)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, int, long long, long long, const SimpleString&)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoublesEqualFailure::DoublesEqualFailure(UtestShell*, const char*, int, double, double, double, const SimpleString&)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::StringEqualFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinaryEqualFailure::BinaryEqualFailure(UtestShell*, const char*, int, const unsigned char*, const unsigned char*, unsigned, const SimpleString&)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, int, long, long, const SimpleString&)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEqualFailure::CheckEqualFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsEqualFailure::BitsEqualFailure(UtestShell*, const char*, int, unsigned long, unsigned long, unsigned long, unsigned, const SimpleString&)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsFailure::ContainsFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::EqualsFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::EqualsFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFailure::CheckFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
</UL>

<P><STRONG><a name="[2da]"></a>TestFailure::TestFailure(UtestShell*, const char*, int, const SimpleString&)</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, testfailure.o(.text._ZN11TestFailureC2EP10UtestShellPKciRK12SimpleString), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getName() const
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getLineNumber() const
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const SimpleString&)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getFile() const
</UL>

<P><STRONG><a name="[3fe]"></a>TestFailure::TestFailure__sub_object(UtestShell*, const char*, int, const SimpleString&)</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, testfailure.o(.text._ZN11TestFailureC2EP10UtestShellPKciRK12SimpleString), UNUSED)

<P><STRONG><a name="[285]"></a>TestFailure::TestFailure(UtestShell*, const SimpleString&)</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, testfailure.o(.text._ZN11TestFailureC2EP10UtestShellRK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = TestFailure::TestFailure(UtestShell*, const SimpleString&) &rArr; UtestShell::getName() const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getName() const
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getLineNumber() const
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const SimpleString&)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getFile() const
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::postTestAction(UtestShell&, TestResult&)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL30DummyRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult
</UL>

<P><STRONG><a name="[3ff]"></a>TestFailure::TestFailure__sub_object(UtestShell*, const SimpleString&)</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, testfailure.o(.text._ZN11TestFailureC2EP10UtestShellRK12SimpleString), UNUSED)

<P><STRONG><a name="[2db]"></a>TestFailure::TestFailure(const TestFailure&)</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, testfailure.o(.text._ZN11TestFailureC2ERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = TestFailure::TestFailure(const TestFailure&) &rArr; SimpleString::SimpleString(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::printFailure(const TestFailure&)
</UL>

<P><STRONG><a name="[400]"></a>TestFailure::TestFailure__sub_object(const TestFailure&)</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, testfailure.o(.text._ZN11TestFailureC2ERKS_), UNUSED)

<P><STRONG><a name="[10a]"></a>TestFailure::~TestFailure__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, testfailure.o(.text._ZN11TestFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TestFailure::~TestFailure__deallocating() &rArr; TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.rodata._ZTV11TestFailure)
</UL>
<P><STRONG><a name="[286]"></a>TestFailure::~TestFailure()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, testfailure.o(.text._ZN11TestFailureD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestFailure::~TestFailure()
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::postTestAction(UtestShell&, TestResult&)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL30DummyRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult
</UL>

<P><STRONG><a name="[101]"></a>TestFailure::~TestFailure__sub_object()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, testfailure.o(.text._ZN11TestFailureD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::fail(const char*, const char*, int, const TestTerminator&)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertUnsignedLongLongsEqual(unsigned long long, unsigned long long, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertFunctionPointersEqual(void(*)(), void(*)(), const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertUnsignedLongsEqual(unsigned long, unsigned long, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNoCaseContains(const char*, const char*, const char*, const char*, int)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertSignedBytesEqual(signed char, signed char, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNoCaseEqual(const char*, const char*, const char*, const char*, int)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertLongLongsEqual(long long, long long, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertPointersEqual(const void*, const void*, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertDoublesEqual(double, double, double, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrContains(const char*, const char*, const char*, const char*, int)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertBinaryEqual(const void*, const void*, unsigned, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertLongsEqual(long, long, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNEqual(const char*, const char*, unsigned, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrEqual(const char*, const char*, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertBitsEqual(unsigned long, unsigned long, unsigned long, unsigned, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertEquals(bool, const char*, const char*, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertTrue(bool, const char*, const char*, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningReporter::fail(char*)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailFailure::FailFailure(UtestShell*, const char*, int, const SimpleString&)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::~UnsignedLongLongsEqualFailure__deallocating()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, int, unsigned long long, unsigned long long, const SimpleString&)
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::~UnsignedLongsEqualFailure__deallocating()
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, int, unsigned long, unsigned long, const SimpleString&)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeatureUnsupportedFailure::~FeatureUnsupportedFailure__deallocating()
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualNoCaseFailure::~StringEqualNoCaseFailure__deallocating()
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::~SignedBytesEqualFailure__deallocating()
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, int, signed char, signed char, const SimpleString&)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::~LongLongsEqualFailure__deallocating()
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, int, long long, long long, const SimpleString&)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoublesEqualFailure::~DoublesEqualFailure__deallocating()
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoublesEqualFailure::DoublesEqualFailure(UtestShell*, const char*, int, double, double, double, const SimpleString&)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::~StringEqualFailure__deallocating()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::StringEqualFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinaryEqualFailure::~BinaryEqualFailure__deallocating()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinaryEqualFailure::BinaryEqualFailure(UtestShell*, const char*, int, const unsigned char*, const unsigned char*, unsigned, const SimpleString&)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::~LongsEqualFailure__deallocating()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, int, long, long, const SimpleString&)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEqualFailure::~CheckEqualFailure__deallocating()
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEqualFailure::CheckEqualFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsEqualFailure::~BitsEqualFailure__deallocating()
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsEqualFailure::BitsEqualFailure(UtestShell*, const char*, int, unsigned long, unsigned long, unsigned long, unsigned, const SimpleString&)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsFailure::~ContainsFailure__deallocating()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsFailure::ContainsFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::~EqualsFailure__deallocating()
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::EqualsFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::EqualsFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFailure::~CheckFailure__deallocating()
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFailure::CheckFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__deallocating()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailFailure::~FailFailure__deallocating()
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailableMemoryAllocator::checkAllFailedAllocsWereDone()
</UL>
<BR>[Address Reference Count : 17]<UL><LI> testfailure.o(.rodata._ZTV11TestFailure)
<LI> testfailure.o(.rodata._ZTV13EqualsFailure)
<LI> testfailure.o(.rodata._ZTV19DoublesEqualFailure)
<LI> testfailure.o(.rodata._ZTV17CheckEqualFailure)
<LI> testfailure.o(.rodata._ZTV15ContainsFailure)
<LI> testfailure.o(.rodata._ZTV12CheckFailure)
<LI> testfailure.o(.rodata._ZTV11FailFailure)
<LI> testfailure.o(.rodata._ZTV17LongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV25UnsignedLongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV21LongLongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV29UnsignedLongLongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV23SignedBytesEqualFailure)
<LI> testfailure.o(.rodata._ZTV18StringEqualFailure)
<LI> testfailure.o(.rodata._ZTV24StringEqualNoCaseFailure)
<LI> testfailure.o(.rodata._ZTV18BinaryEqualFailure)
<LI> testfailure.o(.rodata._ZTV16BitsEqualFailure)
<LI> testfailure.o(.rodata._ZTV25FeatureUnsupportedFailure)
</UL>
<P><STRONG><a name="[2a3]"></a>CheckFailure::CheckFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, testfailure.o(.text._ZN12CheckFailureC2EP10UtestShellPKciRK12SimpleStringS6_S6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = CheckFailure::CheckFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&) &rArr; TestFailure::createUserText(const SimpleString&) &rArr; SimpleString::operator +=(const SimpleString&) &rArr; SimpleString::operator +=(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure__sub_object(UtestShell*, const char*, int)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertTrue(bool, const char*, const char*, const char*, const char*, int, const TestTerminator&)
</UL>

<P><STRONG><a name="[401]"></a>CheckFailure::CheckFailure__sub_object(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, testfailure.o(.text._ZN12CheckFailureC2EP10UtestShellPKciRK12SimpleStringS6_S6_), UNUSED)

<P><STRONG><a name="[10b]"></a>CheckFailure::~CheckFailure__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, testfailure.o(.text._ZN12CheckFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CheckFailure::~CheckFailure__deallocating() &rArr; TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.rodata._ZTV12CheckFailure)
</UL>
<P><STRONG><a name="[2dc]"></a>SimpleString::copyToNewBuffer(const char*, unsigned)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, simplestring.o(.text._ZN12SimpleString15copyToNewBufferEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrNCpy(char*, const char*, unsigned)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrLen(const char*)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::allocStringBuffer(unsigned, const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const SimpleString&)
</UL>

<P><STRONG><a name="[25d]"></a>SimpleString::allocStringBuffer(unsigned, const char*, int)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, simplestring.o(.text._ZN12SimpleString17allocStringBufferEjPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::getStringAllocator()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(const char*, const char*)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::getEmptyString() const
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*, unsigned)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::copyToNewBuffer(const char*, unsigned)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VStringFromFormat(const char*, std::__va_list)
</UL>

<P><STRONG><a name="[2df]"></a>SimpleString::getStringAllocator()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, simplestring.o(.text._ZN12SimpleString18getStringAllocatorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultNewArrayAllocator()
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::deallocStringBuffer(char*, const char*, int)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::allocStringBuffer(unsigned, const char*, int)
</UL>

<P><STRONG><a name="[402]"></a>SimpleString::setStringAllocator(TestMemoryAllocator*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, simplestring.o(.text._ZN12SimpleString18setStringAllocatorEP19TestMemoryAllocator), UNUSED)

<P><STRONG><a name="[25e]"></a>SimpleString::deallocStringBuffer(char*, const char*, int)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, simplestring.o(.text._ZN12SimpleString19deallocStringBufferEPcPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = SimpleString::deallocStringBuffer(char*, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::getStringAllocator()
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(const char*, const char*)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VStringFromFormat(const char*, std::__va_list)
</UL>

<P><STRONG><a name="[2e0]"></a>SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char)</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, simplestring.o(.text._ZN12SimpleString22padStringsToSameLengthERS_S0_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char) &rArr;  SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +(const SimpleString&) const
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString__sub_object()
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString__sub_object(const char*, unsigned)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char)
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, int, unsigned long long, unsigned long long, const SimpleString&)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, int, unsigned long, unsigned long, const SimpleString&)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, int, signed char, signed char, const SimpleString&)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, int, long long, long long, const SimpleString&)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, int, long, long, const SimpleString&)
</UL>

<P><STRONG><a name="[32b]"></a>SimpleString::AtoI(const char*)</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, simplestring.o(.text._ZN12SimpleString4AtoIEPKc))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::SetRepeatCount(int, const char**, int&)
</UL>

<P><STRONG><a name="[2ae]"></a>SimpleString::MemCmp(const void*, const void*, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, simplestring.o(.text._ZN12SimpleString6MemCmpEPKvS1_j))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertBinaryEqual(const void*, const void*, unsigned, const char*, const char*, int, const TestTerminator&)
</UL>

<P><STRONG><a name="[2aa]"></a>SimpleString::StrCmp(const char*, const char*)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, simplestring.o(.text._ZN12SimpleString6StrCmpEPKcS1_))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ==(const SimpleString&, const SimpleString&)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrEqual(const char*, const char*, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode*)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::endsWith(const SimpleString&) const
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocationToFailAllocNode::shouldFail(int, const char*, int)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMemoryAllocator::isOfEqualType(TestMemoryAllocator*)
</UL>

<P><STRONG><a name="[2dd]"></a>SimpleString::StrLen(const char*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, simplestring.o(.text._ZN12SimpleString6StrLenEPKc))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned, unsigned) const
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::startsWith(const SimpleString&) const
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(const char*, const char*)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::endsWith(const SimpleString&) const
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*, unsigned)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrStr(const char*, const char*)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::copyToNewBuffer(const char*, unsigned)
</UL>

<P><STRONG><a name="[2e2]"></a>SimpleString::StrStr(const char*, const char*)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, simplestring.o(.text._ZN12SimpleString6StrStrEPKcS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SimpleString::StrStr(const char*, const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrNCmp(const char*, const char*, unsigned)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrLen(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::startsWith(const SimpleString&) const
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::contains(const SimpleString&) const
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::split(const SimpleString&, SimpleStringCollection&) const
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::count(const SimpleString&) const
</UL>

<P><STRONG><a name="[2ab]"></a>SimpleString::StrNCmp(const char*, const char*, unsigned)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, simplestring.o(.text._ZN12SimpleString7StrNCmpEPKcS1_j))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNEqual(const char*, const char*, unsigned, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(const char*, const char*)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrStr(const char*, const char*)
</UL>

<P><STRONG><a name="[2de]"></a>SimpleString::StrNCpy(char*, const char*, unsigned)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, simplestring.o(.text._ZN12SimpleString7StrNCpyEPcPKcj))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(const char*, const char*)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::copyToBuffer(char*, unsigned) const
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*, unsigned)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::copyToNewBuffer(const char*, unsigned)
</UL>

<P><STRONG><a name="[372]"></a>SimpleString::ToLower(char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, simplestring.o(.text._ZN12SimpleString7ToLowerEc))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
</UL>

<P><STRONG><a name="[2e3]"></a>SimpleString::replace(const char*, const char*)</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, simplestring.o(.text._ZN12SimpleString7replaceEPKcS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = SimpleString::replace(const char*, const char*) &rArr; SimpleString::getEmptyString() const &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::count(const SimpleString&) const
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::getEmptyString() const
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString__sub_object()
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString__sub_object(const char*)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrNCpy(char*, const char*, unsigned)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrNCmp(const char*, const char*, unsigned)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrLen(const char*)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::deallocStringBuffer(char*, const char*, int)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::allocStringBuffer(unsigned, const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeFailure(JUnitTestCaseResultNode*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupAndCaseNames(TestResult&)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupNames(TestResult&)
</UL>

<P><STRONG><a name="[2e6]"></a>SimpleString::replace(char, char)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, simplestring.o(.text._ZN12SimpleString7replaceEcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SimpleString::replace(char, char)
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::createFileName(const SimpleString&)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeFailure(JUnitTestCaseResultNode*)
</UL>

<P><STRONG><a name="[284]"></a>SimpleString::SimpleString(const char*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, simplestring.o(.text._ZN12SimpleStringC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::getEmptyString() const
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::copyToNewBuffer(const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::RunAllTests(int, const char**)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::CommandLineArguments(int, const char**)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddTestToRunBasedOnVerboseOutput(int, const char**, int&, const char*)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeStrictGroupFilter(int, const char**, int&)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeStrictNameFilter(int, const char**, int&)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeGroupFilter(int, const char**, int&)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddStrictGroupFilter(int, const char**, int&)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeNameFilter(int, const char**, int&)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddStrictNameFilter(int, const char**, int&)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::SetRepeatCount(int, const char**, int&)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::SetPackageName(int, const char**, int&)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddGroupFilter(int, const char**, int&)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::SetOutputType(int, const char**, int&)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddNameFilter(int, const char**, int&)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::TestFilter(const SimpleString&)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getMacroName() const
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::print(const char*, const char*, int)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::fail(const char*, const char*, int, const TestTerminator&)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertUnsignedLongLongsEqual(unsigned long long, unsigned long long, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertFunctionPointersEqual(void(*)(), void(*)(), const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertUnsignedLongsEqual(unsigned long, unsigned long, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNoCaseContains(const char*, const char*, const char*, const char*, int)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertSignedBytesEqual(signed char, signed char, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNoCaseEqual(const char*, const char*, const char*, const char*, int)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertLongLongsEqual(long long, long long, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertPointersEqual(const void*, const void*, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertDoublesEqual(double, double, double, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrContains(const char*, const char*, const char*, const char*, int)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertBinaryEqual(const void*, const void*, unsigned, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertLongsEqual(long, long, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNEqual(const char*, const char*, unsigned, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrEqual(const char*, const char*, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertBitsEqual(unsigned long, unsigned long, unsigned long, unsigned, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertEquals(bool, const char*, const char*, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertTrue(bool, const char*, const char*, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTestsMain()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::TeamCityTestOutput()
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getGroup() const
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getName() const
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestCaseResultNode::JUnitTestCaseResultNode__sub_object()
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestGroupResult::JUnitTestGroupResult__sub_object()
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutputImpl::JUnitTestOutputImpl__sub_object()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeTestSuiteSummary()
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::resetTestGroupResult()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeProperties()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeFileEnding()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeXmlHeader()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeTestCases()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::createFileName(const SimpleString&)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeFailure(JUnitTestCaseResultNode*)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::TestFilter()
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::TestFilter(const char*)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningReporter::fail(char*)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::postTestAction(UtestShell&, TestResult&)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentGroupEnded(const TestResult&)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getFile() const
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, int, unsigned long long, unsigned long long, const SimpleString&)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, int, unsigned long, unsigned long, const SimpleString&)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, int, signed char, signed char, const SimpleString&)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, int, long long, long long, const SimpleString&)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::StringEqualFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, int, long, long, const SimpleString&)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, int, const SimpleString&)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, int)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, TestFailure::DifferenceFormat)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailableMemoryAllocator::checkAllFailedAllocsWereDone()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::TestPlugin(TestPlugin*)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBufferTestOutput::flush()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupAndCaseNames(TestResult&)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupNames(TestResult&)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL30DummyRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IgnoredUtestShell::getMacroName() const
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::match(const char*, const TestFilter*) const
</UL>

<P><STRONG><a name="[237]"></a>SimpleString::SimpleString__sub_object(const char*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, simplestring.o(.text._ZN12SimpleStringC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SimpleString::SimpleString__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned, unsigned) const
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subStringFromTill(char, char) const
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(const char*, const char*)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +(const SimpleString&) const
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::split(const SimpleString&, SimpleStringCollection&) const
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringCollection::operator [](unsigned)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringCollection::SimpleStringCollection()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringCollection::allocate(unsigned)
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinaryWithSizeOrNull(const unsigned char*, unsigned)
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinaryOrNull(const unsigned char*, unsigned)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromMaskedBits(unsigned long, unsigned long, unsigned)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VStringFromFormat(const char*, std::__va_list)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromOrNull(const char*)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinary(const unsigned char*, unsigned)
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(double, int)
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(const std::__1::basic_string&lang;char, std::__1::char_traits&lang;char&rang;, std::__1::allocator&lang;char&rang;&rang;&)
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(const void*)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(const char*)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(void(*)())
</UL>

<P><STRONG><a name="[2d4]"></a>SimpleString::SimpleString(const char*, unsigned)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, simplestring.o(.text._ZN12SimpleStringC2EPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = SimpleString::SimpleString(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrNCpy(char*, const char*, unsigned)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrLen(const char*)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::allocStringBuffer(unsigned, const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, TestFailure::DifferenceFormat)
</UL>

<P><STRONG><a name="[2e1]"></a>SimpleString::SimpleString__sub_object(const char*, unsigned)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, simplestring.o(.text._ZN12SimpleStringC2EPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SimpleString::SimpleString__sub_object(const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char)
</UL>

<P><STRONG><a name="[298]"></a>SimpleString::SimpleString(const SimpleString&)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, simplestring.o(.text._ZN12SimpleStringC2ERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = SimpleString::SimpleString(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::copyToNewBuffer(const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(const TestFailure&)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const SimpleString&)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::getTestNameOnly() const
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::getTestFileName() const
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::getTestName() const
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::getFileName() const
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::getMessage() const
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, int, const SimpleString&)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::TestPlugin(const SimpleString&)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString, int)
</UL>

<P><STRONG><a name="[23f]"></a>SimpleString::SimpleString__sub_object(const SimpleString&)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, simplestring.o(.text._ZN12SimpleStringC2ERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SimpleString::SimpleString__sub_object(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned, unsigned) const
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::lowerCase() const
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(const SimpleString&)
</UL>

<P><STRONG><a name="[76]"></a>SimpleString::~SimpleString()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, simplestring.o(.text._ZN12SimpleStringD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = SimpleString::~SimpleString() &rArr; SimpleString::deallocStringBuffer(char*, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::deallocStringBuffer(char*, const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::RunAllTests(int, const char**)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::~CommandLineArguments()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddTestToRunBasedOnVerboseOutput(int, const char**, int&, const char*)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeStrictGroupFilter(int, const char**, int&)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeStrictNameFilter(int, const char**, int&)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeGroupFilter(int, const char**, int&)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddStrictGroupFilter(int, const char**, int&)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeNameFilter(int, const char**, int&)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddStrictNameFilter(int, const char**, int&)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::SetRepeatCount(int, const char**, int&)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::SetPackageName(int, const char**, int&)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddGroupFilter(int, const char**, int&)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::SetOutputType(int, const char**, int&)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddNameFilter(int, const char**, int&)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::TestFilter(const SimpleString&)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getFormattedName() const
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::print(const char*, const char*, int)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::fail(const char*, const char*, int, const TestTerminator&)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertUnsignedLongLongsEqual(unsigned long long, unsigned long long, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertFunctionPointersEqual(void(*)(), void(*)(), const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertUnsignedLongsEqual(unsigned long, unsigned long, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNoCaseContains(const char*, const char*, const char*, const char*, int)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertSignedBytesEqual(signed char, signed char, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNoCaseEqual(const char*, const char*, const char*, const char*, int)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertLongLongsEqual(long long, long long, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertPointersEqual(const void*, const void*, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertDoublesEqual(double, double, double, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrContains(const char*, const char*, const char*, const char*, int)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertBinaryEqual(const void*, const void*, unsigned, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertLongsEqual(long, long, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNEqual(const char*, const char*, unsigned, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrEqual(const char*, const char*, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertBitsEqual(unsigned long, unsigned long, unsigned long, unsigned, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertEquals(bool, const char*, const char*, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertTrue(bool, const char*, const char*, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTestsMain()
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutputImpl::~JUnitTestOutputImpl__sub_object()
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutputImpl::JUnitTestOutputImpl__sub_object()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::printCurrentTestStarted(const UtestShell&)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeTestSuiteSummary()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeTestGroupToFile()
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::resetTestGroupResult()
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeProperties()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeFileEnding()
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeXmlHeader()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeTestCases()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::createFileName(const SimpleString&)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeFailure(JUnitTestCaseResultNode*)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(const TestFailure&)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printDouble(double)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::TestFilter(const char*)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningReporter::fail(char*)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::postTestAction(UtestShell&, TestResult&)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const SimpleString&)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::~TeamCityTestOutput()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentGroupStarted(const UtestShell&)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentTestStarted(const UtestShell&)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentGroupEnded(const TestResult&)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentTestEnded(const TestResult&)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printFailure(const TestFailure&)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::print(long)
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, int, unsigned long long, unsigned long long, const SimpleString&)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, int, unsigned long, unsigned long, const SimpleString&)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, int, signed char, signed char, const SimpleString&)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, int, long long, long long, const SimpleString&)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoublesEqualFailure::DoublesEqualFailure(UtestShell*, const char*, int, double, double, double, const SimpleString&)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::StringEqualFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinaryEqualFailure::BinaryEqualFailure(UtestShell*, const char*, int, const unsigned char*, const unsigned char*, unsigned, const SimpleString&)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, int, long, long, const SimpleString&)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEqualFailure::CheckEqualFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsEqualFailure::BitsEqualFailure(UtestShell*, const char*, int, unsigned long, unsigned long, unsigned long, unsigned, const SimpleString&)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsFailure::ContainsFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::EqualsFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::EqualsFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFailure::CheckFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, int, const SimpleString&)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, int)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, TestFailure::DifferenceFormat)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailableMemoryAllocator::checkAllFailedAllocsWereDone()
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::~TestPlugin()
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBufferTestOutput::~StringBufferTestOutput()
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBufferTestOutput::flush()
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString, int)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFileAndLineForTestAndFailure(const TestFailure&)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFileAndLineForFailure(const TestFailure&)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printCurrentTestStarted(const UtestShell&)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFailure(const TestFailure&)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupAndCaseNames(TestResult&)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupNames(TestResult&)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::findTestWithGroup(const SimpleString&)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::findTestWithName(const SimpleString&)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::endOfGroup(UtestShell*)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL30DummyRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::match(const char*, const TestFilter*) const
</UL>
<BR>[Address Reference Count : 14]<UL><LI> junittestoutput.o(.text._ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode)
<LI> testfailure.o(.text._ZN19DoublesEqualFailureC2EP10UtestShellPKcidddRK12SimpleString)
<LI> testfailure.o(.text._ZN17LongsEqualFailureC2EP10UtestShellPKcillRK12SimpleString)
<LI> testfailure.o(.text._ZN25UnsignedLongsEqualFailureC2EP10UtestShellPKcimmRK12SimpleString)
<LI> testfailure.o(.text._ZN21LongLongsEqualFailureC2EP10UtestShellPKcixxRK12SimpleString)
<LI> testfailure.o(.text._ZN29UnsignedLongLongsEqualFailureC2EP10UtestShellPKciyyRK12SimpleString)
<LI> testfailure.o(.text._ZN18StringEqualFailureC2EP10UtestShellPKciS3_S3_RK12SimpleString)
<LI> testfailure.o(.text._ZN24StringEqualNoCaseFailureC2EP10UtestShellPKciS3_S3_RK12SimpleString)
<LI> testfailure.o(.text._ZN18BinaryEqualFailureC2EP10UtestShellPKciPKhS5_jRK12SimpleString)
<LI> testfailure.o(.text._ZN11TestFailureD2Ev)
<LI> utest.o(.text._ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_i)
<LI> utest.o(.text._ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_iRK14TestTerminator)
<LI> utest.o(.text._ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_iRK14TestTerminator)
<LI> utest.o(.text._ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_iRK14TestTerminator)
</UL>
<P><STRONG><a name="[23a]"></a>SimpleString::~SimpleString__sub_object()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, simplestring.o(.text._ZN12SimpleStringD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SimpleString::~SimpleString__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned, unsigned) const
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(const char*, const char*)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +(const SimpleString&) const
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::split(const SimpleString&, SimpleStringCollection&) const
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::containsNoCase(const SimpleString&) const
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::equalsNoCase(const SimpleString&) const
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringCollection::operator [](unsigned)
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringCollection::~SimpleStringCollection()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringCollection::allocate(unsigned)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinaryWithSize(const unsigned char*, unsigned)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromMaskedBits(unsigned long, unsigned long, unsigned)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VStringFromFormat(const char*, std::__va_list)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinary(const unsigned char*, unsigned)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(signed char)
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(const void*)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(void(*)())
</UL>

<P><STRONG><a name="[252]"></a>SimpleString::operator =(const SimpleString&)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, simplestring.o(.text._ZN12SimpleStringaSERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::deallocStringBuffer(char*, const char*, int)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::copyToNewBuffer(const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddTestToRunBasedOnVerboseOutput(int, const char**, int&, const char*)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::SetPackageName(int, const char**, int&)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::TestFilter(const SimpleString&)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::setPackageName(const SimpleString&)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::printCurrentTestStarted(const UtestShell&)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::resetTestGroupResult()
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::TestFilter(const char*)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailFailure::FailFailure(UtestShell*, const char*, int, const SimpleString&)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentGroupStarted(const UtestShell&)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::split(const SimpleString&, SimpleStringCollection&) const
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringCollection::operator [](unsigned)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VStringFromFormat(const char*, std::__va_list)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinary(const unsigned char*, unsigned)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(signed char)
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, int, unsigned long long, unsigned long long, const SimpleString&)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, int, unsigned long, unsigned long, const SimpleString&)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, int, signed char, signed char, const SimpleString&)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, int, long long, long long, const SimpleString&)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoublesEqualFailure::DoublesEqualFailure(UtestShell*, const char*, int, double, double, double, const SimpleString&)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::StringEqualFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinaryEqualFailure::BinaryEqualFailure(UtestShell*, const char*, int, const unsigned char*, const unsigned char*, unsigned, const SimpleString&)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, int, long, long, const SimpleString&)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEqualFailure::CheckEqualFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsEqualFailure::BitsEqualFailure(UtestShell*, const char*, int, unsigned long, unsigned long, unsigned long, unsigned, const SimpleString&)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsFailure::ContainsFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::EqualsFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::EqualsFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFailure::CheckFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, TestFailure::DifferenceFormat)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailableMemoryAllocator::checkAllFailedAllocsWereDone()
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBufferTestOutput::flush()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupAndCaseNames(TestResult&)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupNames(TestResult&)
</UL>

<P><STRONG><a name="[259]"></a>SimpleString::operator +=(const char*)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, simplestring.o(.text._ZN12SimpleStringpLEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SimpleString::operator +=(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrNCpy(char*, const char*, unsigned)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrLen(const char*)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::deallocStringBuffer(char*, const char*, int)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::copyToNewBuffer(const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getFormattedName() const
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::print(const char*, const char*, int)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::createFileName(const SimpleString&)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +(const SimpleString&) const
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinaryWithSize(const unsigned char*, unsigned)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromMaskedBits(unsigned long, unsigned long, unsigned)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinary(const unsigned char*, unsigned)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoublesEqualFailure::DoublesEqualFailure(UtestShell*, const char*, int, double, double, double, const SimpleString&)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFailure::CheckFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, TestFailure::DifferenceFormat)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBufferTestOutput::printBuffer(const char*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupAndCaseNames(TestResult&)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupNames(TestResult&)
</UL>

<P><STRONG><a name="[2bb]"></a>SimpleString::operator +=(const SimpleString&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, simplestring.o(.text._ZN12SimpleStringpLERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = SimpleString::operator +=(const SimpleString&) &rArr; SimpleString::operator +=(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::print(const char*, const char*, int)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::createFileName(const SimpleString&)
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, int, unsigned long long, unsigned long long, const SimpleString&)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, int, unsigned long, unsigned long, const SimpleString&)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, int, signed char, signed char, const SimpleString&)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, int, long long, long long, const SimpleString&)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoublesEqualFailure::DoublesEqualFailure(UtestShell*, const char*, int, double, double, double, const SimpleString&)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::StringEqualFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinaryEqualFailure::BinaryEqualFailure(UtestShell*, const char*, int, const unsigned char*, const unsigned char*, unsigned, const SimpleString&)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, int, long, long, const SimpleString&)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEqualFailure::CheckEqualFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsEqualFailure::BitsEqualFailure(UtestShell*, const char*, int, unsigned long, unsigned long, unsigned long, unsigned, const SimpleString&)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsFailure::ContainsFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::EqualsFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::EqualsFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFailure::CheckFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, TestFailure::DifferenceFormat)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupAndCaseNames(TestResult&)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupNames(TestResult&)
</UL>

<P><STRONG><a name="[110]"></a>TestRegistry::countTests()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, testregistry.o(.text._ZN12TestRegistry10countTestsEv))
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.rodata._ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[2e7]"></a>TestRegistry::endOfGroup(UtestShell*)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, testregistry.o(.text._ZN12TestRegistry10endOfGroupEP10UtestShell))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = TestRegistry::endOfGroup(UtestShell*) &rArr; UtestShell::getGroup() const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getGroup() const
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator !=(const SimpleString&, const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::runAllTests(TestResult&)
</UL>

<P><STRONG><a name="[111]"></a>TestRegistry::runAllTests(TestResult&)</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, testregistry.o(.text._ZN12TestRegistry11runAllTestsER10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = TestRegistry::runAllTests(TestResult&) &rArr; TestRegistry::testShouldRun(UtestShell*, TestResult&) &rArr; UtestShell::shouldRun(const TestFilter*, const TestFilter*) const &rArr; UtestShell::match(const char*, const TestFilter*) const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::testShouldRun(UtestShell*, TestResult&)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::endOfGroup(UtestShell*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.rodata._ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[11b]"></a>TestRegistry::countPlugins()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, testregistry.o(.text._ZN12TestRegistry12countPluginsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = TestRegistry::countPlugins() &rArr; NullTestPlugin::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullTestPlugin::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.rodata._ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[11c]"></a>TestRegistry::getFirstTest()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testregistry.o(.text._ZN12TestRegistry12getFirstTestEv))
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.rodata._ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[117]"></a>TestRegistry::resetPlugins()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, testregistry.o(.text._ZN12TestRegistry12resetPluginsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = TestRegistry::resetPlugins() &rArr; NullTestPlugin::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullTestPlugin::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.rodata._ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[116]"></a>TestRegistry::installPlugin(TestPlugin*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, testregistry.o(.text._ZN12TestRegistry13installPluginEP10TestPlugin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TestRegistry::installPlugin(TestPlugin*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.rodata._ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[356]"></a>TestRegistry::setRunIgnored()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testregistry.o(.text._ZN12TestRegistry13setRunIgnoredEv))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::initializeTestRun()
</UL>

<P><STRONG><a name="[2ea]"></a>TestRegistry::testShouldRun(UtestShell*, TestResult&)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, testregistry.o(.text._ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = TestRegistry::testShouldRun(UtestShell*, TestResult&) &rArr; UtestShell::shouldRun(const TestFilter*, const TestFilter*) const &rArr; UtestShell::match(const char*, const TestFilter*) const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::shouldRun(const TestFilter*, const TestFilter*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupAndCaseNames(TestResult&)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::runAllTests(TestResult&)
</UL>

<P><STRONG><a name="[118]"></a>TestRegistry::getFirstPlugin()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testregistry.o(.text._ZN12TestRegistry14getFirstPluginEv))
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.rodata._ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[114]"></a>TestRegistry::setNameFilters(const TestFilter*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testregistry.o(.text._ZN12TestRegistry14setNameFiltersEPK10TestFilter))
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.rodata._ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[119]"></a>TestRegistry::getPluginByName(const SimpleString&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testregistry.o(.text._ZN12TestRegistry15getPluginByNameERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TestRegistry::getPluginByName(const SimpleString&) &rArr; TestPlugin::getPluginByName(const SimpleString&) &rArr; operator ==(const SimpleString&, const SimpleString&)
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::getPluginByName(const SimpleString&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.rodata._ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[11d]"></a>TestRegistry::getTestWithNext(UtestShell*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, testregistry.o(.text._ZN12TestRegistry15getTestWithNextEP10UtestShell))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestRegistry::getTestWithNext(UtestShell*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.rodata._ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[115]"></a>TestRegistry::setGroupFilters(const TestFilter*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testregistry.o(.text._ZN12TestRegistry15setGroupFiltersEPK10TestFilter))
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.rodata._ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[10f]"></a>TestRegistry::unDoLastAddTest()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, testregistry.o(.text._ZN12TestRegistry15unDoLastAddTestEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TestRegistry::unDoLastAddTest()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.rodata._ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[11e]"></a>TestRegistry::findTestWithName(const SimpleString&)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, testregistry.o(.text._ZN12TestRegistry16findTestWithNameERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = TestRegistry::findTestWithName(const SimpleString&) &rArr; UtestShell::getName() const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ==(const SimpleString&, const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getName() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.rodata._ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[11f]"></a>TestRegistry::findTestWithGroup(const SimpleString&)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, testregistry.o(.text._ZN12TestRegistry17findTestWithGroupERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = TestRegistry::findTestWithGroup(const SimpleString&) &rArr; UtestShell::getGroup() const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ==(const SimpleString&, const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getGroup() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.rodata._ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[2ec]"></a>TestRegistry::getCurrentRegistry()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, testregistry.o(.text._ZN12TestRegistry18getCurrentRegistryEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = TestRegistry::getCurrentRegistry() &rArr; TestRegistry::TestRegistry__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::TestRegistry__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::RunAllTests(int, const char**)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestInstaller::TestInstaller(UtestShell&, const char*, const char*, const char*, int)
</UL>

<P><STRONG><a name="[112]"></a>TestRegistry::listTestGroupNames(TestResult&)</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, testregistry.o(.text._ZN12TestRegistry18listTestGroupNamesER10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = TestRegistry::listTestGroupNames(TestResult&) &rArr; SimpleString::replace(const char*, const char*) &rArr; SimpleString::getEmptyString() const &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned, unsigned) const
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getGroup() const
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(const char*, const char*)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::endsWith(const SimpleString&) const
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::contains(const SimpleString&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.rodata._ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[11a]"></a>TestRegistry::removePluginByName(const SimpleString&)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, testregistry.o(.text._ZN12TestRegistry18removePluginByNameERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TestRegistry::removePluginByName(const SimpleString&) &rArr; operator ==(const SimpleString&, const SimpleString&)
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ==(const SimpleString&, const SimpleString&)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::getName()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.rodata._ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[120]"></a>TestRegistry::setCurrentRegistry(TestRegistry*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, testregistry.o(.text._ZN12TestRegistry18setCurrentRegistryEPS_))
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.rodata._ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[113]"></a>TestRegistry::listTestGroupAndCaseNames(TestResult&)</STRONG> (Thumb, 336 bytes, Stack size 48 bytes, testregistry.o(.text._ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = TestRegistry::listTestGroupAndCaseNames(TestResult&) &rArr; TestRegistry::testShouldRun(UtestShell*, TestResult&) &rArr; UtestShell::shouldRun(const TestFilter*, const TestFilter*) const &rArr; UtestShell::match(const char*, const TestFilter*) const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned, unsigned) const
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getGroup() const
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getName() const
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(const char*, const char*)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::endsWith(const SimpleString&) const
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::contains(const SimpleString&) const
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::testShouldRun(UtestShell*, TestResult&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.rodata._ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[121]"></a>TestRegistry::setRunTestsInSeperateProcess()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testregistry.o(.text._ZN12TestRegistry28setRunTestsInSeperateProcessEv))
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.rodata._ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[10e]"></a>TestRegistry::addTest(UtestShell*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, testregistry.o(.text._ZN12TestRegistry7addTestEP10UtestShell))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TestRegistry::addTest(UtestShell*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.rodata._ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[2f0]"></a>TestRegistry::TestRegistry()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, testregistry.o(.text._ZN12TestRegistryC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullTestPlugin::instance()
</UL>

<P><STRONG><a name="[2ed]"></a>TestRegistry::TestRegistry__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, testregistry.o(.text._ZN12TestRegistryC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestRegistry::TestRegistry__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::getCurrentRegistry()
</UL>

<P><STRONG><a name="[10d]"></a>TestRegistry::~TestRegistry__deallocating()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testregistry.o(.text._ZN12TestRegistryD0Ev))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.rodata._ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[403]"></a>TestRegistry::~TestRegistry()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testregistry.o(.text._ZN12TestRegistryD2Ev), UNUSED)

<P><STRONG><a name="[10c]"></a>TestRegistry::~TestRegistry__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testregistry.o(.text._ZN12TestRegistryD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.rodata._ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[2b2]"></a>EqualsFailure::EqualsFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, testfailure.o(.text._ZN13EqualsFailureC2EP10UtestShellPKciRK12SimpleStringS6_S6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = EqualsFailure::EqualsFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&) &rArr; TestFailure::createButWasString(const SimpleString&, const SimpleString&) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure__sub_object(UtestShell*, const char*, int)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createButWasString(const SimpleString&, const SimpleString&)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertFunctionPointersEqual(void(*)(), void(*)(), const char*, const char*, int, const TestTerminator&)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertPointersEqual(const void*, const void*, const char*, const char*, int, const TestTerminator&)
</UL>

<P><STRONG><a name="[404]"></a>EqualsFailure::EqualsFailure__sub_object(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, testfailure.o(.text._ZN13EqualsFailureC2EP10UtestShellPKciRK12SimpleStringS6_S6_), UNUSED)

<P><STRONG><a name="[2f3]"></a>EqualsFailure::EqualsFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, testfailure.o(.text._ZN13EqualsFailureC2EP10UtestShellPKciS3_S3_RK12SimpleString), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromOrNull(const char*)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure__sub_object(UtestShell*, const char*, int)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createButWasString(const SimpleString&, const SimpleString&)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
</UL>

<P><STRONG><a name="[405]"></a>EqualsFailure::EqualsFailure__sub_object(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, testfailure.o(.text._ZN13EqualsFailureC2EP10UtestShellPKciS3_S3_RK12SimpleString), UNUSED)

<P><STRONG><a name="[122]"></a>EqualsFailure::~EqualsFailure__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, testfailure.o(.text._ZN13EqualsFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EqualsFailure::~EqualsFailure__deallocating() &rArr; TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.rodata._ZTV13EqualsFailure)
</UL>
<P><STRONG><a name="[223]"></a>TestInstaller::TestInstaller(UtestShell&, const char*, const char*, const char*, int)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, utest.o(.text._ZN13TestInstallerC2ER10UtestShellPKcS3_S3_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = TestInstaller::TestInstaller(UtestShell&, const char*, const char*, const char*, int) &rArr; TestRegistry::getCurrentRegistry() &rArr; TestRegistry::TestRegistry__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::getCurrentRegistry()
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UnitTest.cpp
</UL>

<P><STRONG><a name="[406]"></a>TestInstaller::TestInstaller__sub_object(UtestShell&, const char*, const char*, const char*, int)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, utest.o(.text._ZN13TestInstallerC2ER10UtestShellPKcS3_S3_i), UNUSED)

<P><STRONG><a name="[124]"></a>TestInstaller::~TestInstaller__deallocating()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utest.o(.text._ZN13TestInstallerD0Ev))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.rodata._ZTV13TestInstaller)
</UL>
<P><STRONG><a name="[71]"></a>TestInstaller::~TestInstaller()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utest.o(.text._ZN13TestInstallerD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> unittest.o(.text._GLOBAL__sub_I_UnitTest.cpp)
</UL>
<P><STRONG><a name="[123]"></a>TestInstaller::~TestInstaller__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utest.o(.text._ZN13TestInstallerD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.rodata._ZTV13TestInstaller)
</UL>
<P><STRONG><a name="[126]"></a>NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testplugin.o(.text._ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult))
<BR>[Address Reference Count : 1]<UL><LI> testplugin.o(.rodata._ZTV14NullTestPlugin)
</UL>
<P><STRONG><a name="[127]"></a>NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testplugin.o(.text._ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult))
<BR>[Address Reference Count : 1]<UL><LI> testplugin.o(.rodata._ZTV14NullTestPlugin)
</UL>
<P><STRONG><a name="[29d]"></a>NullTestPlugin::instance()</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, testplugin.o(.text._ZN14NullTestPlugin8instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = NullTestPlugin::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullTestPlugin::NullTestPlugin__sub_object()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::TestPlugin(const SimpleString&)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::TestRegistry()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::resetPlugins()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::countPlugins()
</UL>

<P><STRONG><a name="[2f5]"></a>NullTestPlugin::NullTestPlugin()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, testplugin.o(.text._ZN14NullTestPluginC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::TestPlugin__sub_object(TestPlugin*)
</UL>

<P><STRONG><a name="[2f4]"></a>NullTestPlugin::NullTestPlugin__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, testplugin.o(.text._ZN14NullTestPluginC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NullTestPlugin::NullTestPlugin__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullTestPlugin::instance()
</UL>

<P><STRONG><a name="[125]"></a>NullTestPlugin::~NullTestPlugin__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, testplugin.o(.text._ZN14NullTestPluginD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NullTestPlugin::~NullTestPlugin__deallocating() &rArr; TestPlugin::~TestPlugin__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::~TestPlugin__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testplugin.o(.rodata._ZTV14NullTestPlugin)
</UL>
<P><STRONG><a name="[407]"></a>TestTerminator::~TestTerminator()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utest.o(.text._ZN14TestTerminatorD2Ev), UNUSED)

<P><STRONG><a name="[17f]"></a>TestTerminator::~TestTerminator__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utest.o(.text._ZN14TestTerminatorD2Ev))
<BR>[Address Reference Count : 2]<UL><LI> utest.o(.rodata._ZTV20NormalTestTerminator)
<LI> utest.o(.rodata._ZTV31TestTerminatorWithoutExceptions)
</UL>
<P><STRONG><a name="[24d]"></a>NormalTestTerminator::~NormalTestTerminator()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utest.o(.text._ZN14TestTerminatorD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_myFirstUnitTest_API2_Test::testBody()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_myFirstUnitTest_API1_Test::testBody()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMemoryAllocator::alloc_memory(unsigned, const char*, int)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CppUTestStore(void**)
</UL>

<P><STRONG><a name="[408]"></a>NormalTestTerminator::~NormalTestTerminator__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utest.o(.text._ZN14TestTerminatorD2Ev), UNUSED)

<P><STRONG><a name="[368]"></a>TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utest.o(.text._ZN14TestTerminatorD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningReporter::fail(char*)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailableMemoryAllocator::checkAllFailedAllocsWereDone()
</UL>

<P><STRONG><a name="[409]"></a>TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utest.o(.text._ZN14TestTerminatorD2Ev), UNUSED)

<P><STRONG><a name="[2af]"></a>ContainsFailure::ContainsFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, testfailure.o(.text._ZN15ContainsFailureC2EP10UtestShellPKciRK12SimpleStringS6_S6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = ContainsFailure::ContainsFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure__sub_object(UtestShell*, const char*, int)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNoCaseContains(const char*, const char*, const char*, const char*, int)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrContains(const char*, const char*, const char*, const char*, int)
</UL>

<P><STRONG><a name="[40a]"></a>ContainsFailure::ContainsFailure__sub_object(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, testfailure.o(.text._ZN15ContainsFailureC2EP10UtestShellPKciRK12SimpleStringS6_S6_), UNUSED)

<P><STRONG><a name="[128]"></a>ContainsFailure::~ContainsFailure__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, testfailure.o(.text._ZN15ContainsFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ContainsFailure::~ContainsFailure__deallocating() &rArr; TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.rodata._ZTV15ContainsFailure)
</UL>
<P><STRONG><a name="[131]"></a>JUnitTestOutput::printBuffer(const char*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, junittestoutput.o(.text._ZN15JUnitTestOutput11printBufferEPKc))
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[139]"></a>JUnitTestOutput::writeToFile(const SimpleString&)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, junittestoutput.o(.text._ZN15JUnitTestOutput11writeToFileERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = JUnitTestOutput::writeToFile(const SimpleString&)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[134]"></a>JUnitTestOutput::printFailure(const TestFailure&)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, junittestoutput.o(.text._ZN15JUnitTestOutput12printFailureERK11TestFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = JUnitTestOutput::printFailure(const TestFailure&) &rArr; TestFailure::TestFailure(const TestFailure&) &rArr; SimpleString::SimpleString(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*, const char*, int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(const TestFailure&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[13f]"></a>JUnitTestOutput::writeFailure(JUnitTestCaseResultNode*)</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, junittestoutput.o(.text._ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = JUnitTestOutput::writeFailure(JUnitTestCaseResultNode*) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(char, char)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(const char*, const char*)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[136]"></a>JUnitTestOutput::createFileName(const SimpleString&)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, junittestoutput.o(.text._ZN15JUnitTestOutput14createFileNameERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = JUnitTestOutput::createFileName(const SimpleString&) &rArr; SimpleString::operator +=(const SimpleString&) &rArr; SimpleString::operator +=(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(char, char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[2f8]"></a>JUnitTestOutput::setPackageName(const SimpleString&)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, junittestoutput.o(.text._ZN15JUnitTestOutput14setPackageNameERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = JUnitTestOutput::setPackageName(const SimpleString&) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::createJUnitOutput(const SimpleString&)
</UL>

<P><STRONG><a name="[13e]"></a>JUnitTestOutput::writeTestCases()</STRONG> (Thumb, 348 bytes, Stack size 64 bytes, junittestoutput.o(.text._ZN15JUnitTestOutput14writeTestCasesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = JUnitTestOutput::writeTestCases() &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::isEmpty() const
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[13b]"></a>JUnitTestOutput::writeXmlHeader()</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, junittestoutput.o(.text._ZN15JUnitTestOutput14writeXmlHeaderEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = JUnitTestOutput::writeXmlHeader() &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[12c]"></a>JUnitTestOutput::printTestsEnded(const TestResult&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, junittestoutput.o(.text._ZN15JUnitTestOutput15printTestsEndedERK10TestResult))
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[140]"></a>JUnitTestOutput::writeFileEnding()</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, junittestoutput.o(.text._ZN15JUnitTestOutput15writeFileEndingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = JUnitTestOutput::writeFileEnding() &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[13d]"></a>JUnitTestOutput::writeProperties()</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, junittestoutput.o(.text._ZN15JUnitTestOutput15writePropertiesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = JUnitTestOutput::writeProperties() &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[137]"></a>JUnitTestOutput::openFileForWrite(const SimpleString&)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, junittestoutput.o(.text._ZN15JUnitTestOutput16openFileForWriteERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = JUnitTestOutput::openFileForWrite(const SimpleString&)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[12b]"></a>JUnitTestOutput::printTestsStarted()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, junittestoutput.o(.text._ZN15JUnitTestOutput17printTestsStartedEv))
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[2f9]"></a>JUnitTestOutput::resetTestGroupResult()</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, junittestoutput.o(.text._ZN15JUnitTestOutput20resetTestGroupResultEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = JUnitTestOutput::resetTestGroupResult() &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::~JUnitTestOutput()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::printCurrentGroupEnded(const TestResult&)
</UL>

<P><STRONG><a name="[138]"></a>JUnitTestOutput::writeTestGroupToFile()</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, junittestoutput.o(.text._ZN15JUnitTestOutput20writeTestGroupToFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = JUnitTestOutput::writeTestGroupToFile() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocStringBuffer(char*, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[12e]"></a>JUnitTestOutput::printCurrentTestEnded(const TestResult&)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, junittestoutput.o(.text._ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = JUnitTestOutput::printCurrentTestEnded(const TestResult&)
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestResult::getCurrentTestTotalExecutionTime() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[13c]"></a>JUnitTestOutput::writeTestSuiteSummary()</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, junittestoutput.o(.text._ZN15JUnitTestOutput21writeTestSuiteSummaryEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = JUnitTestOutput::writeTestSuiteSummary() &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[130]"></a>JUnitTestOutput::printCurrentGroupEnded(const TestResult&)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, junittestoutput.o(.text._ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = JUnitTestOutput::printCurrentGroupEnded(const TestResult&) &rArr; JUnitTestOutput::resetTestGroupResult() &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestResult::getCurrentGroupTotalExecutionTime() const
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::resetTestGroupResult()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[12d]"></a>JUnitTestOutput::printCurrentTestStarted(const UtestShell&)</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, junittestoutput.o(.text._ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = JUnitTestOutput::printCurrentTestStarted(const UtestShell&) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*, const char*, int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getGroup() const
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getName() const
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestCaseResultNode::JUnitTestCaseResultNode__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[12f]"></a>JUnitTestOutput::printCurrentGroupStarted(const UtestShell&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, junittestoutput.o(.text._ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell))
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[135]"></a>JUnitTestOutput::flush()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, junittestoutput.o(.text._ZN15JUnitTestOutput5flushEv))
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[132]"></a>JUnitTestOutput::print(const char*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, junittestoutput.o(.text._ZN15JUnitTestOutput5printEPKc))
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[133]"></a>JUnitTestOutput::print(long)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, junittestoutput.o(.text._ZN15JUnitTestOutput5printEl))
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[13a]"></a>JUnitTestOutput::closeFile()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, junittestoutput.o(.text._ZN15JUnitTestOutput9closeFileEv))
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[2fc]"></a>JUnitTestOutput::JUnitTestOutput()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, junittestoutput.o(.text._ZN15JUnitTestOutputC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = JUnitTestOutput::JUnitTestOutput() &rArr; JUnitTestOutputImpl::JUnitTestOutputImpl__sub_object() &rArr; JUnitTestGroupResult::JUnitTestGroupResult__sub_object() &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*, const char*, int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::~TestOutput__sub_object()
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::TestOutput__sub_object()
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutputImpl::JUnitTestOutputImpl__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::createJUnitOutput(const SimpleString&)
</UL>

<P><STRONG><a name="[40b]"></a>JUnitTestOutput::JUnitTestOutput__sub_object()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, junittestoutput.o(.text._ZN15JUnitTestOutputC2Ev), UNUSED)

<P><STRONG><a name="[12a]"></a>JUnitTestOutput::~JUnitTestOutput__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, junittestoutput.o(.text._ZN15JUnitTestOutputD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = JUnitTestOutput::~JUnitTestOutput__deallocating() &rArr; JUnitTestOutput::~JUnitTestOutput__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::~JUnitTestOutput__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[2ff]"></a>JUnitTestOutput::~JUnitTestOutput()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, junittestoutput.o(.text._ZN15JUnitTestOutputD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::~TestOutput__sub_object()
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutputImpl::~JUnitTestOutputImpl__sub_object()
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::resetTestGroupResult()
</UL>

<P><STRONG><a name="[129]"></a>JUnitTestOutput::~JUnitTestOutput__sub_object()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, junittestoutput.o(.text._ZN15JUnitTestOutputD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = JUnitTestOutput::~JUnitTestOutput__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::~JUnitTestOutput__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.rodata._ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[305]"></a>ScopedMutexLock::ScopedMutexLock(SimpleMutex*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, simplemutex.o(.text._ZN15ScopedMutexLockC2EP11SimpleMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ScopedMutexLock::ScopedMutexLock(SimpleMutex*)
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemLeakScopedMutex::MemLeakScopedMutex__sub_object()
</UL>

<P><STRONG><a name="[40c]"></a>ScopedMutexLock::ScopedMutexLock__sub_object(SimpleMutex*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, simplemutex.o(.text._ZN15ScopedMutexLockC2EP11SimpleMutex), UNUSED)

<P><STRONG><a name="[283]"></a>ScopedMutexLock::~ScopedMutexLock()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, simplemutex.o(.text._ZN15ScopedMutexLockD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ScopedMutexLock::~ScopedMutexLock() &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL46threadsafe_mem_leak_operator_new_array_nothrowj
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL44threadsafe_mem_leak_operator_new_array_debugjPKci
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL41threadsafe_mem_leak_operator_delete_arrayPv
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL40threadsafe_mem_leak_operator_new_nothrowj
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38threadsafe_mem_leak_operator_new_debugjPKci
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38threadsafe_mem_leak_operator_new_arrayj
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL35threadsafe_mem_leak_operator_deletePv
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32threadsafe_mem_leak_operator_newj
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27threadsafe_mem_leak_reallocPvjPKci
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26threadsafe_mem_leak_mallocjPKci
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24threadsafe_mem_leak_freePvPKci
</UL>

<P><STRONG><a name="[40d]"></a>ScopedMutexLock::~ScopedMutexLock__sub_object()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, simplemutex.o(.text._ZN15ScopedMutexLockD2Ev), UNUSED)

<P><STRONG><a name="[2a8]"></a>BitsEqualFailure::BitsEqualFailure(UtestShell*, const char*, int, unsigned long, unsigned long, unsigned long, unsigned, const SimpleString&)</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, testfailure.o(.text._ZN16BitsEqualFailureC2EP10UtestShellPKcimmmjRK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = BitsEqualFailure::BitsEqualFailure(UtestShell*, const char*, int, unsigned long, unsigned long, unsigned long, unsigned, const SimpleString&) &rArr; TestFailure::createButWasString(const SimpleString&, const SimpleString&) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromMaskedBits(unsigned long, unsigned long, unsigned)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure__sub_object(UtestShell*, const char*, int)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createButWasString(const SimpleString&, const SimpleString&)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertBitsEqual(unsigned long, unsigned long, unsigned long, unsigned, const char*, const char*, int, const TestTerminator&)
</UL>

<P><STRONG><a name="[40e]"></a>BitsEqualFailure::BitsEqualFailure__sub_object(UtestShell*, const char*, int, unsigned long, unsigned long, unsigned long, unsigned, const SimpleString&)</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, testfailure.o(.text._ZN16BitsEqualFailureC2EP10UtestShellPKcimmmjRK12SimpleString), UNUSED)

<P><STRONG><a name="[141]"></a>BitsEqualFailure::~BitsEqualFailure__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, testfailure.o(.text._ZN16BitsEqualFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BitsEqualFailure::~BitsEqualFailure__deallocating() &rArr; TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.rodata._ZTV16BitsEqualFailure)
</UL>
<P><STRONG><a name="[145]"></a>ExecFunctionTest::setup()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, utest.o(.text._ZN16ExecFunctionTest5setupEv))
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.rodata._ZTV16ExecFunctionTest)
</UL>
<P><STRONG><a name="[146]"></a>ExecFunctionTest::teardown()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, utest.o(.text._ZN16ExecFunctionTest8teardownEv))
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.rodata._ZTV16ExecFunctionTest)
</UL>
<P><STRONG><a name="[147]"></a>ExecFunctionTest::testBody()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, utest.o(.text._ZN16ExecFunctionTest8testBodyEv))
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.rodata._ZTV16ExecFunctionTest)
</UL>
<P><STRONG><a name="[40f]"></a>ExecFunctionTest::ExecFunctionTest(ExecFunctionTestShell*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, utest.o(.text._ZN16ExecFunctionTestC2EP21ExecFunctionTestShell), UNUSED)

<P><STRONG><a name="[410]"></a>ExecFunctionTest::ExecFunctionTest__sub_object(ExecFunctionTestShell*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, utest.o(.text._ZN16ExecFunctionTestC2EP21ExecFunctionTestShell), UNUSED)

<P><STRONG><a name="[143]"></a>ExecFunctionTest::~ExecFunctionTest__deallocating()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utest.o(.text._ZN16ExecFunctionTestD0Ev))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.rodata._ZTV16ExecFunctionTest)
</UL>
<P><STRONG><a name="[149]"></a>SetPointerPlugin::postTestAction(UtestShell&, TestResult&)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, testplugin.o(.text._ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult))
<BR>[Address Reference Count : 1]<UL><LI> testplugin.o(.rodata._ZTV16SetPointerPlugin)
</UL>
<P><STRONG><a name="[301]"></a>SetPointerPlugin::SetPointerPlugin(const SimpleString&)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, testplugin.o(.text._ZN16SetPointerPluginC2ERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetPointerPlugin::SetPointerPlugin(const SimpleString&) &rArr; TestPlugin::TestPlugin__sub_object(const SimpleString&)
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::TestPlugin__sub_object(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTestsMain()
</UL>

<P><STRONG><a name="[411]"></a>SetPointerPlugin::SetPointerPlugin__sub_object(const SimpleString&)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, testplugin.o(.text._ZN16SetPointerPluginC2ERK12SimpleString), UNUSED)

<P><STRONG><a name="[148]"></a>SetPointerPlugin::~SetPointerPlugin__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, testplugin.o(.text._ZN16SetPointerPluginD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetPointerPlugin::~SetPointerPlugin__deallocating() &rArr; TestPlugin::~TestPlugin__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::~TestPlugin__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testplugin.o(.rodata._ZTV16SetPointerPlugin)
</UL>
<P><STRONG><a name="[2a7]"></a>CheckEqualFailure::CheckEqualFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, testfailure.o(.text._ZN17CheckEqualFailureC2EP10UtestShellPKciRK12SimpleStringS6_S6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = CheckEqualFailure::CheckEqualFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&) &rArr; TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, TestFailure::DifferenceFormat) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure__sub_object(UtestShell*, const char*, int)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, TestFailure::DifferenceFormat)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createButWasString(const SimpleString&, const SimpleString&)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertEquals(bool, const char*, const char*, const char*, const char*, int, const TestTerminator&)
</UL>

<P><STRONG><a name="[412]"></a>CheckEqualFailure::CheckEqualFailure__sub_object(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)</STRONG> (Thumb, 184 bytes, Stack size 48 bytes, testfailure.o(.text._ZN17CheckEqualFailureC2EP10UtestShellPKciRK12SimpleStringS6_S6_), UNUSED)

<P><STRONG><a name="[14a]"></a>CheckEqualFailure::~CheckEqualFailure__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, testfailure.o(.text._ZN17CheckEqualFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CheckEqualFailure::~CheckEqualFailure__deallocating() &rArr; TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.rodata._ZTV17CheckEqualFailure)
</UL>
<P><STRONG><a name="[14c]"></a>ConsoleTestOutput::printBuffer(const char*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, testoutput.o(.text._ZN17ConsoleTestOutput11printBufferEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ConsoleTestOutput::printBuffer(const char*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
<LI> testoutput.o(.rodata._ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[14d]"></a>ConsoleTestOutput::flush()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, testoutput.o(.text._ZN17ConsoleTestOutput5flushEv))
<BR>[Address Reference Count : 2]<UL><LI> teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
<LI> testoutput.o(.rodata._ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[303]"></a>ConsoleTestOutput::ConsoleTestOutput__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, commandlinetestrunner.o(.text._ZN17ConsoleTestOutputC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ConsoleTestOutput::ConsoleTestOutput__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::TestOutput__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::RunAllTests(int, const char**)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::createConsoleOutput()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::TeamCityTestOutput()
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsideTestRunnerUTest::OutsideTestRunnerUTest__sub_object()
</UL>

<P><STRONG><a name="[14b]"></a>ConsoleTestOutput::~ConsoleTestOutput__deallocating()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testoutput.o(.text._ZN17ConsoleTestOutputD0Ev))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.rodata._ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[151]"></a>IgnoredUtestShell::runOneTest(TestPlugin*, TestResult&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, utest.o(.text._ZN17IgnoredUtestShell10runOneTestEP10TestPluginR10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IgnoredUtestShell::runOneTest(TestPlugin*, TestResult&) &rArr; UtestShell::runOneTest(TestPlugin*, TestResult&)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::runOneTest(TestPlugin*, TestResult&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
</UL>
<P><STRONG><a name="[150]"></a>IgnoredUtestShell::setRunIgnored()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utest.o(.text._ZN17IgnoredUtestShell13setRunIgnoredEv))
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
</UL>
<P><STRONG><a name="[413]"></a>IgnoredUtestShell::IgnoredUtestShell(const char*, const char*, const char*, int)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, utest.o(.text._ZN17IgnoredUtestShellC2EPKcS1_S1_i), UNUSED)

<P><STRONG><a name="[414]"></a>IgnoredUtestShell::IgnoredUtestShell__sub_object(const char*, const char*, const char*, int)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, utest.o(.text._ZN17IgnoredUtestShellC2EPKcS1_S1_i), UNUSED)

<P><STRONG><a name="[415]"></a>IgnoredUtestShell::IgnoredUtestShell()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, utest.o(.text._ZN17IgnoredUtestShellC2Ev), UNUSED)

<P><STRONG><a name="[416]"></a>IgnoredUtestShell::IgnoredUtestShell__sub_object()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, utest.o(.text._ZN17IgnoredUtestShellC2Ev), UNUSED)

<P><STRONG><a name="[14e]"></a>IgnoredUtestShell::~IgnoredUtestShell__deallocating()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utest.o(.text._ZN17IgnoredUtestShellD0Ev))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
</UL>
<P><STRONG><a name="[2ac]"></a>LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, int, long, long, const SimpleString&)</STRONG> (Thumb, 368 bytes, Stack size 48 bytes, testfailure.o(.text._ZN17LongsEqualFailureC2EP10UtestShellPKcillRK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, int, long, long, const SimpleString&) &rArr; TestFailure::createButWasString(const SimpleString&, const SimpleString&) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +(const SimpleString&) const
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(long)
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(long)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure__sub_object(UtestShell*, const char*, int)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createButWasString(const SimpleString&, const SimpleString&)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertLongsEqual(long, long, const char*, const char*, int, const TestTerminator&)
</UL>

<P><STRONG><a name="[417]"></a>LongsEqualFailure::LongsEqualFailure__sub_object(UtestShell*, const char*, int, long, long, const SimpleString&)</STRONG> (Thumb, 368 bytes, Stack size 48 bytes, testfailure.o(.text._ZN17LongsEqualFailureC2EP10UtestShellPKcillRK12SimpleString), UNUSED)

<P><STRONG><a name="[153]"></a>LongsEqualFailure::~LongsEqualFailure__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, testfailure.o(.text._ZN17LongsEqualFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LongsEqualFailure::~LongsEqualFailure__deallocating() &rArr; TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.rodata._ZTV17LongsEqualFailure)
</UL>
<P><STRONG><a name="[1a0]"></a>MemoryLeakFailure::~MemoryLeakFailure__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(.text._ZN17MemoryLeakFailureD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.rodata._ZTV25MemoryLeakWarningReporter)
</UL>
<P><STRONG><a name="[2ad]"></a>BinaryEqualFailure::BinaryEqualFailure(UtestShell*, const char*, int, const unsigned char*, const unsigned char*, unsigned, const SimpleString&)</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, testfailure.o(.text._ZN18BinaryEqualFailureC2EP10UtestShellPKciPKhS5_jRK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = BinaryEqualFailure::BinaryEqualFailure(UtestShell*, const char*, int, const unsigned char*, const unsigned char*, unsigned, const SimpleString&) &rArr; StringFromBinaryOrNull(const unsigned char*, unsigned) &rArr; StringFromBinary(const unsigned char*, unsigned) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinaryOrNull(const unsigned char*, unsigned)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinary(const unsigned char*, unsigned)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure__sub_object(UtestShell*, const char*, int)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, TestFailure::DifferenceFormat)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createButWasString(const SimpleString&, const SimpleString&)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertBinaryEqual(const void*, const void*, unsigned, const char*, const char*, int, const TestTerminator&)
</UL>

<P><STRONG><a name="[418]"></a>BinaryEqualFailure::BinaryEqualFailure__sub_object(UtestShell*, const char*, int, const unsigned char*, const unsigned char*, unsigned, const SimpleString&)</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, testfailure.o(.text._ZN18BinaryEqualFailureC2EP10UtestShellPKciPKhS5_jRK12SimpleString), UNUSED)

<P><STRONG><a name="[154]"></a>BinaryEqualFailure::~BinaryEqualFailure__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, testfailure.o(.text._ZN18BinaryEqualFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BinaryEqualFailure::~BinaryEqualFailure__deallocating() &rArr; TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.rodata._ZTV18BinaryEqualFailure)
</UL>
<P><STRONG><a name="[282]"></a>MemLeakScopedMutex::MemLeakScopedMutex__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(.text._ZN18MemLeakScopedMutexC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = MemLeakScopedMutex::MemLeakScopedMutex__sub_object() &rArr; MemoryLeakWarningPlugin::getGlobalDetector() &rArr; MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure*) &rArr; _Unwind_Resume &rArr; _ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb &rArr; unw_init_local &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::getMutex()
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScopedMutexLock::ScopedMutexLock(SimpleMutex*)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL46threadsafe_mem_leak_operator_new_array_nothrowj
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL44threadsafe_mem_leak_operator_new_array_debugjPKci
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL41threadsafe_mem_leak_operator_delete_arrayPv
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL40threadsafe_mem_leak_operator_new_nothrowj
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38threadsafe_mem_leak_operator_new_debugjPKci
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38threadsafe_mem_leak_operator_new_arrayj
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL35threadsafe_mem_leak_operator_deletePv
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32threadsafe_mem_leak_operator_newj
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27threadsafe_mem_leak_reallocPvjPKci
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26threadsafe_mem_leak_mallocjPKci
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24threadsafe_mem_leak_freePvPKci
</UL>

<P><STRONG><a name="[306]"></a>MemoryLeakDetector::removeMemoryLeakInformationWithoutCheckingOrDeallocatingTheMemoryButDeallocatingTheAccountInformation(TestMemoryAllocator*, void*, bool)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, memoryleakdetector.o(.text._ZN18MemoryLeakDetector101removeMemoryLeakInformationWithoutCheckingOrDeallocatingTheMemoryButDeallocatingTheAccountInformationEP19TestMemoryAllocatorPvb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::removeNode(char*)
</UL>

<P><STRONG><a name="[27a]"></a>MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, const char*, int, bool)</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, memoryleakdetector.o(.text._ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcib))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, const char*, int, bool) &rArr; MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode*, char*, unsigned, TestMemoryAllocator*, const char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator*, unsigned, const char*, int, bool)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode*, char*, unsigned, TestMemoryAllocator*, const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, bool)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL44threadsafe_mem_leak_operator_new_array_debugjPKci
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38threadsafe_mem_leak_operator_new_debugjPKci
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mem_leak_operator_new_array_debugjPKci
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27mem_leak_operator_new_debugjPKci
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26threadsafe_mem_leak_mallocjPKci
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15mem_leak_mallocjPKci
</UL>

<P><STRONG><a name="[27f]"></a>MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, bool)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, memoryleakdetector.o(.text._ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, bool) &rArr; MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, const char*, int, bool) &rArr; MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode*, char*, unsigned, TestMemoryAllocator*, const char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, const char*, int, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL46threadsafe_mem_leak_operator_new_array_nothrowj
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL40threadsafe_mem_leak_operator_new_nothrowj
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38threadsafe_mem_leak_operator_new_arrayj
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL35mem_leak_operator_new_array_nothrowj
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32threadsafe_mem_leak_operator_newj
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mem_leak_operator_new_nothrowj
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27mem_leak_operator_new_arrayj
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mem_leak_operator_newj
</UL>

<P><STRONG><a name="[36d]"></a>MemoryLeakDetector::stopChecking()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, memoryleakdetector.o(.text._ZN18MemoryLeakDetector12stopCheckingEv))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::postTestAction(UtestShell&, TestResult&)
</UL>

<P><STRONG><a name="[278]"></a>MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, const char*, int, bool)</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, memoryleakdetector.o(.text._ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcib))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, const char*, int, bool) &rArr; MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, bool) &rArr; MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, int, unsigned, TestMemoryAllocator*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, int, unsigned, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char*, int, TestMemoryAllocator*, MemoryLeakFailure*)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::removeNode(char*)
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMemoryAllocator::hasBeenDestroyed()
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, bool)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24threadsafe_mem_leak_freePvPKci
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13mem_leak_freePvPKci
</UL>

<P><STRONG><a name="[281]"></a>MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, bool)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, memoryleakdetector.o(.text._ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, bool) &rArr; MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, const char*, int, bool) &rArr; MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, bool) &rArr; MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, int, unsigned, TestMemoryAllocator*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, int, unsigned, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, const char*, int, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL41threadsafe_mem_leak_operator_delete_arrayPv
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL35threadsafe_mem_leak_operator_deletePv
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL30mem_leak_operator_delete_arrayPv
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24mem_leak_operator_deletePv
</UL>

<P><STRONG><a name="[27b]"></a>MemoryLeakDetector::reallocMemory(TestMemoryAllocator*, char*, unsigned, const char*, int, bool)</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, memoryleakdetector.o(.text._ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcib))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = MemoryLeakDetector::reallocMemory(TestMemoryAllocator*, char*, unsigned, const char*, int, bool) &rArr; MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, bool) &rArr; MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, int, unsigned, TestMemoryAllocator*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, int, unsigned, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char*, int, TestMemoryAllocator*, MemoryLeakFailure*)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::removeNode(char*)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator*, char*, unsigned, const char*, int, bool)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27threadsafe_mem_leak_reallocPvjPKci
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16mem_leak_reallocPvjPKci
</UL>

<P><STRONG><a name="[36c]"></a>MemoryLeakDetector::startChecking()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, memoryleakdetector.o(.text._ZN18MemoryLeakDetector13startCheckingEv))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::preTestAction(UtestShell&, TestResult&)
</UL>

<P><STRONG><a name="[277]"></a>MemoryLeakDetector::invalidateMemory(char*)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memoryleakdetector.o(.text._ZN18MemoryLeakDetector16invalidateMemoryEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemoryLeakDetector::invalidateMemory(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::retrieveNode(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL41threadsafe_mem_leak_operator_delete_arrayPv
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL35threadsafe_mem_leak_operator_deletePv
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL30mem_leak_operator_delete_arrayPv
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24threadsafe_mem_leak_freePvPKci
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24mem_leak_operator_deletePv
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13mem_leak_freePvPKci
</UL>

<P><STRONG><a name="[30f]"></a>MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, memoryleakdetector.o(.text._ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod) &rArr; MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod) &rArr; MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod)
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod)
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::FinalReport(int)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::postTestAction(UtestShell&, TestResult&)
</UL>

<P><STRONG><a name="[30c]"></a>MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, bool)</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, memoryleakdetector.o(.text._ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKciP19TestMemoryAllocatorb))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, bool) &rArr; MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, int, unsigned, TestMemoryAllocator*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, int, unsigned, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::matchingAllocation(TestMemoryAllocator*, TestMemoryAllocator*)
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::reallocMemory(TestMemoryAllocator*, char*, unsigned, const char*, int, bool)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, const char*, int, bool)
</UL>

<P><STRONG><a name="[311]"></a>MemoryLeakDetector::matchingAllocation(TestMemoryAllocator*, TestMemoryAllocator*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, memoryleakdetector.o(.text._ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_))
<BR><BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, bool)
</UL>

<P><STRONG><a name="[309]"></a>MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode*, char*, unsigned, TestMemoryAllocator*, const char*, int)</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, memoryleakdetector.o(.text._ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode*, char*, unsigned, TestMemoryAllocator*, const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator*, char*, unsigned, const char*, int, bool)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, const char*, int, bool)
</UL>

<P><STRONG><a name="[314]"></a>MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, memoryleakdetector.o(.text._ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod) &rArr; MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode*) &rArr; SimpleStringBuffer::addMemoryDump(const void*, unsigned) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode*)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode*, MemLeakPeriod)
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::report(MemLeakPeriod)
</UL>

<P><STRONG><a name="[374]"></a>MemoryLeakDetector::getCurrentAllocationNumber()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, memoryleakdetector.o(.text._ZN18MemoryLeakDetector26getCurrentAllocationNumberEv))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrashOnAllocationAllocator::alloc_memory(unsigned, const char*, int)
</UL>

<P><STRONG><a name="[30d]"></a>MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator*, char*, unsigned, const char*, int, bool)</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, memoryleakdetector.o(.text._ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcib))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator*, char*, unsigned, const char*, int, bool) &rArr; MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode*, char*, unsigned, TestMemoryAllocator*, const char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode*, char*, unsigned, TestMemoryAllocator*, const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::reallocMemory(TestMemoryAllocator*, char*, unsigned, const char*, int, bool)
</UL>

<P><STRONG><a name="[308]"></a>MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator*, unsigned, const char*, int, bool)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, memoryleakdetector.o(.text._ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcib))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator*, unsigned, const char*, int, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, const char*, int, bool)
</UL>

<P><STRONG><a name="[319]"></a>MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, memoryleakdetector.o(.text._ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod() &rArr; MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod)
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode*, MemLeakPeriod)
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::postTestAction(UtestShell&, TestResult&)
</UL>

<P><STRONG><a name="[371]"></a>MemoryLeakDetector::enable()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, memoryleakdetector.o(.text._ZN18MemoryLeakDetector6enableEv))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString&, MemoryLeakDetector*)
</UL>

<P><STRONG><a name="[31a]"></a>MemoryLeakDetector::report(MemLeakPeriod)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, memoryleakdetector.o(.text._ZN18MemoryLeakDetector6reportE13MemLeakPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MemoryLeakDetector::report(MemLeakPeriod) &rArr; MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod) &rArr; MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode*) &rArr; SimpleStringBuffer::addMemoryDump(const void*, unsigned) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod)
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::FinalReport(int)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::postTestAction(UtestShell&, TestResult&)
</UL>

<P><STRONG><a name="[304]"></a>MemoryLeakDetector::getMutex()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, memoryleakdetector.o(.text._ZN18MemoryLeakDetector8getMutexEv))
<BR><BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemLeakScopedMutex::MemLeakScopedMutex__sub_object()
</UL>

<P><STRONG><a name="[31b]"></a>MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure*)</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, memoryleakdetector.o(.text._ZN18MemoryLeakDetectorC2EP17MemoryLeakFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure*) &rArr; _Unwind_Resume &rArr; _ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb &rArr; unw_init_local &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*, const char*, int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleMutex::SimpleMutex()
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
</UL>

<P><STRONG><a name="[419]"></a>MemoryLeakDetector::MemoryLeakDetector__sub_object(MemoryLeakFailure*)</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, memoryleakdetector.o(.text._ZN18MemoryLeakDetectorC2EP17MemoryLeakFailure), UNUSED)

<P><STRONG><a name="[156]"></a>MemoryLeakDetector::~MemoryLeakDetector__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, memoryleakdetector.o(.text._ZN18MemoryLeakDetectorD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MemoryLeakDetector::~MemoryLeakDetector__deallocating() &rArr; MemoryLeakDetector::~MemoryLeakDetector__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::~MemoryLeakDetector__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakdetector.o(.rodata._ZTV18MemoryLeakDetector)
</UL>
<P><STRONG><a name="[31d]"></a>MemoryLeakDetector::~MemoryLeakDetector()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memoryleakdetector.o(.text._ZN18MemoryLeakDetectorD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleMutex::~SimpleMutex()
</UL>

<P><STRONG><a name="[155]"></a>MemoryLeakDetector::~MemoryLeakDetector__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memoryleakdetector.o(.text._ZN18MemoryLeakDetectorD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemoryLeakDetector::~MemoryLeakDetector__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::~MemoryLeakDetector__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakdetector.o(.rodata._ZTV18MemoryLeakDetector)
</UL>
<P><STRONG><a name="[31e]"></a>SimpleStringBuffer::addMemoryDump(const void*, unsigned)</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, memoryleakdetector.o(.text._ZN18SimpleStringBuffer13addMemoryDumpEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SimpleStringBuffer::addMemoryDump(const void*, unsigned) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode*)
</UL>

<P><STRONG><a name="[31f]"></a>SimpleStringBuffer::add(const char*, ...)</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, memoryleakdetector.o(.text._ZN18SimpleStringBuffer3addEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::addDeallocationLocation(const char*, int, TestMemoryAllocator*)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, int, unsigned, TestMemoryAllocator*)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::addMemoryLeakFooter(int)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode*)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, int, unsigned, TestMemoryAllocator*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringBuffer::addMemoryDump(const void*, unsigned)
</UL>

<P><STRONG><a name="[2a9]"></a>StringEqualFailure::StringEqualFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, testfailure.o(.text._ZN18StringEqualFailureC2EP10UtestShellPKciS3_S3_RK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = StringEqualFailure::StringEqualFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&) &rArr; TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, TestFailure::DifferenceFormat) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromOrNull(const char*)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure__sub_object(UtestShell*, const char*, int)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, TestFailure::DifferenceFormat)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createButWasString(const SimpleString&, const SimpleString&)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNEqual(const char*, const char*, unsigned, const char*, const char*, int, const TestTerminator&)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrEqual(const char*, const char*, const char*, const char*, int, const TestTerminator&)
</UL>

<P><STRONG><a name="[41a]"></a>StringEqualFailure::StringEqualFailure__sub_object(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, testfailure.o(.text._ZN18StringEqualFailureC2EP10UtestShellPKciS3_S3_RK12SimpleString), UNUSED)

<P><STRONG><a name="[157]"></a>StringEqualFailure::~StringEqualFailure__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, testfailure.o(.text._ZN18StringEqualFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StringEqualFailure::~StringEqualFailure__deallocating() &rArr; TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.rodata._ZTV18StringEqualFailure)
</UL>
<P><STRONG><a name="[320]"></a>TeamCityTestOutput::printEscaped(const char*)</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, teamcitytestoutput.o(.text._ZN18TeamCityTestOutput12printEscapedEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TeamCityTestOutput::printEscaped(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printFailure(const TestFailure&)
</UL>

<P><STRONG><a name="[15e]"></a>TeamCityTestOutput::printFailure(const TestFailure&)</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, teamcitytestoutput.o(.text._ZN18TeamCityTestOutput12printFailureERK11TestFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = TeamCityTestOutput::printFailure(const TestFailure&) &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocStringBuffer(char*, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::isInHelperFunction() const
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::isOutsideTestFile() const
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printEscaped(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
</UL>
<P><STRONG><a name="[15b]"></a>TeamCityTestOutput::printCurrentTestEnded(const TestResult&)</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, teamcitytestoutput.o(.text._ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = TeamCityTestOutput::printCurrentTestEnded(const TestResult&) &rArr; UtestShell::getName() const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getName() const
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestResult::getCurrentTestTotalExecutionTime() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
</UL>
<P><STRONG><a name="[15d]"></a>TeamCityTestOutput::printCurrentGroupEnded(const TestResult&)</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, teamcitytestoutput.o(.text._ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = TeamCityTestOutput::printCurrentGroupEnded(const TestResult&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ==(const SimpleString&, const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
</UL>
<P><STRONG><a name="[15a]"></a>TeamCityTestOutput::printCurrentTestStarted(const UtestShell&)</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, teamcitytestoutput.o(.text._ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = TeamCityTestOutput::printCurrentTestStarted(const UtestShell&) &rArr; UtestShell::getName() const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getName() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
</UL>
<P><STRONG><a name="[15c]"></a>TeamCityTestOutput::printCurrentGroupStarted(const UtestShell&)</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, teamcitytestoutput.o(.text._ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = TeamCityTestOutput::printCurrentGroupStarted(const UtestShell&) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getGroup() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
</UL>
<P><STRONG><a name="[321]"></a>TeamCityTestOutput::TeamCityTestOutput()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, teamcitytestoutput.o(.text._ZN18TeamCityTestOutputC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = TeamCityTestOutput::TeamCityTestOutput() &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleTestOutput::ConsoleTestOutput__sub_object()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::~TestOutput__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::createTeamCityOutput()
</UL>

<P><STRONG><a name="[41b]"></a>TeamCityTestOutput::TeamCityTestOutput__sub_object()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, teamcitytestoutput.o(.text._ZN18TeamCityTestOutputC2Ev), UNUSED)

<P><STRONG><a name="[159]"></a>TeamCityTestOutput::~TeamCityTestOutput__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, teamcitytestoutput.o(.text._ZN18TeamCityTestOutputD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TeamCityTestOutput::~TeamCityTestOutput__deallocating() &rArr; TeamCityTestOutput::~TeamCityTestOutput__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::~TeamCityTestOutput__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
</UL>
<P><STRONG><a name="[322]"></a>TeamCityTestOutput::~TeamCityTestOutput()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, teamcitytestoutput.o(.text._ZN18TeamCityTestOutputD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::~TestOutput__sub_object()
</UL>

<P><STRONG><a name="[158]"></a>TeamCityTestOutput::~TeamCityTestOutput__sub_object()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, teamcitytestoutput.o(.text._ZN18TeamCityTestOutputD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TeamCityTestOutput::~TeamCityTestOutput__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::~TeamCityTestOutput__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> teamcitytestoutput.o(.rodata._ZTV18TeamCityTestOutput)
</UL>
<P><STRONG><a name="[169]"></a>CompositeTestOutput::printBuffer(const char*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, testoutput.o(.text._ZN19CompositeTestOutput11printBufferEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompositeTestOutput::printBuffer(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.rodata._ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[16c]"></a>CompositeTestOutput::printDouble(double)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, testoutput.o(.text._ZN19CompositeTestOutput11printDoubleEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompositeTestOutput::printDouble(double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.rodata._ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[16d]"></a>CompositeTestOutput::printFailure(const TestFailure&)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, testoutput.o(.text._ZN19CompositeTestOutput12printFailureERK11TestFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompositeTestOutput::printFailure(const TestFailure&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.rodata._ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[170]"></a>CompositeTestOutput::setOutputOne(TestOutput*)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, testoutput.o(.text._ZN19CompositeTestOutput12setOutputOneEP10TestOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompositeTestOutput::setOutputOne(TestOutput*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.rodata._ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[171]"></a>CompositeTestOutput::setOutputTwo(TestOutput*)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, testoutput.o(.text._ZN19CompositeTestOutput12setOutputTwoEP10TestOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompositeTestOutput::setOutputTwo(TestOutput*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.rodata._ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[162]"></a>CompositeTestOutput::printTestsEnded(const TestResult&)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, testoutput.o(.text._ZN19CompositeTestOutput15printTestsEndedERK10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompositeTestOutput::printTestsEnded(const TestResult&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.rodata._ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[161]"></a>CompositeTestOutput::printTestsStarted()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, testoutput.o(.text._ZN19CompositeTestOutput17printTestsStartedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CompositeTestOutput::printTestsStarted()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.rodata._ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[16e]"></a>CompositeTestOutput::setProgressIndicator(const char*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, testoutput.o(.text._ZN19CompositeTestOutput20setProgressIndicatorEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompositeTestOutput::setProgressIndicator(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.rodata._ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[164]"></a>CompositeTestOutput::printCurrentTestEnded(const TestResult&)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, testoutput.o(.text._ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompositeTestOutput::printCurrentTestEnded(const TestResult&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.rodata._ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[166]"></a>CompositeTestOutput::printCurrentGroupEnded(const TestResult&)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, testoutput.o(.text._ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompositeTestOutput::printCurrentGroupEnded(const TestResult&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.rodata._ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[163]"></a>CompositeTestOutput::printCurrentTestStarted(const UtestShell&)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, testoutput.o(.text._ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompositeTestOutput::printCurrentTestStarted(const UtestShell&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.rodata._ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[165]"></a>CompositeTestOutput::printCurrentGroupStarted(const UtestShell&)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, testoutput.o(.text._ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompositeTestOutput::printCurrentGroupStarted(const UtestShell&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.rodata._ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[168]"></a>CompositeTestOutput::color()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, testoutput.o(.text._ZN19CompositeTestOutput5colorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CompositeTestOutput::color()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.rodata._ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[16f]"></a>CompositeTestOutput::flush()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, testoutput.o(.text._ZN19CompositeTestOutput5flushEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CompositeTestOutput::flush()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.rodata._ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[16a]"></a>CompositeTestOutput::print(const char*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, testoutput.o(.text._ZN19CompositeTestOutput5printEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompositeTestOutput::print(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.rodata._ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[16b]"></a>CompositeTestOutput::print(long)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, testoutput.o(.text._ZN19CompositeTestOutput5printEl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompositeTestOutput::print(long)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.rodata._ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[167]"></a>CompositeTestOutput::verbose()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, testoutput.o(.text._ZN19CompositeTestOutput7verboseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CompositeTestOutput::verbose()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.rodata._ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[357]"></a>CompositeTestOutput::CompositeTestOutput()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, testoutput.o(.text._ZN19CompositeTestOutputC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::createCompositeOutput(TestOutput*, TestOutput*)
</UL>

<P><STRONG><a name="[41c]"></a>CompositeTestOutput::CompositeTestOutput__sub_object()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, testoutput.o(.text._ZN19CompositeTestOutputC2Ev), UNUSED)

<P><STRONG><a name="[160]"></a>CompositeTestOutput::~CompositeTestOutput__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, testoutput.o(.text._ZN19CompositeTestOutputD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompositeTestOutput::~CompositeTestOutput__deallocating() &rArr; CompositeTestOutput::~CompositeTestOutput__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompositeTestOutput::~CompositeTestOutput__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.rodata._ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[41d]"></a>CompositeTestOutput::~CompositeTestOutput()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, testoutput.o(.text._ZN19CompositeTestOutputD2Ev), UNUSED)

<P><STRONG><a name="[15f]"></a>CompositeTestOutput::~CompositeTestOutput__sub_object()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, testoutput.o(.text._ZN19CompositeTestOutputD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CompositeTestOutput::~CompositeTestOutput__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompositeTestOutput::~CompositeTestOutput__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.rodata._ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[2b1]"></a>DoublesEqualFailure::DoublesEqualFailure(UtestShell*, const char*, int, double, double, double, const SimpleString&)</STRONG> (Thumb, 376 bytes, Stack size 56 bytes, testfailure.o(.text._ZN19DoublesEqualFailureC2EP10UtestShellPKcidddRK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = DoublesEqualFailure::DoublesEqualFailure(UtestShell*, const char*, int, double, double, double, const SimpleString&) &rArr; StringFrom(double, int) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(double, int)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure__sub_object(UtestShell*, const char*, int)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createButWasString(const SimpleString&, const SimpleString&)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertDoublesEqual(double, double, double, const char*, const char*, int, const TestTerminator&)
</UL>

<P><STRONG><a name="[41e]"></a>DoublesEqualFailure::DoublesEqualFailure__sub_object(UtestShell*, const char*, int, double, double, double, const SimpleString&)</STRONG> (Thumb, 376 bytes, Stack size 56 bytes, testfailure.o(.text._ZN19DoublesEqualFailureC2EP10UtestShellPKcidddRK12SimpleString), UNUSED)

<P><STRONG><a name="[172]"></a>DoublesEqualFailure::~DoublesEqualFailure__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, testfailure.o(.text._ZN19DoublesEqualFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DoublesEqualFailure::~DoublesEqualFailure__deallocating() &rArr; TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.rodata._ZTV19DoublesEqualFailure)
</UL>
<P><STRONG><a name="[2fe]"></a>JUnitTestOutputImpl::JUnitTestOutputImpl__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, junittestoutput.o(.text._ZN19JUnitTestOutputImplC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = JUnitTestOutputImpl::JUnitTestOutputImpl__sub_object() &rArr; JUnitTestGroupResult::JUnitTestGroupResult__sub_object() &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestGroupResult::JUnitTestGroupResult__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::JUnitTestOutput()
</UL>

<P><STRONG><a name="[300]"></a>JUnitTestOutputImpl::~JUnitTestOutputImpl__sub_object()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, junittestoutput.o(.text._ZN19JUnitTestOutputImplD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::~JUnitTestOutput()
</UL>

<P><STRONG><a name="[177]"></a>TestMemoryAllocator::alloc_name()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testmemoryallocator.o(.text._ZN19TestMemoryAllocator10alloc_nameEv))
<BR>[Address Reference Count : 4]<UL><LI> testmemoryallocator.o(.rodata._ZTV19TestMemoryAllocator)
<LI> testmemoryallocator.o(.rodata._ZTV26CrashOnAllocationAllocator)
<LI> testmemoryallocator.o(.rodata._ZTV20NullUnknownAllocator)
<LI> testmemoryallocator.o(.rodata._ZTV23FailableMemoryAllocator)
</UL>
<P><STRONG><a name="[175]"></a>TestMemoryAllocator::free_memory(char*, const char*, int)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, testmemoryallocator.o(.text._ZN19TestMemoryAllocator11free_memoryEPcPKci))
<BR>[Address Reference Count : 3]<UL><LI> testmemoryallocator.o(.rodata._ZTV19TestMemoryAllocator)
<LI> testmemoryallocator.o(.rodata._ZTV26CrashOnAllocationAllocator)
<LI> testmemoryallocator.o(.rodata._ZTV23FailableMemoryAllocator)
</UL>
<P><STRONG><a name="[174]"></a>TestMemoryAllocator::alloc_memory(unsigned, const char*, int)</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, testmemoryallocator.o(.text._ZN19TestMemoryAllocator12alloc_memoryEjPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = TestMemoryAllocator::alloc_memory(unsigned, const char*, int) &rArr; UtestShell::getCurrent() &rArr; OutsideTestRunnerUTest::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalTestTerminator::~NormalTestTerminator()
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getCurrent()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrashOnAllocationAllocator::alloc_memory(unsigned, const char*, int)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailableMemoryAllocator::alloc_memory(unsigned, const char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmemoryallocator.o(.rodata._ZTV19TestMemoryAllocator)
</UL>
<P><STRONG><a name="[179]"></a>TestMemoryAllocator::isOfEqualType(TestMemoryAllocator*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, testmemoryallocator.o(.text._ZN19TestMemoryAllocator13isOfEqualTypeEPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestMemoryAllocator::isOfEqualType(TestMemoryAllocator*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrCmp(const char*, const char*)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> testmemoryallocator.o(.rodata._ZTV19TestMemoryAllocator)
<LI> testmemoryallocator.o(.rodata._ZTV26CrashOnAllocationAllocator)
<LI> testmemoryallocator.o(.rodata._ZTV20NullUnknownAllocator)
<LI> testmemoryallocator.o(.rodata._ZTV23FailableMemoryAllocator)
</UL>
<P><STRONG><a name="[30a]"></a>TestMemoryAllocator::hasBeenDestroyed()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testmemoryallocator.o(.text._ZN19TestMemoryAllocator16hasBeenDestroyedEv))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, const char*, int, bool)
</UL>

<P><STRONG><a name="[17b]"></a>TestMemoryAllocator::freeMemoryLeakNode(char*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, testmemoryallocator.o(.text._ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc))
<BR>[Address Reference Count : 4]<UL><LI> testmemoryallocator.o(.rodata._ZTV19TestMemoryAllocator)
<LI> testmemoryallocator.o(.rodata._ZTV26CrashOnAllocationAllocator)
<LI> testmemoryallocator.o(.rodata._ZTV20NullUnknownAllocator)
<LI> testmemoryallocator.o(.rodata._ZTV23FailableMemoryAllocator)
</UL>
<P><STRONG><a name="[17a]"></a>TestMemoryAllocator::allocMemoryLeakNode(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, testmemoryallocator.o(.text._ZN19TestMemoryAllocator19allocMemoryLeakNodeEj))
<BR>[Address Reference Count : 3]<UL><LI> testmemoryallocator.o(.rodata._ZTV19TestMemoryAllocator)
<LI> testmemoryallocator.o(.rodata._ZTV26CrashOnAllocationAllocator)
<LI> testmemoryallocator.o(.rodata._ZTV20NullUnknownAllocator)
</UL>
<P><STRONG><a name="[176]"></a>TestMemoryAllocator::name()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testmemoryallocator.o(.text._ZN19TestMemoryAllocator4nameEv))
<BR>[Address Reference Count : 4]<UL><LI> testmemoryallocator.o(.rodata._ZTV19TestMemoryAllocator)
<LI> testmemoryallocator.o(.rodata._ZTV26CrashOnAllocationAllocator)
<LI> testmemoryallocator.o(.rodata._ZTV20NullUnknownAllocator)
<LI> testmemoryallocator.o(.rodata._ZTV23FailableMemoryAllocator)
</UL>
<P><STRONG><a name="[178]"></a>TestMemoryAllocator::free_name()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testmemoryallocator.o(.text._ZN19TestMemoryAllocator9free_nameEv))
<BR>[Address Reference Count : 4]<UL><LI> testmemoryallocator.o(.rodata._ZTV19TestMemoryAllocator)
<LI> testmemoryallocator.o(.rodata._ZTV26CrashOnAllocationAllocator)
<LI> testmemoryallocator.o(.rodata._ZTV20NullUnknownAllocator)
<LI> testmemoryallocator.o(.rodata._ZTV23FailableMemoryAllocator)
</UL>
<P><STRONG><a name="[41f]"></a>TestMemoryAllocator::TestMemoryAllocator(const char*, const char*, const char*)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, testmemoryallocator.o(.text._ZN19TestMemoryAllocatorC2EPKcS1_S1_), UNUSED)

<P><STRONG><a name="[420]"></a>TestMemoryAllocator::TestMemoryAllocator__sub_object(const char*, const char*, const char*)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, testmemoryallocator.o(.text._ZN19TestMemoryAllocatorC2EPKcS1_S1_), UNUSED)

<P><STRONG><a name="[173]"></a>TestMemoryAllocator::~TestMemoryAllocator__deallocating()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testmemoryallocator.o(.text._ZN19TestMemoryAllocatorD0Ev))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmemoryallocator.o(.rodata._ZTV19TestMemoryAllocator)
</UL>
<P><STRONG><a name="[421]"></a>TestMemoryAllocator::~TestMemoryAllocator()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, testmemoryallocator.o(.text._ZN19TestMemoryAllocatorD2Ev), UNUSED)

<P><STRONG><a name="[72]"></a>TestMemoryAllocator::~TestMemoryAllocator__sub_object()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, testmemoryallocator.o(.text._ZN19TestMemoryAllocatorD2Ev))
<BR>[Address Reference Count : 6]<UL><LI> memoryleakwarningplugin.o(.text._Z26crash_on_allocation_numberj)
<LI> testmemoryallocator.o(.text._ZN20NullUnknownAllocator16defaultAllocatorEv)
<LI> testmemoryallocator.o(.rodata._ZTV19TestMemoryAllocator)
<LI> testmemoryallocator.o(.rodata._ZTV26CrashOnAllocationAllocator)
<LI> testmemoryallocator.o(.rodata._ZTV20NullUnknownAllocator)
<LI> testmemoryallocator.o(.rodata._ZTV23FailableMemoryAllocator)
</UL>
<P><STRONG><a name="[324]"></a>CommandLineArguments::AddNameFilter(int, const char**, int&)</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, commandlinearguments.o(.text._ZN20CommandLineArguments13AddNameFilterEiPPKcRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = CommandLineArguments::AddNameFilter(int, const char**, int&) &rArr; CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::TestFilter(const SimpleString&)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::add(TestFilter*)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*, const char*, int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
</UL>

<P><STRONG><a name="[327]"></a>CommandLineArguments::SetOutputType(int, const char**, int&)</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, commandlinearguments.o(.text._ZN20CommandLineArguments13SetOutputTypeEiPPKcRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = CommandLineArguments::SetOutputType(int, const char**, int&) &rArr; CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ==(const SimpleString&, const SimpleString&)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
</UL>

<P><STRONG><a name="[328]"></a>CommandLineArguments::AddGroupFilter(int, const char**, int&)</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, commandlinearguments.o(.text._ZN20CommandLineArguments14AddGroupFilterEiPPKcRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = CommandLineArguments::AddGroupFilter(int, const char**, int&) &rArr; CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::TestFilter(const SimpleString&)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::add(TestFilter*)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*, const char*, int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
</UL>

<P><STRONG><a name="[329]"></a>CommandLineArguments::SetPackageName(int, const char**, int&)</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, commandlinearguments.o(.text._ZN20CommandLineArguments14SetPackageNameEiPPKcRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = CommandLineArguments::SetPackageName(int, const char**, int&) &rArr; CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
</UL>

<P><STRONG><a name="[32a]"></a>CommandLineArguments::SetRepeatCount(int, const char**, int&)</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, commandlinearguments.o(.text._ZN20CommandLineArguments14SetRepeatCountEiPPKcRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = CommandLineArguments::SetRepeatCount(int, const char**, int&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::AtoI(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
</UL>

<P><STRONG><a name="[325]"></a>CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&)</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, commandlinearguments.o(.text._ZN20CommandLineArguments17getParameterFieldEiPPKcRiRK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddTestToRunBasedOnVerboseOutput(int, const char**, int&, const char*)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeStrictGroupFilter(int, const char**, int&)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeStrictNameFilter(int, const char**, int&)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeGroupFilter(int, const char**, int&)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddStrictGroupFilter(int, const char**, int&)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeNameFilter(int, const char**, int&)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddStrictNameFilter(int, const char**, int&)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::SetPackageName(int, const char**, int&)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddGroupFilter(int, const char**, int&)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::SetOutputType(int, const char**, int&)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddNameFilter(int, const char**, int&)
</UL>

<P><STRONG><a name="[32c]"></a>CommandLineArguments::AddStrictNameFilter(int, const char**, int&)</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, commandlinearguments.o(.text._ZN20CommandLineArguments19AddStrictNameFilterEiPPKcRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = CommandLineArguments::AddStrictNameFilter(int, const char**, int&) &rArr; CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::TestFilter(const SimpleString&)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::add(TestFilter*)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::strictMatching()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*, const char*, int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
</UL>

<P><STRONG><a name="[32e]"></a>CommandLineArguments::AddExcludeNameFilter(int, const char**, int&)</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, commandlinearguments.o(.text._ZN20CommandLineArguments20AddExcludeNameFilterEiPPKcRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = CommandLineArguments::AddExcludeNameFilter(int, const char**, int&) &rArr; CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::TestFilter(const SimpleString&)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::add(TestFilter*)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::invertMatching()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*, const char*, int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
</UL>

<P><STRONG><a name="[330]"></a>CommandLineArguments::AddStrictGroupFilter(int, const char**, int&)</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, commandlinearguments.o(.text._ZN20CommandLineArguments20AddStrictGroupFilterEiPPKcRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = CommandLineArguments::AddStrictGroupFilter(int, const char**, int&) &rArr; CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::TestFilter(const SimpleString&)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::add(TestFilter*)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::strictMatching()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*, const char*, int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
</UL>

<P><STRONG><a name="[331]"></a>CommandLineArguments::AddExcludeGroupFilter(int, const char**, int&)</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, commandlinearguments.o(.text._ZN20CommandLineArguments21AddExcludeGroupFilterEiPPKcRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = CommandLineArguments::AddExcludeGroupFilter(int, const char**, int&) &rArr; CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::TestFilter(const SimpleString&)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::add(TestFilter*)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::invertMatching()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*, const char*, int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
</UL>

<P><STRONG><a name="[332]"></a>CommandLineArguments::AddExcludeStrictNameFilter(int, const char**, int&)</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, commandlinearguments.o(.text._ZN20CommandLineArguments26AddExcludeStrictNameFilterEiPPKcRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = CommandLineArguments::AddExcludeStrictNameFilter(int, const char**, int&) &rArr; CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::TestFilter(const SimpleString&)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::add(TestFilter*)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::strictMatching()
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::invertMatching()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*, const char*, int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
</UL>

<P><STRONG><a name="[333]"></a>CommandLineArguments::AddExcludeStrictGroupFilter(int, const char**, int&)</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, commandlinearguments.o(.text._ZN20CommandLineArguments27AddExcludeStrictGroupFilterEiPPKcRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = CommandLineArguments::AddExcludeStrictGroupFilter(int, const char**, int&) &rArr; CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::TestFilter(const SimpleString&)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::add(TestFilter*)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::strictMatching()
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::invertMatching()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*, const char*, int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
</UL>

<P><STRONG><a name="[334]"></a>CommandLineArguments::AddTestToRunBasedOnVerboseOutput(int, const char**, int&, const char*)</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, commandlinearguments.o(.text._ZN20CommandLineArguments32AddTestToRunBasedOnVerboseOutputEiPPKcRiS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = CommandLineArguments::AddTestToRunBasedOnVerboseOutput(int, const char**, int&, const char*) &rArr; CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned, unsigned) const
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::at(unsigned) const
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subStringFromTill(char, char) const
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::TestFilter(const SimpleString&)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::add(TestFilter*)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::strictMatching()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*, const char*, int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
</UL>

<P><STRONG><a name="[337]"></a>CommandLineArguments::parse(TestPlugin*)</STRONG> (Thumb, 1036 bytes, Stack size 56 bytes, commandlinearguments.o(.text._ZN20CommandLineArguments5parseEP10TestPlugin))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = CommandLineArguments::parse(TestPlugin*) &rArr; CommandLineArguments::AddTestToRunBasedOnVerboseOutput(int, const char**, int&, const char*) &rArr; CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ==(const SimpleString&, const SimpleString&)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::startsWith(const SimpleString&) const
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddTestToRunBasedOnVerboseOutput(int, const char**, int&, const char*)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeStrictGroupFilter(int, const char**, int&)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeStrictNameFilter(int, const char**, int&)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeGroupFilter(int, const char**, int&)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddStrictGroupFilter(int, const char**, int&)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeNameFilter(int, const char**, int&)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddStrictNameFilter(int, const char**, int&)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::SetRepeatCount(int, const char**, int&)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::SetPackageName(int, const char**, int&)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddGroupFilter(int, const char**, int&)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::SetOutputType(int, const char**, int&)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddNameFilter(int, const char**, int&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::parseArguments(TestPlugin*)
</UL>

<P><STRONG><a name="[339]"></a>CommandLineArguments::CommandLineArguments(int, const char**)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, commandlinearguments.o(.text._ZN20CommandLineArgumentsC2EiPPKc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::CommandLineTestRunner(int, const char**, TestRegistry*)
</UL>

<P><STRONG><a name="[422]"></a>CommandLineArguments::CommandLineArguments__sub_object(int, const char**)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, commandlinearguments.o(.text._ZN20CommandLineArgumentsC2EiPPKc), UNUSED)

<P><STRONG><a name="[17d]"></a>CommandLineArguments::~CommandLineArguments__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, commandlinearguments.o(.text._ZN20CommandLineArgumentsD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CommandLineArguments::~CommandLineArguments__deallocating() &rArr; CommandLineArguments::~CommandLineArguments__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::~CommandLineArguments__sub_object()
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandlinearguments.o(.rodata._ZTV20CommandLineArguments)
</UL>
<P><STRONG><a name="[33a]"></a>CommandLineArguments::~CommandLineArguments()</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, commandlinearguments.o(.text._ZN20CommandLineArgumentsD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::getNext() const
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>

<P><STRONG><a name="[17c]"></a>CommandLineArguments::~CommandLineArguments__sub_object()</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, commandlinearguments.o(.text._ZN20CommandLineArgumentsD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CommandLineArguments::~CommandLineArguments__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::~CommandLineArguments__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandlinearguments.o(.rodata._ZTV20CommandLineArguments)
</UL>
<P><STRONG><a name="[323]"></a>JUnitTestGroupResult::JUnitTestGroupResult__sub_object()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, junittestoutput.o(.text._ZN20JUnitTestGroupResultC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = JUnitTestGroupResult::JUnitTestGroupResult__sub_object() &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutputImpl::JUnitTestOutputImpl__sub_object()
</UL>

<P><STRONG><a name="[180]"></a>NormalTestTerminator::~NormalTestTerminator__deallocating()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utest.o(.text._ZN20NormalTestTerminatorD0Ev))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.rodata._ZTV20NormalTestTerminator)
</UL>
<P><STRONG><a name="[183]"></a>NullUnknownAllocator::free_memory(char*, const char*, int)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testmemoryallocator.o(.text._ZN20NullUnknownAllocator11free_memoryEPcPKci))
<BR>[Address Reference Count : 1]<UL><LI> testmemoryallocator.o(.rodata._ZTV20NullUnknownAllocator)
</UL>
<P><STRONG><a name="[182]"></a>NullUnknownAllocator::alloc_memory(unsigned, const char*, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testmemoryallocator.o(.text._ZN20NullUnknownAllocator12alloc_memoryEjPKci))
<BR>[Address Reference Count : 1]<UL><LI> testmemoryallocator.o(.rodata._ZTV20NullUnknownAllocator)
</UL>
<P><STRONG><a name="[33c]"></a>NullUnknownAllocator::defaultAllocator()</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, testmemoryallocator.o(.text._ZN20NullUnknownAllocator16defaultAllocatorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = NullUnknownAllocator::defaultAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char*, int, TestMemoryAllocator*, MemoryLeakFailure*)
</UL>

<P><STRONG><a name="[423]"></a>NullUnknownAllocator::NullUnknownAllocator()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, testmemoryallocator.o(.text._ZN20NullUnknownAllocatorC2Ev), UNUSED)

<P><STRONG><a name="[424]"></a>NullUnknownAllocator::NullUnknownAllocator__sub_object()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, testmemoryallocator.o(.text._ZN20NullUnknownAllocatorC2Ev), UNUSED)

<P><STRONG><a name="[181]"></a>NullUnknownAllocator::~NullUnknownAllocator__deallocating()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testmemoryallocator.o(.text._ZN20NullUnknownAllocatorD0Ev))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmemoryallocator.o(.rodata._ZTV20NullUnknownAllocator)
</UL>
<P><STRONG><a name="[33d]"></a>CommandLineTestRunner::RunAllTests(int, const char**)</STRONG> (Thumb, 216 bytes, Stack size 80 bytes, commandlinetestrunner.o(.text._ZN21CommandLineTestRunner11RunAllTestsEiPPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = CommandLineTestRunner::RunAllTests(int, const char**) &rArr; CommandLineTestRunner::runAllTestsMain() &rArr; CommandLineTestRunner::parseArguments(TestPlugin*) &rArr; CommandLineArguments::parse(TestPlugin*) &rArr; CommandLineArguments::AddTestToRunBasedOnVerboseOutput(int, const char**, int&, const char*) &rArr; CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &lang;&lang;(TestOutput&, const char*)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString&, MemoryLeakDetector*)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::FinalReport(int)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::~CommandLineTestRunner__sub_object()
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::CommandLineTestRunner__sub_object(int, const char**, TestRegistry*)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTestsMain()
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleTestOutput::ConsoleTestOutput__sub_object()
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::getCurrentRegistry()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::~TestOutput__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::RunAllTests(int, char**)
</UL>

<P><STRONG><a name="[344]"></a>CommandLineTestRunner::RunAllTests(int, char**)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, commandlinetestrunner.o(.text._ZN21CommandLineTestRunner11RunAllTestsEiPPc), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::RunAllTests(int, const char**)
</UL>

<P><STRONG><a name="[345]"></a>CommandLineTestRunner::runAllTests()</STRONG> (Thumb, 168 bytes, Stack size 80 bytes, commandlinetestrunner.o(.text._ZN21CommandLineTestRunner11runAllTestsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = CommandLineTestRunner::runAllTests() &rArr; CommandLineTestRunner::initializeTestRun()
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::isListingTestGroupAndCaseNames() const
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::isListingTestGroupNames() const
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getRepeatCount() const
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::initializeTestRun()
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestResult::~TestResult()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestResult::TestResult(TestOutput&)
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTestsMain()
</UL>

<P><STRONG><a name="[34b]"></a>CommandLineTestRunner::parseArguments(TestPlugin*)</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, commandlinetestrunner.o(.text._ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = CommandLineTestRunner::parseArguments(TestPlugin*) &rArr; CommandLineArguments::parse(TestPlugin*) &rArr; CommandLineArguments::AddTestToRunBasedOnVerboseOutput(int, const char**, int&, const char*) &rArr; CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::isVerbose() const
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::usage() const
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::isTeamCityOutput() const
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getPackageName() const
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::isJUnitOutput() const
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTestsMain()
</UL>

<P><STRONG><a name="[341]"></a>CommandLineTestRunner::runAllTestsMain()</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, commandlinetestrunner.o(.text._ZN21CommandLineTestRunner15runAllTestsMainEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = CommandLineTestRunner::runAllTestsMain() &rArr; CommandLineTestRunner::parseArguments(TestPlugin*) &rArr; CommandLineArguments::parse(TestPlugin*) &rArr; CommandLineArguments::AddTestToRunBasedOnVerboseOutput(int, const char**, int&, const char*) &rArr; CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::parseArguments(TestPlugin*)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTests()
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPointerPlugin::SetPointerPlugin(const SimpleString&)
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::~TestPlugin__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::RunAllTests(int, const char**)
</UL>

<P><STRONG><a name="[187]"></a>CommandLineTestRunner::createJUnitOutput(const SimpleString&)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, commandlinetestrunner.o(.text._ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = CommandLineTestRunner::createJUnitOutput(const SimpleString&) &rArr; JUnitTestOutput::JUnitTestOutput() &rArr; JUnitTestOutputImpl::JUnitTestOutputImpl__sub_object() &rArr; JUnitTestGroupResult::JUnitTestGroupResult__sub_object() &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*, const char*, int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::JUnitTestOutput()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::setPackageName(const SimpleString&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandlinetestrunner.o(.rodata._ZTV21CommandLineTestRunner)
</UL>
<P><STRONG><a name="[346]"></a>CommandLineTestRunner::initializeTestRun()</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, commandlinetestrunner.o(.text._ZN21CommandLineTestRunner17initializeTestRunEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CommandLineTestRunner::initializeTestRun()
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::isVerbose() const
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::isColor() const
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::runTestsInSeperateProcess() const
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getGroupFilters() const
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getNameFilters() const
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::isRunIgnored() const
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::setRunIgnored()
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTests()
</UL>

<P><STRONG><a name="[188]"></a>CommandLineTestRunner::createConsoleOutput()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, commandlinetestrunner.o(.text._ZN21CommandLineTestRunner19createConsoleOutputEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = CommandLineTestRunner::createConsoleOutput() &rArr; _Unwind_Resume &rArr; _ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb &rArr; unw_init_local &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*, const char*, int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleTestOutput::ConsoleTestOutput__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandlinetestrunner.o(.rodata._ZTV21CommandLineTestRunner)
</UL>
<P><STRONG><a name="[186]"></a>CommandLineTestRunner::createTeamCityOutput()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, commandlinetestrunner.o(.text._ZN21CommandLineTestRunner20createTeamCityOutputEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = CommandLineTestRunner::createTeamCityOutput() &rArr; TeamCityTestOutput::TeamCityTestOutput() &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*, const char*, int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::TeamCityTestOutput()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandlinetestrunner.o(.rodata._ZTV21CommandLineTestRunner)
</UL>
<P><STRONG><a name="[189]"></a>CommandLineTestRunner::createCompositeOutput(TestOutput*, TestOutput*)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, commandlinetestrunner.o(.text._ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = CommandLineTestRunner::createCompositeOutput(TestOutput*, TestOutput*) &rArr; _Unwind_Resume &rArr; _ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb &rArr; unw_init_local &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*, const char*, int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompositeTestOutput::CompositeTestOutput()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandlinetestrunner.o(.rodata._ZTV21CommandLineTestRunner)
</UL>
<P><STRONG><a name="[358]"></a>CommandLineTestRunner::CommandLineTestRunner(int, const char**, TestRegistry*)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, commandlinetestrunner.o(.text._ZN21CommandLineTestRunnerC2EiPPKcP12TestRegistry), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::CommandLineArguments(int, const char**)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*, const char*, int)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>

<P><STRONG><a name="[340]"></a>CommandLineTestRunner::CommandLineTestRunner__sub_object(int, const char**, TestRegistry*)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, commandlinetestrunner.o(.text._ZN21CommandLineTestRunnerC2EiPPKcP12TestRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CommandLineTestRunner::CommandLineTestRunner__sub_object(int, const char**, TestRegistry*)
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::RunAllTests(int, const char**)
</UL>

<P><STRONG><a name="[185]"></a>CommandLineTestRunner::~CommandLineTestRunner__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, commandlinetestrunner.o(.text._ZN21CommandLineTestRunnerD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CommandLineTestRunner::~CommandLineTestRunner__deallocating() &rArr; CommandLineTestRunner::~CommandLineTestRunner__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::~CommandLineTestRunner__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandlinetestrunner.o(.rodata._ZTV21CommandLineTestRunner)
</UL>
<P><STRONG><a name="[425]"></a>CommandLineTestRunner::~CommandLineTestRunner()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, commandlinetestrunner.o(.text._ZN21CommandLineTestRunnerD2Ev), UNUSED)

<P><STRONG><a name="[184]"></a>CommandLineTestRunner::~CommandLineTestRunner__sub_object()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, commandlinetestrunner.o(.text._ZN21CommandLineTestRunnerD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CommandLineTestRunner::~CommandLineTestRunner__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::RunAllTests(int, const char**)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::~CommandLineTestRunner__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandlinetestrunner.o(.rodata._ZTV21CommandLineTestRunner)
</UL>
<P><STRONG><a name="[359]"></a>ExecFunctionTestShell::createTest()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, utest.o(.text._ZN21ExecFunctionTestShell10createTestEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[2b3]"></a>LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, int, long long, long long, const SimpleString&)</STRONG> (Thumb, 380 bytes, Stack size 56 bytes, testfailure.o(.text._ZN21LongLongsEqualFailureC2EP10UtestShellPKcixxRK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, int, long long, long long, const SimpleString&) &rArr; TestFailure::createButWasString(const SimpleString&, const SimpleString&) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +(const SimpleString&) const
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(long long)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(long long)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure__sub_object(UtestShell*, const char*, int)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createButWasString(const SimpleString&, const SimpleString&)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertLongLongsEqual(long long, long long, const char*, const char*, int, const TestTerminator&)
</UL>

<P><STRONG><a name="[426]"></a>LongLongsEqualFailure::LongLongsEqualFailure__sub_object(UtestShell*, const char*, int, long long, long long, const SimpleString&)</STRONG> (Thumb, 380 bytes, Stack size 56 bytes, testfailure.o(.text._ZN21LongLongsEqualFailureC2EP10UtestShellPKcixxRK12SimpleString), UNUSED)

<P><STRONG><a name="[18a]"></a>LongLongsEqualFailure::~LongLongsEqualFailure__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, testfailure.o(.text._ZN21LongLongsEqualFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LongLongsEqualFailure::~LongLongsEqualFailure__deallocating() &rArr; TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.rodata._ZTV21LongLongsEqualFailure)
</UL>
<P><STRONG><a name="[369]"></a>MemoryLeakDetectorList::removeNode(char*)</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, memoryleakdetector.o(.text._ZN22MemoryLeakDetectorList10removeNodeEPc))
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::removeNode(char*)
</UL>

<P><STRONG><a name="[35c]"></a>MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode*, MemLeakPeriod)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, memoryleakdetector.o(.text._ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod))
<BR><BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode*, MemLeakPeriod)
</UL>

<P><STRONG><a name="[35b]"></a>MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode*, MemLeakPeriod)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, memoryleakdetector.o(.text._ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod))
<BR><BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode*, MemLeakPeriod)
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode*, MemLeakPeriod)
</UL>

<P><STRONG><a name="[35d]"></a>MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, memoryleakdetector.o(.text._ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod))
<BR><BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode*, MemLeakPeriod)
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode*, MemLeakPeriod)
</UL>

<P><STRONG><a name="[36a]"></a>MemoryLeakDetectorList::retrieveNode(char*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, memoryleakdetector.o(.text._ZN22MemoryLeakDetectorList12retrieveNodeEPc))
<BR><BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::retrieveNode(char*)
</UL>

<P><STRONG><a name="[36b]"></a>MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod)</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, memoryleakdetector.o(.text._ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod)
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod)
</UL>

<P><STRONG><a name="[18c]"></a>OutsideTestRunnerUTest::getTestResult()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utest.o(.text._ZN22OutsideTestRunnerUTest13getTestResultEv))
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[2a6]"></a>OutsideTestRunnerUTest::instance()</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, utest.o(.text._ZN22OutsideTestRunnerUTest8instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = OutsideTestRunnerUTest::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsideTestRunnerUTest::OutsideTestRunnerUTest__sub_object()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getCurrent()
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>

<P><STRONG><a name="[35e]"></a>OutsideTestRunnerUTest::OutsideTestRunnerUTest__sub_object()</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, utest.o(.text._ZN22OutsideTestRunnerUTestC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OutsideTestRunnerUTest::OutsideTestRunnerUTest__sub_object() &rArr; _Unwind_Resume &rArr; _ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb &rArr; unw_init_local &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleTestOutput::ConsoleTestOutput__sub_object()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestResult::TestResult(TestOutput&)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::~TestOutput__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsideTestRunnerUTest::instance()
</UL>

<P><STRONG><a name="[18b]"></a>OutsideTestRunnerUTest::~OutsideTestRunnerUTest__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, utest.o(.text._ZN22OutsideTestRunnerUTestD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OutsideTestRunnerUTest::~OutsideTestRunnerUTest__deallocating() &rArr; OutsideTestRunnerUTest::~OutsideTestRunnerUTest__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsideTestRunnerUTest::~OutsideTestRunnerUTest__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[7a]"></a>OutsideTestRunnerUTest::~OutsideTestRunnerUTest__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, utest.o(.text._ZN22OutsideTestRunnerUTestD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OutsideTestRunnerUTest::~OutsideTestRunnerUTest__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestResult::~TestResult()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::~TestOutput__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsideTestRunnerUTest::~OutsideTestRunnerUTest__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> utest.o(.text._ZN22OutsideTestRunnerUTest8instanceEv)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[35f]"></a>SimpleStringCollection::allocate(unsigned)</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, simplestring.o(.text._ZN22SimpleStringCollection8allocateEj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, const char*, int)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*, const char*, int)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString__sub_object()
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::split(const SimpleString&, SimpleStringCollection&) const
</UL>

<P><STRONG><a name="[363]"></a>SimpleStringCollection::SimpleStringCollection()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, simplestring.o(.text._ZN22SimpleStringCollectionC2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString__sub_object(const char*)
</UL>

<P><STRONG><a name="[427]"></a>SimpleStringCollection::SimpleStringCollection__sub_object()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, simplestring.o(.text._ZN22SimpleStringCollectionC2Ev), UNUSED)

<P><STRONG><a name="[364]"></a>SimpleStringCollection::~SimpleStringCollection()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, simplestring.o(.text._ZN22SimpleStringCollectionD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString__sub_object()
</UL>

<P><STRONG><a name="[428]"></a>SimpleStringCollection::~SimpleStringCollection__sub_object()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, simplestring.o(.text._ZN22SimpleStringCollectionD2Ev), UNUSED)

<P><STRONG><a name="[365]"></a>SimpleStringCollection::operator [](unsigned)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, simplestring.o(.text._ZN22SimpleStringCollectionixEj), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString__sub_object()
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::split(const SimpleString&, SimpleStringCollection&) const
</UL>

<P><STRONG><a name="[18f]"></a>StringBufferTestOutput::printBuffer(const char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testoutput.o(.text._ZN22StringBufferTestOutput11printBufferEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = StringBufferTestOutput::printBuffer(const char*) &rArr; SimpleString::operator +=(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.rodata._ZTV22StringBufferTestOutput)
</UL>
<P><STRONG><a name="[190]"></a>StringBufferTestOutput::flush()</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, testoutput.o(.text._ZN22StringBufferTestOutput5flushEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = StringBufferTestOutput::flush() &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.rodata._ZTV22StringBufferTestOutput)
</UL>
<P><STRONG><a name="[18e]"></a>StringBufferTestOutput::~StringBufferTestOutput__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, testoutput.o(.text._ZN22StringBufferTestOutputD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StringBufferTestOutput::~StringBufferTestOutput__deallocating() &rArr; StringBufferTestOutput::~StringBufferTestOutput__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBufferTestOutput::~StringBufferTestOutput__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.rodata._ZTV22StringBufferTestOutput)
</UL>
<P><STRONG><a name="[366]"></a>StringBufferTestOutput::~StringBufferTestOutput()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, testoutput.o(.text._ZN22StringBufferTestOutputD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
</UL>

<P><STRONG><a name="[18d]"></a>StringBufferTestOutput::~StringBufferTestOutput__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, testoutput.o(.text._ZN22StringBufferTestOutputD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StringBufferTestOutput::~StringBufferTestOutput__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBufferTestOutput::~StringBufferTestOutput__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.rodata._ZTV22StringBufferTestOutput)
</UL>
<P><STRONG><a name="[192]"></a>FailableMemoryAllocator::alloc_memory(unsigned, const char*, int)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, testmemoryallocator.o(.text._ZN23FailableMemoryAllocator12alloc_memoryEjPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = FailableMemoryAllocator::alloc_memory(unsigned, const char*, int) &rArr; TestMemoryAllocator::alloc_memory(unsigned, const char*, int) &rArr; UtestShell::getCurrent() &rArr; OutsideTestRunnerUTest::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocationToFailAllocNode::shouldFail(int, const char*, int)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMemoryAllocator::alloc_memory(unsigned, const char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmemoryallocator.o(.rodata._ZTV23FailableMemoryAllocator)
</UL>
<P><STRONG><a name="[195]"></a>FailableMemoryAllocator::failNthAllocAt(int, const char*, int)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, testmemoryallocator.o(.text._ZN23FailableMemoryAllocator14failNthAllocAtEiPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FailableMemoryAllocator::failNthAllocAt(int, const char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmemoryallocator.o(.rodata._ZTV23FailableMemoryAllocator)
</UL>
<P><STRONG><a name="[194]"></a>FailableMemoryAllocator::failAllocNumber(int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, testmemoryallocator.o(.text._ZN23FailableMemoryAllocator15failAllocNumberEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FailableMemoryAllocator::failAllocNumber(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmemoryallocator.o(.rodata._ZTV23FailableMemoryAllocator)
</UL>
<P><STRONG><a name="[197]"></a>FailableMemoryAllocator::clearFailedAllocs()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, testmemoryallocator.o(.text._ZN23FailableMemoryAllocator17clearFailedAllocsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FailableMemoryAllocator::clearFailedAllocs()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmemoryallocator.o(.rodata._ZTV23FailableMemoryAllocator)
</UL>
<P><STRONG><a name="[193]"></a>FailableMemoryAllocator::allocMemoryLeakNode(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, testmemoryallocator.o(.text._ZN23FailableMemoryAllocator19allocMemoryLeakNodeEj))
<BR>[Address Reference Count : 1]<UL><LI> testmemoryallocator.o(.rodata._ZTV23FailableMemoryAllocator)
</UL>
<P><STRONG><a name="[196]"></a>FailableMemoryAllocator::checkAllFailedAllocsWereDone()</STRONG> (Thumb, 320 bytes, Stack size 64 bytes, testmemoryallocator.o(.text._ZN23FailableMemoryAllocator28checkAllFailedAllocsWereDoneEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = FailableMemoryAllocator::checkAllFailedAllocsWereDone() &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getCurrent()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getName() const
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getLineNumber() const
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailFailure::FailFailure(UtestShell*, const char*, int, const SimpleString&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmemoryallocator.o(.rodata._ZTV23FailableMemoryAllocator)
</UL>
<P><STRONG><a name="[429]"></a>FailableMemoryAllocator::FailableMemoryAllocator(const char*, const char*, const char*)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, testmemoryallocator.o(.text._ZN23FailableMemoryAllocatorC2EPKcS1_S1_), UNUSED)

<P><STRONG><a name="[42a]"></a>FailableMemoryAllocator::FailableMemoryAllocator__sub_object(const char*, const char*, const char*)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, testmemoryallocator.o(.text._ZN23FailableMemoryAllocatorC2EPKcS1_S1_), UNUSED)

<P><STRONG><a name="[191]"></a>FailableMemoryAllocator::~FailableMemoryAllocator__deallocating()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testmemoryallocator.o(.text._ZN23FailableMemoryAllocatorD0Ev))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmemoryallocator.o(.rodata._ZTV23FailableMemoryAllocator)
</UL>
<P><STRONG><a name="[2fb]"></a>JUnitTestCaseResultNode::JUnitTestCaseResultNode__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, junittestoutput.o(.text._ZN23JUnitTestCaseResultNodeC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = JUnitTestCaseResultNode::JUnitTestCaseResultNode__sub_object() &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::printCurrentTestStarted(const UtestShell&)
</UL>

<P><STRONG><a name="[367]"></a>LocationToFailAllocNode::shouldFail(int, const char*, int)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, testmemoryallocator.o(.text._ZN23LocationToFailAllocNode10shouldFailEiPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LocationToFailAllocNode::shouldFail(int, const char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrCmp(const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailableMemoryAllocator::alloc_memory(unsigned, const char*, int)
</UL>

<P><STRONG><a name="[307]"></a>MemoryLeakDetectorTable::removeNode(char*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, memoryleakdetector.o(.text._ZN23MemoryLeakDetectorTable10removeNodeEPc))
<BR><BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorList::removeNode(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::reallocMemory(TestMemoryAllocator*, char*, unsigned, const char*, int, bool)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, const char*, int, bool)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::removeMemoryLeakInformationWithoutCheckingOrDeallocatingTheMemoryButDeallocatingTheAccountInformation(TestMemoryAllocator*, void*, bool)
</UL>

<P><STRONG><a name="[317]"></a>MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode*, MemLeakPeriod)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, memoryleakdetector.o(.text._ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode*, MemLeakPeriod)
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode*, MemLeakPeriod)
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod)
</UL>

<P><STRONG><a name="[315]"></a>MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, memoryleakdetector.o(.text._ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod)
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod)
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod)
</UL>

<P><STRONG><a name="[30e]"></a>MemoryLeakDetectorTable::retrieveNode(char*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, memoryleakdetector.o(.text._ZN23MemoryLeakDetectorTable12retrieveNodeEPc))
<BR><BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorList::retrieveNode(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::invalidateMemory(char*)
</UL>

<P><STRONG><a name="[310]"></a>MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, memoryleakdetector.o(.text._ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod) &rArr; MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod)
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod)
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod)
</UL>

<P><STRONG><a name="[19c]"></a>MemoryLeakWarningPlugin::FinalReport(int)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin11FinalReportEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MemoryLeakWarningPlugin::FinalReport(int) &rArr; MemoryLeakDetector::report(MemLeakPeriod) &rArr; MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod) &rArr; MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode*) &rArr; SimpleStringBuffer::addMemoryDump(const void*, unsigned) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::report(MemLeakPeriod)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod)
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::RunAllTests(int, const char**)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
</UL>
<P><STRONG><a name="[19a]"></a>MemoryLeakWarningPlugin::preTestAction(UtestShell&, TestResult&)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MemoryLeakWarningPlugin::preTestAction(UtestShell&, TestResult&)
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::startChecking()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
</UL>
<P><STRONG><a name="[42b]"></a>MemoryLeakWarningPlugin::getFirstPlugin()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin14getFirstPluginEv), UNUSED)

<P><STRONG><a name="[19b]"></a>MemoryLeakWarningPlugin::postTestAction(UtestShell&, TestResult&)</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = MemoryLeakWarningPlugin::postTestAction(UtestShell&, TestResult&) &rArr; TestFailure::TestFailure(UtestShell*, const SimpleString&) &rArr; UtestShell::getName() const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::report(MemLeakPeriod)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::stopChecking()
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const SimpleString&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
</UL>
<P><STRONG><a name="[276]"></a>MemoryLeakWarningPlugin::getGlobalDetector()</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = MemoryLeakWarningPlugin::getGlobalDetector() &rArr; MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure*) &rArr; _Unwind_Resume &rArr; _ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb &rArr; unw_init_local &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure*)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::turnOnNewDeleteOverloads()
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString&, MemoryLeakDetector*)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemLeakScopedMutex::MemLeakScopedMutex__sub_object()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL46threadsafe_mem_leak_operator_new_array_nothrowj
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL44threadsafe_mem_leak_operator_new_array_debugjPKci
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL41threadsafe_mem_leak_operator_delete_arrayPv
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL40threadsafe_mem_leak_operator_new_nothrowj
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38threadsafe_mem_leak_operator_new_debugjPKci
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38threadsafe_mem_leak_operator_new_arrayj
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL35threadsafe_mem_leak_operator_deletePv
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL35mem_leak_operator_new_array_nothrowj
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mem_leak_operator_new_array_debugjPKci
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32threadsafe_mem_leak_operator_newj
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL30mem_leak_operator_delete_arrayPv
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mem_leak_operator_new_nothrowj
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27threadsafe_mem_leak_reallocPvjPKci
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27mem_leak_operator_new_debugjPKci
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27mem_leak_operator_new_arrayj
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL26threadsafe_mem_leak_mallocjPKci
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24threadsafe_mem_leak_freePvPKci
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24mem_leak_operator_deletePv
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mem_leak_operator_newj
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL16mem_leak_reallocPvjPKci
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL15mem_leak_mallocjPKci
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13mem_leak_freePvPKci
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrashOnAllocationAllocator::alloc_memory(unsigned, const char*, int)
</UL>

<P><STRONG><a name="[42c]"></a>MemoryLeakWarningPlugin::setGlobalDetector(MemoryLeakDetector*, MemoryLeakFailure*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin17setGlobalDetectorEP18MemoryLeakDetectorP17MemoryLeakFailure), UNUSED)

<P><STRONG><a name="[370]"></a>MemoryLeakWarningPlugin::destroyGlobalDetector()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MemoryLeakWarningPlugin::destroyGlobalDetector() &rArr; MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
</UL>

<P><STRONG><a name="[42d]"></a>MemoryLeakWarningPlugin::areNewDeleteOverloaded()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv), UNUSED)

<P><STRONG><a name="[42e]"></a>MemoryLeakWarningPlugin::getGlobalFailureReporter()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin24getGlobalFailureReporterEv), UNUSED)

<P><STRONG><a name="[36f]"></a>MemoryLeakWarningPlugin::turnOnNewDeleteOverloads()</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin24turnOnNewDeleteOverloadsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MemoryLeakWarningPlugin::turnOnNewDeleteOverloads()
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
</UL>

<P><STRONG><a name="[36e]"></a>MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::destroyGlobalDetector()
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
</UL>

<P><STRONG><a name="[42f]"></a>MemoryLeakWarningPlugin::turnOnThreadSafeNewDeleteOverloads()</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin34turnOnThreadSafeNewDeleteOverloadsEv), UNUSED)

<P><STRONG><a name="[33f]"></a>MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::RunAllTests(int, const char**)
</UL>

<P><STRONG><a name="[33e]"></a>MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString&, MemoryLeakDetector*)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPluginC2ERK12SimpleStringP18MemoryLeakDetector))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString&, MemoryLeakDetector*) &rArr; MemoryLeakWarningPlugin::getGlobalDetector() &rArr; MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure*) &rArr; _Unwind_Resume &rArr; _ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb &rArr; unw_init_local &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::~TestPlugin__sub_object()
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::enable()
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::TestPlugin__sub_object(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::RunAllTests(int, const char**)
</UL>

<P><STRONG><a name="[430]"></a>MemoryLeakWarningPlugin::MemoryLeakWarningPlugin__sub_object(const SimpleString&, MemoryLeakDetector*)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPluginC2ERK12SimpleStringP18MemoryLeakDetector), UNUSED)

<P><STRONG><a name="[199]"></a>MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin__deallocating()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPluginD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin__deallocating() &rArr; MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
</UL>
<P><STRONG><a name="[343]"></a>MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPluginD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin() &rArr; MemoryLeakWarningPlugin::destroyGlobalDetector() &rArr; MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::~TestPlugin__sub_object()
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::destroyGlobalDetector()
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::RunAllTests(int, const char**)
</UL>

<P><STRONG><a name="[198]"></a>MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin__sub_object()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPluginD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.rodata._ZTV23MemoryLeakWarningPlugin)
</UL>
<P><STRONG><a name="[2b6]"></a>SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, int, signed char, signed char, const SimpleString&)</STRONG> (Thumb, 368 bytes, Stack size 48 bytes, testfailure.o(.text._ZN23SignedBytesEqualFailureC2EP10UtestShellPKciaaRK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, int, signed char, signed char, const SimpleString&) &rArr; HexStringFrom(signed char) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +(const SimpleString&) const
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(signed char)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(int)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure__sub_object(UtestShell*, const char*, int)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createButWasString(const SimpleString&, const SimpleString&)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertSignedBytesEqual(signed char, signed char, const char*, const char*, int, const TestTerminator&)
</UL>

<P><STRONG><a name="[431]"></a>SignedBytesEqualFailure::SignedBytesEqualFailure__sub_object(UtestShell*, const char*, int, signed char, signed char, const SimpleString&)</STRONG> (Thumb, 368 bytes, Stack size 48 bytes, testfailure.o(.text._ZN23SignedBytesEqualFailureC2EP10UtestShellPKciaaRK12SimpleString), UNUSED)

<P><STRONG><a name="[19d]"></a>SignedBytesEqualFailure::~SignedBytesEqualFailure__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, testfailure.o(.text._ZN23SignedBytesEqualFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SignedBytesEqualFailure::~SignedBytesEqualFailure__deallocating() &rArr; TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.rodata._ZTV23SignedBytesEqualFailure)
</UL>
<P><STRONG><a name="[2b4]"></a>StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, testfailure.o(.text._ZN24StringEqualNoCaseFailureC2EP10UtestShellPKciS3_S3_RK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell*, const char*, int, const char*, const char*, const SimpleString&) &rArr; TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, TestFailure::DifferenceFormat) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::ToLower(char)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromOrNull(const char*)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure__sub_object(UtestShell*, const char*, int)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, TestFailure::DifferenceFormat)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createButWasString(const SimpleString&, const SimpleString&)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNoCaseEqual(const char*, const char*, const char*, const char*, int)
</UL>

<P><STRONG><a name="[432]"></a>StringEqualNoCaseFailure::StringEqualNoCaseFailure__sub_object(UtestShell*, const char*, int, const char*, const char*, const SimpleString&)</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, testfailure.o(.text._ZN24StringEqualNoCaseFailureC2EP10UtestShellPKciS3_S3_RK12SimpleString), UNUSED)

<P><STRONG><a name="[19e]"></a>StringEqualNoCaseFailure::~StringEqualNoCaseFailure__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, testfailure.o(.text._ZN24StringEqualNoCaseFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StringEqualNoCaseFailure::~StringEqualNoCaseFailure__deallocating() &rArr; TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.rodata._ZTV24StringEqualNoCaseFailure)
</UL>
<P><STRONG><a name="[373]"></a>FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&)</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, testfailure.o(.text._ZN25FeatureUnsupportedFailureC2EP10UtestShellPKciRK12SimpleStringS6_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure__sub_object(UtestShell*, const char*, int)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
</UL>

<P><STRONG><a name="[433]"></a>FeatureUnsupportedFailure::FeatureUnsupportedFailure__sub_object(UtestShell*, const char*, int, const SimpleString&, const SimpleString&)</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, testfailure.o(.text._ZN25FeatureUnsupportedFailureC2EP10UtestShellPKciRK12SimpleStringS6_), UNUSED)

<P><STRONG><a name="[19f]"></a>FeatureUnsupportedFailure::~FeatureUnsupportedFailure__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, testfailure.o(.text._ZN25FeatureUnsupportedFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FeatureUnsupportedFailure::~FeatureUnsupportedFailure__deallocating() &rArr; TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.rodata._ZTV25FeatureUnsupportedFailure)
</UL>
<P><STRONG><a name="[1a2]"></a>MemoryLeakWarningReporter::fail(char*)</STRONG> (Thumb, 156 bytes, Stack size 72 bytes, memoryleakwarningplugin.o(.text._ZN25MemoryLeakWarningReporter4failEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = MemoryLeakWarningReporter::fail(char*) &rArr; FailFailure::FailFailure(UtestShell*, const char*, int, const SimpleString&) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getCurrent()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getName() const
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getLineNumber() const
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailFailure::FailFailure(UtestShell*, const char*, int, const SimpleString&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.rodata._ZTV25MemoryLeakWarningReporter)
</UL>
<P><STRONG><a name="[1a1]"></a>MemoryLeakWarningReporter::~MemoryLeakWarningReporter__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(.text._ZN25MemoryLeakWarningReporterD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.rodata._ZTV25MemoryLeakWarningReporter)
</UL>
<P><STRONG><a name="[2b8]"></a>UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, int, unsigned long, unsigned long, const SimpleString&)</STRONG> (Thumb, 368 bytes, Stack size 48 bytes, testfailure.o(.text._ZN25UnsignedLongsEqualFailureC2EP10UtestShellPKcimmRK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, int, unsigned long, unsigned long, const SimpleString&) &rArr; TestFailure::createButWasString(const SimpleString&, const SimpleString&) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +(const SimpleString&) const
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(unsigned long)
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(unsigned long)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure__sub_object(UtestShell*, const char*, int)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createButWasString(const SimpleString&, const SimpleString&)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertUnsignedLongsEqual(unsigned long, unsigned long, const char*, const char*, int, const TestTerminator&)
</UL>

<P><STRONG><a name="[434]"></a>UnsignedLongsEqualFailure::UnsignedLongsEqualFailure__sub_object(UtestShell*, const char*, int, unsigned long, unsigned long, const SimpleString&)</STRONG> (Thumb, 368 bytes, Stack size 48 bytes, testfailure.o(.text._ZN25UnsignedLongsEqualFailureC2EP10UtestShellPKcimmRK12SimpleString), UNUSED)

<P><STRONG><a name="[1a3]"></a>UnsignedLongsEqualFailure::~UnsignedLongsEqualFailure__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, testfailure.o(.text._ZN25UnsignedLongsEqualFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UnsignedLongsEqualFailure::~UnsignedLongsEqualFailure__deallocating() &rArr; TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.rodata._ZTV25UnsignedLongsEqualFailure)
</UL>
<P><STRONG><a name="[1a5]"></a>CrashOnAllocationAllocator::alloc_memory(unsigned, const char*, int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, testmemoryallocator.o(.text._ZN26CrashOnAllocationAllocator12alloc_memoryEjPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = CrashOnAllocationAllocator::alloc_memory(unsigned, const char*, int) &rArr; TestMemoryAllocator::alloc_memory(unsigned, const char*, int) &rArr; UtestShell::getCurrent() &rArr; OutsideTestRunnerUTest::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::getCurrentAllocationNumber()
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMemoryAllocator::alloc_memory(unsigned, const char*, int)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::crash()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmemoryallocator.o(.rodata._ZTV26CrashOnAllocationAllocator)
</UL>
<P><STRONG><a name="[1a6]"></a>CrashOnAllocationAllocator::setNumberToCrashOn(unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testmemoryallocator.o(.text._ZN26CrashOnAllocationAllocator18setNumberToCrashOnEj))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crash_on_allocation_number(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmemoryallocator.o(.rodata._ZTV26CrashOnAllocationAllocator)
</UL>
<P><STRONG><a name="[272]"></a>CrashOnAllocationAllocator::CrashOnAllocationAllocator()</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, testmemoryallocator.o(.text._ZN26CrashOnAllocationAllocatorC2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crash_on_allocation_number(unsigned)
</UL>

<P><STRONG><a name="[435]"></a>CrashOnAllocationAllocator::CrashOnAllocationAllocator__sub_object()</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, testmemoryallocator.o(.text._ZN26CrashOnAllocationAllocatorC2Ev), UNUSED)

<P><STRONG><a name="[1a4]"></a>CrashOnAllocationAllocator::~CrashOnAllocationAllocator__deallocating()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testmemoryallocator.o(.text._ZN26CrashOnAllocationAllocatorD0Ev))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmemoryallocator.o(.rodata._ZTV26CrashOnAllocationAllocator)
</UL>
<P><STRONG><a name="[376]"></a>MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, int, unsigned, TestMemoryAllocator*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*)</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, memoryleakdetector.o(.text._ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_ijP19TestMemoryAllocatorS1_iS3_P17MemoryLeakFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, int, unsigned, TestMemoryAllocator*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, int, unsigned, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::addDeallocationLocation(const char*, int, TestMemoryAllocator*)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, int, unsigned, TestMemoryAllocator*)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char*, int, TestMemoryAllocator*, MemoryLeakFailure*)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*)
</UL>

<P><STRONG><a name="[316]"></a>MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode*)</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, memoryleakdetector.o(.text._ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode*) &rArr; SimpleStringBuffer::addMemoryDump(const void*, unsigned) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringBuffer::add(const char*, ...)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringBuffer::addMemoryDump(const void*, unsigned)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrCmp(const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod)
</UL>

<P><STRONG><a name="[37a]"></a>MemoryLeakOutputStringBuffer::addMemoryLeakFooter(int)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, memoryleakdetector.o(.text._ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemoryLeakOutputStringBuffer::addMemoryLeakFooter(int) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
</UL>

<P><STRONG><a name="[379]"></a>MemoryLeakOutputStringBuffer::addMemoryLeakHeader()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, memoryleakdetector.o(.text._ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemoryLeakOutputStringBuffer::addMemoryLeakHeader() &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode*)
</UL>

<P><STRONG><a name="[377]"></a>MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, int, unsigned, TestMemoryAllocator*)</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, memoryleakdetector.o(.text._ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcijP19TestMemoryAllocator))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, int, unsigned, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, int, unsigned, TestMemoryAllocator*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*)
</UL>

<P><STRONG><a name="[378]"></a>MemoryLeakOutputStringBuffer::addDeallocationLocation(const char*, int, TestMemoryAllocator*)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, memoryleakdetector.o(.text._ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKciP19TestMemoryAllocator))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MemoryLeakOutputStringBuffer::addDeallocationLocation(const char*, int, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, int, unsigned, TestMemoryAllocator*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*)
</UL>

<P><STRONG><a name="[37b]"></a>MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, memoryleakdetector.o(.text._ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage() &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
</UL>

<P><STRONG><a name="[318]"></a>MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, memoryleakdetector.o(.text._ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MemoryLeakOutputStringBuffer::stopMemoryLeakReporting() &rArr; MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks() &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::addMemoryLeakFooter(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod)
</UL>

<P><STRONG><a name="[37d]"></a>MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memoryleakdetector.o(.text._ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemoryLeakOutputStringBuffer::addWarningForUsingMalloc() &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
</UL>

<P><STRONG><a name="[313]"></a>MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*)</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, memoryleakdetector.o(.text._ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKciP19TestMemoryAllocatorP17MemoryLeakFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, int, unsigned, TestMemoryAllocator*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, int, unsigned, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, int, unsigned, TestMemoryAllocator*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*)
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, bool)
</UL>

<P><STRONG><a name="[37c]"></a>MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memoryleakdetector.o(.text._ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks() &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
</UL>

<P><STRONG><a name="[30b]"></a>MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char*, int, TestMemoryAllocator*, MemoryLeakFailure*)</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, memoryleakdetector.o(.text._ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKciP19TestMemoryAllocatorP17MemoryLeakFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char*, int, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, int, unsigned, TestMemoryAllocator*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, int, unsigned, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, int, unsigned, TestMemoryAllocator*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullUnknownAllocator::defaultAllocator()
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::reallocMemory(TestMemoryAllocator*, char*, unsigned, const char*, int, bool)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, const char*, int, bool)
</UL>

<P><STRONG><a name="[312]"></a>MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*)</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, memoryleakdetector.o(.text._ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKciP19TestMemoryAllocatorP17MemoryLeakFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, int, unsigned, TestMemoryAllocator*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, int, unsigned, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, int, unsigned, TestMemoryAllocator*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*)
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, bool)
</UL>

<P><STRONG><a name="[2b9]"></a>UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, int, unsigned long long, unsigned long long, const SimpleString&)</STRONG> (Thumb, 380 bytes, Stack size 56 bytes, testfailure.o(.text._ZN29UnsignedLongLongsEqualFailureC2EP10UtestShellPKciyyRK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, int, unsigned long long, unsigned long long, const SimpleString&) &rArr; StringFrom(unsigned long long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +(const SimpleString&) const
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(unsigned long long)
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(unsigned long long)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure__sub_object(UtestShell*, const char*, int)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createButWasString(const SimpleString&, const SimpleString&)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertUnsignedLongLongsEqual(unsigned long long, unsigned long long, const char*, const char*, int, const TestTerminator&)
</UL>

<P><STRONG><a name="[436]"></a>UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure__sub_object(UtestShell*, const char*, int, unsigned long long, unsigned long long, const SimpleString&)</STRONG> (Thumb, 380 bytes, Stack size 56 bytes, testfailure.o(.text._ZN29UnsignedLongLongsEqualFailureC2EP10UtestShellPKciyyRK12SimpleString), UNUSED)

<P><STRONG><a name="[1a7]"></a>UnsignedLongLongsEqualFailure::~UnsignedLongLongsEqualFailure__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, testfailure.o(.text._ZN29UnsignedLongLongsEqualFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UnsignedLongLongsEqualFailure::~UnsignedLongLongsEqualFailure__deallocating() &rArr; TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.rodata._ZTV29UnsignedLongLongsEqualFailure)
</UL>
<P><STRONG><a name="[1ab]"></a>TEST_myFirstUnitTest_API1_Test::testBody()</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, unittest.o(.text._ZN30TEST_myFirstUnitTest_API1_Test8testBodyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = TEST_myFirstUnitTest_API1_Test::testBody() &rArr; UtestShell::getCurrent() &rArr; OutsideTestRunnerUTest::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalTestTerminator::~NormalTestTerminator()
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getCurrent()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> unittest.o(.rodata._ZTV30TEST_myFirstUnitTest_API1_Test)
</UL>
<P><STRONG><a name="[37e]"></a>TEST_myFirstUnitTest_API1_Test::TEST_myFirstUnitTest_API1_Test__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, unittest.o(.text._ZN30TEST_myFirstUnitTest_API1_TestC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TEST_myFirstUnitTest_API1_Test::TEST_myFirstUnitTest_API1_Test__sub_object() &rArr; TEST_GROUP_CppUTestGroupmyFirstUnitTest::TEST_GROUP_CppUTestGroupmyFirstUnitTest__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_GROUP_CppUTestGroupmyFirstUnitTest::TEST_GROUP_CppUTestGroupmyFirstUnitTest__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_myFirstUnitTest_API1_TestShell::createTest()
</UL>

<P><STRONG><a name="[1a8]"></a>TEST_myFirstUnitTest_API1_Test::~TEST_myFirstUnitTest_API1_Test__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, unittest.o(.text._ZN30TEST_myFirstUnitTest_API1_TestD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TEST_myFirstUnitTest_API1_Test::~TEST_myFirstUnitTest_API1_Test__deallocating()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utest::~Utest__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> unittest.o(.rodata._ZTV30TEST_myFirstUnitTest_API1_Test)
</UL>
<P><STRONG><a name="[1ad]"></a>TEST_myFirstUnitTest_API2_Test::testBody()</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, unittest.o(.text._ZN30TEST_myFirstUnitTest_API2_Test8testBodyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = TEST_myFirstUnitTest_API2_Test::testBody() &rArr; UtestShell::getCurrent() &rArr; OutsideTestRunnerUTest::instance() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalTestTerminator::~NormalTestTerminator()
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getCurrent()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> unittest.o(.rodata._ZTV30TEST_myFirstUnitTest_API2_Test)
</UL>
<P><STRONG><a name="[380]"></a>TEST_myFirstUnitTest_API2_Test::TEST_myFirstUnitTest_API2_Test__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, unittest.o(.text._ZN30TEST_myFirstUnitTest_API2_TestC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TEST_myFirstUnitTest_API2_Test::TEST_myFirstUnitTest_API2_Test__sub_object() &rArr; TEST_GROUP_CppUTestGroupmyFirstUnitTest::TEST_GROUP_CppUTestGroupmyFirstUnitTest__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_GROUP_CppUTestGroupmyFirstUnitTest::TEST_GROUP_CppUTestGroupmyFirstUnitTest__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_myFirstUnitTest_API2_TestShell::createTest()
</UL>

<P><STRONG><a name="[1ac]"></a>TEST_myFirstUnitTest_API2_Test::~TEST_myFirstUnitTest_API2_Test__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, unittest.o(.text._ZN30TEST_myFirstUnitTest_API2_TestD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TEST_myFirstUnitTest_API2_Test::~TEST_myFirstUnitTest_API2_Test__deallocating()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utest::~Utest__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> unittest.o(.rodata._ZTV30TEST_myFirstUnitTest_API2_Test)
</UL>
<P><STRONG><a name="[1af]"></a>TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions__deallocating()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utest.o(.text._ZN31TestTerminatorWithoutExceptionsD0Ev))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.rodata._ZTV31TestTerminatorWithoutExceptions)
</UL>
<P><STRONG><a name="[1b1]"></a>TEST_myFirstUnitTest_API1_TestShell::createTest()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, unittest.o(.text._ZN35TEST_myFirstUnitTest_API1_TestShell10createTestEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = TEST_myFirstUnitTest_API1_TestShell::createTest() &rArr; TEST_myFirstUnitTest_API1_Test::TEST_myFirstUnitTest_API1_Test__sub_object() &rArr; TEST_GROUP_CppUTestGroupmyFirstUnitTest::TEST_GROUP_CppUTestGroupmyFirstUnitTest__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*, const char*, int)
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_myFirstUnitTest_API1_Test::TEST_myFirstUnitTest_API1_Test__sub_object()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
</UL>
<P><STRONG><a name="[222]"></a>TEST_myFirstUnitTest_API1_TestShell::TEST_myFirstUnitTest_API1_TestShell__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, unittest.o(.text._ZN35TEST_myFirstUnitTest_API1_TestShellC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TEST_myFirstUnitTest_API1_TestShell::TEST_myFirstUnitTest_API1_TestShell__sub_object() &rArr; UtestShell::UtestShell__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::UtestShell__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UnitTest.cpp
</UL>

<P><STRONG><a name="[1b0]"></a>TEST_myFirstUnitTest_API1_TestShell::~TEST_myFirstUnitTest_API1_TestShell__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, unittest.o(.text._ZN35TEST_myFirstUnitTest_API1_TestShellD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TEST_myFirstUnitTest_API1_TestShell::~TEST_myFirstUnitTest_API1_TestShell__deallocating()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::~UtestShell__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
</UL>
<P><STRONG><a name="[1b3]"></a>TEST_myFirstUnitTest_API2_TestShell::createTest()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, unittest.o(.text._ZN35TEST_myFirstUnitTest_API2_TestShell10createTestEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = TEST_myFirstUnitTest_API2_TestShell::createTest() &rArr; TEST_myFirstUnitTest_API2_Test::TEST_myFirstUnitTest_API2_Test__sub_object() &rArr; TEST_GROUP_CppUTestGroupmyFirstUnitTest::TEST_GROUP_CppUTestGroupmyFirstUnitTest__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*, const char*, int)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_myFirstUnitTest_API2_Test::TEST_myFirstUnitTest_API2_Test__sub_object()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
</UL>
<P><STRONG><a name="[224]"></a>TEST_myFirstUnitTest_API2_TestShell::TEST_myFirstUnitTest_API2_TestShell__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, unittest.o(.text._ZN35TEST_myFirstUnitTest_API2_TestShellC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TEST_myFirstUnitTest_API2_TestShell::TEST_myFirstUnitTest_API2_TestShell__sub_object() &rArr; UtestShell::UtestShell__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::UtestShell__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_UnitTest.cpp
</UL>

<P><STRONG><a name="[1b2]"></a>TEST_myFirstUnitTest_API2_TestShell::~TEST_myFirstUnitTest_API2_TestShell__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, unittest.o(.text._ZN35TEST_myFirstUnitTest_API2_TestShellD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TEST_myFirstUnitTest_API2_TestShell::~TEST_myFirstUnitTest_API2_TestShell__deallocating()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::~UtestShell__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
</UL>
<P><STRONG><a name="[37f]"></a>TEST_GROUP_CppUTestGroupmyFirstUnitTest::TEST_GROUP_CppUTestGroupmyFirstUnitTest__sub_object()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, unittest.o(.text._ZN39TEST_GROUP_CppUTestGroupmyFirstUnitTestC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TEST_GROUP_CppUTestGroupmyFirstUnitTest::TEST_GROUP_CppUTestGroupmyFirstUnitTest__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utest::Utest__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_myFirstUnitTest_API2_Test::TEST_myFirstUnitTest_API2_Test__sub_object()
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_myFirstUnitTest_API1_Test::TEST_myFirstUnitTest_API1_Test__sub_object()
</UL>

<P><STRONG><a name="[1b4]"></a>TEST_GROUP_CppUTestGroupmyFirstUnitTest::~TEST_GROUP_CppUTestGroupmyFirstUnitTest__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, unittest.o(.text._ZN39TEST_GROUP_CppUTestGroupmyFirstUnitTestD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TEST_GROUP_CppUTestGroupmyFirstUnitTest::~TEST_GROUP_CppUTestGroupmyFirstUnitTest__deallocating()
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utest::~Utest__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> unittest.o(.rodata._ZTV39TEST_GROUP_CppUTestGroupmyFirstUnitTest)
</UL>
<P><STRONG><a name="[144]"></a>Utest::run()</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, utest.o(.text._ZN5Utest3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = Utest::run() &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
</UL>
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV30TEST_myFirstUnitTest_API1_Test)
<LI> unittest.o(.rodata._ZTV30TEST_myFirstUnitTest_API2_Test)
<LI> unittest.o(.rodata._ZTV39TEST_GROUP_CppUTestGroupmyFirstUnitTest)
<LI> utest.o(.rodata._ZTV5Utest)
<LI> utest.o(.rodata._ZTV16ExecFunctionTest)
</UL>
<P><STRONG><a name="[1a9]"></a>Utest::setup()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utest.o(.text._ZN5Utest5setupEv))
<BR>[Address Reference Count : 4]<UL><LI> unittest.o(.rodata._ZTV30TEST_myFirstUnitTest_API1_Test)
<LI> unittest.o(.rodata._ZTV30TEST_myFirstUnitTest_API2_Test)
<LI> unittest.o(.rodata._ZTV39TEST_GROUP_CppUTestGroupmyFirstUnitTest)
<LI> utest.o(.rodata._ZTV5Utest)
</UL>
<P><STRONG><a name="[1aa]"></a>Utest::teardown()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utest.o(.text._ZN5Utest8teardownEv))
<BR>[Address Reference Count : 4]<UL><LI> unittest.o(.rodata._ZTV30TEST_myFirstUnitTest_API1_Test)
<LI> unittest.o(.rodata._ZTV30TEST_myFirstUnitTest_API2_Test)
<LI> unittest.o(.rodata._ZTV39TEST_GROUP_CppUTestGroupmyFirstUnitTest)
<LI> utest.o(.rodata._ZTV5Utest)
</UL>
<P><STRONG><a name="[1b5]"></a>Utest::testBody()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utest.o(.text._ZN5Utest8testBodyEv))
<BR>[Address Reference Count : 2]<UL><LI> unittest.o(.rodata._ZTV39TEST_GROUP_CppUTestGroupmyFirstUnitTest)
<LI> utest.o(.rodata._ZTV5Utest)
</UL>
<P><STRONG><a name="[437]"></a>Utest::Utest()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, utest.o(.text._ZN5UtestC2Ev), UNUSED)

<P><STRONG><a name="[382]"></a>Utest::Utest__sub_object()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, utest.o(.text._ZN5UtestC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_GROUP_CppUTestGroupmyFirstUnitTest::TEST_GROUP_CppUTestGroupmyFirstUnitTest__sub_object()
</UL>

<P><STRONG><a name="[1b6]"></a>Utest::~Utest__deallocating()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utest.o(.text._ZN5UtestD0Ev))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.rodata._ZTV5Utest)
</UL>
<P><STRONG><a name="[438]"></a>Utest::~Utest()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utest.o(.text._ZN5UtestD2Ev), UNUSED)

<P><STRONG><a name="[142]"></a>Utest::~Utest__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utest.o(.text._ZN5UtestD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_GROUP_CppUTestGroupmyFirstUnitTest::~TEST_GROUP_CppUTestGroupmyFirstUnitTest__deallocating()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_myFirstUnitTest_API2_Test::~TEST_myFirstUnitTest_API2_Test__deallocating()
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_myFirstUnitTest_API1_Test::~TEST_myFirstUnitTest_API1_Test__deallocating()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV30TEST_myFirstUnitTest_API1_Test)
<LI> unittest.o(.rodata._ZTV30TEST_myFirstUnitTest_API2_Test)
<LI> unittest.o(.rodata._ZTV39TEST_GROUP_CppUTestGroupmyFirstUnitTest)
<LI> utest.o(.rodata._ZTV5Utest)
<LI> utest.o(.rodata._ZTV16ExecFunctionTest)
</UL>
<P><STRONG><a name="[1d4]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::saveVFPAsX()</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE10saveVFPAsXEv))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[1cb]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFloatReg(int)</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE11getFloatRegEi))
<BR><BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::saveVFPv3(void*)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::saveVFPWithFSTMX(void*)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::saveVFPWithFSTMD(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[1cc]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setFloatReg(int, unsigned long long)</STRONG> (Thumb, 110 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE11setFloatRegEiy))
<BR><BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::saveVFPv3(void*)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::saveVFPWithFSTMX(void*)
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::saveVFPWithFSTMD(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[1d0]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::isSignalFrame()</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE13isSignalFrameEv))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[387]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::stepWithEHABI()</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE13stepWithEHABIEv))
<BR><BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_eht_entry
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Interpret
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::step()
</UL>

<P><STRONG><a name="[1ca]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::validFloatReg(int)</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE13validFloatRegEi))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[1d1]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getFunctionName(char*, unsigned, unsigned*)</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE15getFunctionNameEPcjPj))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[1d3]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getRegisterName(int)</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE15getRegisterNameEi))
<BR><BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::getRegisterName(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[38a]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&)</STRONG> (Thumb, 428 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE23getInfoFromEHABISectionEjRKNS_18UnwindInfoSectionsE))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool)
</UL>

<P><STRONG><a name="[1d2]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool)</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE24setInfoBasedOnIPRegisterEb))
<BR><BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfoFromEHABISection(unsigned, const libunwind::UnwindInfoSections&)
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_init_local
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[1cd]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::step()</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE4stepEv))
<BR><BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::stepWithEHABI()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[1c8]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getReg(int)</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE6getRegEi))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[1cf]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::jumpto()</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE6jumptoEv))
<BR><BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreSavedFloatRegisters()
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreCoreAndJumpTo()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[1c9]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setReg(int, unsigned)</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE6setRegEij))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[1ce]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getInfo(unw_proc_info_t*)</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE7getInfoEP15unw_proc_info_t))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[1c7]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::validReg(int)</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE8validRegEi))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[1c6]"></a>libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::~UnwindCursor__deallocating()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEED0Ev))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[389]"></a>libunwind::Registers_arm::getRegisterName(int)</STRONG> (Thumb, 916 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind13Registers_arm15getRegisterNameEi))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::getRegisterName(int)
</UL>

<P><STRONG><a name="[38b]"></a>libunwind::Registers_arm::restoreSavedFloatRegisters()</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind13Registers_arm26restoreSavedFloatRegistersEv))
<BR><BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreVFPWithFLDMX(void*)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreVFPWithFLDMD(void*)
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::Registers_arm::restoreVFPv3(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::jumpto()
</UL>

<P><STRONG><a name="[1c5]"></a>libunwind::AbstractUnwindCursor::~AbstractUnwindCursor__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, libunwind.cpp.o(.text._ZN9libunwind20AbstractUnwindCursorD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.rodata._ZTVN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEEE)
</UL>
<P><STRONG><a name="[390]"></a>TestFilter::match(const SimpleString&) const</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, testfilter.o(.text._ZNK10TestFilter5matchERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TestFilter::match(const SimpleString&) const &rArr; SimpleString::contains(const SimpleString&) const &rArr; SimpleString::StrStr(const char*, const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ==(const SimpleString&, const SimpleString&)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::contains(const SimpleString&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::match(const char*, const TestFilter*) const
</UL>

<P><STRONG><a name="[33b]"></a>TestFilter::getNext() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testfilter.o(.text._ZNK10TestFilter7getNextEv))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::~CommandLineArguments()
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::match(const char*, const TestFilter*) const
</UL>

<P><STRONG><a name="[292]"></a>TestResult::getTotalExecutionTime() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testresult.o(.text._ZNK10TestResult21getTotalExecutionTimeEv))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printTestsEnded(const TestResult&)
</UL>

<P><STRONG><a name="[296]"></a>TestResult::getCurrentTestTotalExecutionTime() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testresult.o(.text._ZNK10TestResult32getCurrentTestTotalExecutionTimeEv))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::printCurrentTestEnded(const TestResult&)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentTestEnded(const TestResult&)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printCurrentTestEnded(const TestResult&)
</UL>

<P><STRONG><a name="[2fa]"></a>TestResult::getCurrentGroupTotalExecutionTime() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testresult.o(.text._ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::printCurrentGroupEnded(const TestResult&)
</UL>

<P><STRONG><a name="[100]"></a>UtestShell::getMacroName() const</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, utest.o(.text._ZNK10UtestShell12getMacroNameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = UtestShell::getMacroName() const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[2d9]"></a>UtestShell::getLineNumber() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utest.o(.text._ZNK10UtestShell13getLineNumberEv))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningReporter::fail(char*)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const SimpleString&)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, int, const SimpleString&)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, int)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailableMemoryAllocator::checkAllFailedAllocsWereDone()
</UL>

<P><STRONG><a name="[df]"></a>UtestShell::getFormattedName() const</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, utest.o(.text._ZNK10UtestShell16getFormattedNameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = UtestShell::getFormattedName() const &rArr; SimpleString::operator +=(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
</UL>
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[f7]"></a>UtestShell::isRunInSeperateProcess() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utest.o(.text._ZNK10UtestShell22isRunInSeperateProcessEv))
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[391]"></a>UtestShell::match(const char*, const TestFilter*) const</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, utest.o(.text._ZNK10UtestShell5matchEPKcPK10TestFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = UtestShell::match(const char*, const TestFilter*) const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::getNext() const
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::match(const SimpleString&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::shouldRun(const TestFilter*, const TestFilter*) const
</UL>

<P><STRONG><a name="[2d8]"></a>UtestShell::getFile() const</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, utest.o(.text._ZNK10UtestShell7getFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = UtestShell::getFile() const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const SimpleString&)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, int, const SimpleString&)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, int)
</UL>

<P><STRONG><a name="[2d7]"></a>UtestShell::getName() const</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, utest.o(.text._ZNK10UtestShell7getNameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = UtestShell::getName() const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::printCurrentTestStarted(const UtestShell&)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningReporter::fail(char*)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const SimpleString&)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentTestStarted(const UtestShell&)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentTestEnded(const TestResult&)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, int, const SimpleString&)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, int)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailableMemoryAllocator::checkAllFailedAllocsWereDone()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupAndCaseNames(TestResult&)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::findTestWithName(const SimpleString&)
</UL>

<P><STRONG><a name="[dd]"></a>UtestShell::getNext() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utest.o(.text._ZNK10UtestShell7getNextEv))
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[e0]"></a>UtestShell::willRun() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utest.o(.text._ZNK10UtestShell7willRunEv))
<BR>[Address Reference Count : 4]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[2e8]"></a>UtestShell::getGroup() const</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, utest.o(.text._ZNK10UtestShell8getGroupEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = UtestShell::getGroup() const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::printCurrentTestStarted(const UtestShell&)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentGroupStarted(const UtestShell&)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupAndCaseNames(TestResult&)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupNames(TestResult&)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::findTestWithGroup(const SimpleString&)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::endOfGroup(UtestShell*)
</UL>

<P><STRONG><a name="[e1]"></a>UtestShell::hasFailed() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utest.o(.text._ZNK10UtestShell9hasFailedEv))
<BR>[Address Reference Count : 5]<UL><LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API1_TestShell)
<LI> unittest.o(.rodata._ZTV35TEST_myFirstUnitTest_API2_TestShell)
<LI> utest.o(.rodata._ZTV10UtestShell)
<LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
<LI> utest.o(.rodata._ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[2eb]"></a>UtestShell::shouldRun(const TestFilter*, const TestFilter*) const</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, utest.o(.text._ZNK10UtestShell9shouldRunEPK10TestFilterS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = UtestShell::shouldRun(const TestFilter*, const TestFilter*) const &rArr; UtestShell::match(const char*, const TestFilter*) const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::match(const char*, const TestFilter*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::testShouldRun(UtestShell*, TestResult&)
</UL>

<P><STRONG><a name="[1b9]"></a>__cxxabiv1::__shim_type_info::noop1() const</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop1Ev))
<BR>[Address Reference Count : 3]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[1ba]"></a>__cxxabiv1::__shim_type_info::noop2() const</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv116__shim_type_info5noop2Ev))
<BR>[Address Reference Count : 3]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[1bc]"></a>__cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int) const
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
</UL>
<P><STRONG><a name="[1bd]"></a>__cxxabiv1::__class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const</STRONG> (Thumb, 126 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
</UL>
<P><STRONG><a name="[1be]"></a>__cxxabiv1::__class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi))
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
</UL>
<P><STRONG><a name="[393]"></a>__cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int) const</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i))
<BR><BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__vmi_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const
</UL>

<P><STRONG><a name="[1bb]"></a>__cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</STRONG> (Thumb, 114 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv))
<BR><BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
</UL>
<BR>[Address Reference Count : 2]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv117__class_type_infoE)
<LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[395]"></a>__cxxabiv1::__pbase_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv117__pbase_type_info9can_catchEPKNS_16__shim_type_infoERPv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_to_member_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
</UL>

<P><STRONG><a name="[396]"></a>__cxxabiv1::__pointer_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const</STRONG> (Thumb, 148 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv119__pointer_type_info16can_catch_nestedEPKNS_16__shim_type_infoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_to_member_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
</UL>

<P><STRONG><a name="[398]"></a>__cxxabiv1::__pointer_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</STRONG> (Thumb, 404 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_to_member_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pbase_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
</UL>

<P><STRONG><a name="[1c0]"></a>__cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__si_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int) const
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[1c1]"></a>__cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const</STRONG> (Thumb, 210 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __cxxabiv1::__si_class_type_info::search_below_dst(__cxxabiv1::__dynamic_cast_info*, const void*, int, bool) const &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[1c2]"></a>__cxxabiv1::__si_class_type_info::has_unambiguous_public_base(__cxxabiv1::__dynamic_cast_info*, void*, int) const</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi))
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[399]"></a>__cxxabiv1::__vmi_class_type_info::search_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int, bool) const</STRONG> (Thumb, 328 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::process_static_type_above_dst(__cxxabiv1::__dynamic_cast_info*, const void*, const void*, int) const
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[1c4]"></a>__cxxabiv1::__fundamental_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv))
<BR>[Address Reference Count : 1]<UL><LI> private_typeinfo.cpp.o(.rodata._ZTVN10__cxxabiv123__fundamental_type_infoE)
</UL>
<P><STRONG><a name="[397]"></a>__cxxabiv1::__pointer_to_member_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv129__pointer_to_member_type_info16can_catch_nestedEPKNS_16__shim_type_infoE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const
</UL>

<P><STRONG><a name="[39a]"></a>__cxxabiv1::__pointer_to_member_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const</STRONG> (Thumb, 158 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text._ZNK10__cxxabiv129__pointer_to_member_type_info9can_catchEPKNS_16__shim_type_infoERPv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dynamic_cast
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pbase_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
</UL>

<P><STRONG><a name="[107]"></a>TestFailure::getMessage() const</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, testfailure.o(.text._ZNK11TestFailure10getMessageEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = TestFailure::getMessage() const &rArr; SimpleString::SimpleString(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const SimpleString&)
</UL>
<BR>[Address Reference Count : 17]<UL><LI> testfailure.o(.rodata._ZTV11TestFailure)
<LI> testfailure.o(.rodata._ZTV13EqualsFailure)
<LI> testfailure.o(.rodata._ZTV19DoublesEqualFailure)
<LI> testfailure.o(.rodata._ZTV17CheckEqualFailure)
<LI> testfailure.o(.rodata._ZTV15ContainsFailure)
<LI> testfailure.o(.rodata._ZTV12CheckFailure)
<LI> testfailure.o(.rodata._ZTV11FailFailure)
<LI> testfailure.o(.rodata._ZTV17LongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV25UnsignedLongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV21LongLongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV29UnsignedLongLongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV23SignedBytesEqualFailure)
<LI> testfailure.o(.rodata._ZTV18StringEqualFailure)
<LI> testfailure.o(.rodata._ZTV24StringEqualNoCaseFailure)
<LI> testfailure.o(.rodata._ZTV18BinaryEqualFailure)
<LI> testfailure.o(.rodata._ZTV16BitsEqualFailure)
<LI> testfailure.o(.rodata._ZTV25FeatureUnsupportedFailure)
</UL>
<P><STRONG><a name="[103]"></a>TestFailure::getFileName() const</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, testfailure.o(.text._ZNK11TestFailure11getFileNameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = TestFailure::getFileName() const &rArr; SimpleString::SimpleString(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const SimpleString&)
</UL>
<BR>[Address Reference Count : 17]<UL><LI> testfailure.o(.rodata._ZTV11TestFailure)
<LI> testfailure.o(.rodata._ZTV13EqualsFailure)
<LI> testfailure.o(.rodata._ZTV19DoublesEqualFailure)
<LI> testfailure.o(.rodata._ZTV17CheckEqualFailure)
<LI> testfailure.o(.rodata._ZTV15ContainsFailure)
<LI> testfailure.o(.rodata._ZTV12CheckFailure)
<LI> testfailure.o(.rodata._ZTV11FailFailure)
<LI> testfailure.o(.rodata._ZTV17LongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV25UnsignedLongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV21LongLongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV29UnsignedLongLongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV23SignedBytesEqualFailure)
<LI> testfailure.o(.rodata._ZTV18StringEqualFailure)
<LI> testfailure.o(.rodata._ZTV24StringEqualNoCaseFailure)
<LI> testfailure.o(.rodata._ZTV18BinaryEqualFailure)
<LI> testfailure.o(.rodata._ZTV16BitsEqualFailure)
<LI> testfailure.o(.rodata._ZTV25FeatureUnsupportedFailure)
</UL>
<P><STRONG><a name="[104]"></a>TestFailure::getTestName() const</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, testfailure.o(.text._ZNK11TestFailure11getTestNameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = TestFailure::getTestName() const &rArr; SimpleString::SimpleString(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const SimpleString&)
</UL>
<BR>[Address Reference Count : 17]<UL><LI> testfailure.o(.rodata._ZTV11TestFailure)
<LI> testfailure.o(.rodata._ZTV13EqualsFailure)
<LI> testfailure.o(.rodata._ZTV19DoublesEqualFailure)
<LI> testfailure.o(.rodata._ZTV17CheckEqualFailure)
<LI> testfailure.o(.rodata._ZTV15ContainsFailure)
<LI> testfailure.o(.rodata._ZTV12CheckFailure)
<LI> testfailure.o(.rodata._ZTV11FailFailure)
<LI> testfailure.o(.rodata._ZTV17LongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV25UnsignedLongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV21LongLongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV29UnsignedLongLongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV23SignedBytesEqualFailure)
<LI> testfailure.o(.rodata._ZTV18StringEqualFailure)
<LI> testfailure.o(.rodata._ZTV24StringEqualNoCaseFailure)
<LI> testfailure.o(.rodata._ZTV18BinaryEqualFailure)
<LI> testfailure.o(.rodata._ZTV16BitsEqualFailure)
<LI> testfailure.o(.rodata._ZTV25FeatureUnsupportedFailure)
</UL>
<P><STRONG><a name="[108]"></a>TestFailure::getTestFileName() const</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, testfailure.o(.text._ZNK11TestFailure15getTestFileNameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = TestFailure::getTestFileName() const &rArr; SimpleString::SimpleString(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const SimpleString&)
</UL>
<BR>[Address Reference Count : 17]<UL><LI> testfailure.o(.rodata._ZTV11TestFailure)
<LI> testfailure.o(.rodata._ZTV13EqualsFailure)
<LI> testfailure.o(.rodata._ZTV19DoublesEqualFailure)
<LI> testfailure.o(.rodata._ZTV17CheckEqualFailure)
<LI> testfailure.o(.rodata._ZTV15ContainsFailure)
<LI> testfailure.o(.rodata._ZTV12CheckFailure)
<LI> testfailure.o(.rodata._ZTV11FailFailure)
<LI> testfailure.o(.rodata._ZTV17LongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV25UnsignedLongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV21LongLongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV29UnsignedLongLongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV23SignedBytesEqualFailure)
<LI> testfailure.o(.rodata._ZTV18StringEqualFailure)
<LI> testfailure.o(.rodata._ZTV24StringEqualNoCaseFailure)
<LI> testfailure.o(.rodata._ZTV18BinaryEqualFailure)
<LI> testfailure.o(.rodata._ZTV16BitsEqualFailure)
<LI> testfailure.o(.rodata._ZTV25FeatureUnsupportedFailure)
</UL>
<P><STRONG><a name="[105]"></a>TestFailure::getTestNameOnly() const</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, testfailure.o(.text._ZNK11TestFailure15getTestNameOnlyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = TestFailure::getTestNameOnly() const &rArr; SimpleString::SimpleString(const SimpleString&) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const SimpleString&)
</UL>
<BR>[Address Reference Count : 17]<UL><LI> testfailure.o(.rodata._ZTV11TestFailure)
<LI> testfailure.o(.rodata._ZTV13EqualsFailure)
<LI> testfailure.o(.rodata._ZTV19DoublesEqualFailure)
<LI> testfailure.o(.rodata._ZTV17CheckEqualFailure)
<LI> testfailure.o(.rodata._ZTV15ContainsFailure)
<LI> testfailure.o(.rodata._ZTV12CheckFailure)
<LI> testfailure.o(.rodata._ZTV11FailFailure)
<LI> testfailure.o(.rodata._ZTV17LongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV25UnsignedLongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV21LongLongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV29UnsignedLongLongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV23SignedBytesEqualFailure)
<LI> testfailure.o(.rodata._ZTV18StringEqualFailure)
<LI> testfailure.o(.rodata._ZTV24StringEqualNoCaseFailure)
<LI> testfailure.o(.rodata._ZTV18BinaryEqualFailure)
<LI> testfailure.o(.rodata._ZTV16BitsEqualFailure)
<LI> testfailure.o(.rodata._ZTV25FeatureUnsupportedFailure)
</UL>
<P><STRONG><a name="[109]"></a>TestFailure::getTestLineNumber() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testfailure.o(.text._ZNK11TestFailure17getTestLineNumberEv))
<BR>[Address Reference Count : 17]<UL><LI> testfailure.o(.rodata._ZTV11TestFailure)
<LI> testfailure.o(.rodata._ZTV13EqualsFailure)
<LI> testfailure.o(.rodata._ZTV19DoublesEqualFailure)
<LI> testfailure.o(.rodata._ZTV17CheckEqualFailure)
<LI> testfailure.o(.rodata._ZTV15ContainsFailure)
<LI> testfailure.o(.rodata._ZTV12CheckFailure)
<LI> testfailure.o(.rodata._ZTV11FailFailure)
<LI> testfailure.o(.rodata._ZTV17LongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV25UnsignedLongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV21LongLongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV29UnsignedLongLongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV23SignedBytesEqualFailure)
<LI> testfailure.o(.rodata._ZTV18StringEqualFailure)
<LI> testfailure.o(.rodata._ZTV24StringEqualNoCaseFailure)
<LI> testfailure.o(.rodata._ZTV18BinaryEqualFailure)
<LI> testfailure.o(.rodata._ZTV16BitsEqualFailure)
<LI> testfailure.o(.rodata._ZTV25FeatureUnsupportedFailure)
</UL>
<P><STRONG><a name="[28d]"></a>TestFailure::isOutsideTestFile() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, testfailure.o(.text._ZNK11TestFailure17isOutsideTestFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestFailure::isOutsideTestFile() const &rArr; operator !=(const SimpleString&, const SimpleString&) &rArr; operator ==(const SimpleString&, const SimpleString&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator !=(const SimpleString&, const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printFailure(const TestFailure&)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFailure(const TestFailure&)
</UL>

<P><STRONG><a name="[28e]"></a>TestFailure::isInHelperFunction() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, testfailure.o(.text._ZNK11TestFailure18isInHelperFunctionEv))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printFailure(const TestFailure&)
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFailure(const TestFailure&)
</UL>

<P><STRONG><a name="[106]"></a>TestFailure::getFailureLineNumber() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testfailure.o(.text._ZNK11TestFailure20getFailureLineNumberEv))
<BR>[Address Reference Count : 17]<UL><LI> testfailure.o(.rodata._ZTV11TestFailure)
<LI> testfailure.o(.rodata._ZTV13EqualsFailure)
<LI> testfailure.o(.rodata._ZTV19DoublesEqualFailure)
<LI> testfailure.o(.rodata._ZTV17CheckEqualFailure)
<LI> testfailure.o(.rodata._ZTV15ContainsFailure)
<LI> testfailure.o(.rodata._ZTV12CheckFailure)
<LI> testfailure.o(.rodata._ZTV11FailFailure)
<LI> testfailure.o(.rodata._ZTV17LongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV25UnsignedLongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV21LongLongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV29UnsignedLongLongsEqualFailure)
<LI> testfailure.o(.rodata._ZTV23SignedBytesEqualFailure)
<LI> testfailure.o(.rodata._ZTV18StringEqualFailure)
<LI> testfailure.o(.rodata._ZTV24StringEqualNoCaseFailure)
<LI> testfailure.o(.rodata._ZTV18BinaryEqualFailure)
<LI> testfailure.o(.rodata._ZTV16BitsEqualFailure)
<LI> testfailure.o(.rodata._ZTV25FeatureUnsupportedFailure)
</UL>
<P><STRONG><a name="[338]"></a>SimpleString::startsWith(const SimpleString&) const</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, simplestring.o(.text._ZNK12SimpleString10startsWithERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SimpleString::startsWith(const SimpleString&) const &rArr; SimpleString::StrStr(const char*, const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrStr(const char*, const char*)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrLen(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
</UL>

<P><STRONG><a name="[79]"></a>SimpleString::asCharString() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, simplestring.o(.text._ZNK12SimpleString12asCharStringEv))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::print(const SimpleString&, const char*, int)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::print(const char*, const char*, int)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeTestSuiteSummary()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::openFileForWrite(const SimpleString&)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeFailure(JUnitTestCaseResultNode*)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeToFile(const SimpleString&)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printVisualStudioErrorInFileOnLine(SimpleString, int)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printEclipseErrorInFileOnLine(SimpleString, int)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printDouble(double)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningReporter::fail(char*)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentGroupStarted(const UtestShell&)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentTestStarted(const UtestShell&)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentGroupEnded(const TestResult&)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentTestEnded(const TestResult&)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printFailure(const TestFailure&)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::print(long)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEqualFailure::CheckEqualFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsFailure::ContainsFailure(UtestShell*, const char*, int, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, TestFailure::DifferenceFormat)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createButWasString(const SimpleString&, const SimpleString&)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailableMemoryAllocator::checkAllFailedAllocsWereDone()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printCurrentTestStarted(const UtestShell&)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFailureMessage(SimpleString)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFailureInTest(SimpleString)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupAndCaseNames(TestResult&)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupNames(TestResult&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.text._ZN15JUnitTestOutput14writeTestCasesEv)
</UL>
<P><STRONG><a name="[2d5]"></a>SimpleString::copyToBuffer(char*, unsigned) const</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, simplestring.o(.text._ZNK12SimpleString12copyToBufferEPcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SimpleString::copyToBuffer(char*, unsigned) const
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrNCpy(char*, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, TestFailure::DifferenceFormat)
</UL>

<P><STRONG><a name="[2b5]"></a>SimpleString::equalsNoCase(const SimpleString&) const</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, simplestring.o(.text._ZNK12SimpleString12equalsNoCaseERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = SimpleString::equalsNoCase(const SimpleString&) const &rArr; SimpleString::lowerCase() const &rArr; SimpleString::SimpleString__sub_object(const SimpleString&)
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ==(const SimpleString&, const SimpleString&)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::lowerCase() const
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNoCaseEqual(const char*, const char*, const char*, const char*, int)
</UL>

<P><STRONG><a name="[2b7]"></a>SimpleString::containsNoCase(const SimpleString&) const</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, simplestring.o(.text._ZNK12SimpleString14containsNoCaseERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = SimpleString::containsNoCase(const SimpleString&) const &rArr; SimpleString::lowerCase() const &rArr; SimpleString::SimpleString__sub_object(const SimpleString&)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::lowerCase() const
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::contains(const SimpleString&) const
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNoCaseContains(const char*, const char*, const char*, const char*, int)
</UL>

<P><STRONG><a name="[2e5]"></a>SimpleString::getEmptyString() const</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, simplestring.o(.text._ZNK12SimpleString14getEmptyStringEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = SimpleString::getEmptyString() const &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::allocStringBuffer(unsigned, const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(const char*, const char*)
</UL>

<P><STRONG><a name="[335]"></a>SimpleString::subStringFromTill(char, char) const</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, simplestring.o(.text._ZNK12SimpleString17subStringFromTillEcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = SimpleString::subStringFromTill(char, char) const &rArr; SimpleString::subString(unsigned) const &rArr; SimpleString::subString(unsigned, unsigned) const &rArr; _Unwind_Resume &rArr; _ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb &rArr; unw_init_local &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned, unsigned) const
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned) const
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::findFrom(unsigned, char) const
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::find(char) const
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddTestToRunBasedOnVerboseOutput(int, const char**, int&, const char*)
</UL>

<P><STRONG><a name="[336]"></a>SimpleString::at(unsigned) const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, simplestring.o(.text._ZNK12SimpleString2atEj))
<BR><BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddTestToRunBasedOnVerboseOutput(int, const char**, int&, const char*)
</UL>

<P><STRONG><a name="[39c]"></a>SimpleString::find(char) const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, simplestring.o(.text._ZNK12SimpleString4findEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SimpleString::find(char) const &rArr; SimpleString::findFrom(unsigned, char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::findFrom(unsigned, char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subStringFromTill(char, char) const
</UL>

<P><STRONG><a name="[250]"></a>SimpleString::size() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, simplestring.o(.text._ZNK12SimpleString4sizeEv))
<BR><BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrLen(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned, unsigned) const
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::startsWith(const SimpleString&) const
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddTestToRunBasedOnVerboseOutput(int, const char**, int&, const char*)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::SetRepeatCount(int, const char**, int&)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::SetPackageName(int, const char**, int&)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::SetOutputType(int, const char**, int&)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::isEmpty() const
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(char, char)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(const char*, const char*)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::lowerCase() const
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::findFrom(unsigned, char) const
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::endsWith(const SimpleString&) const
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::copyToBuffer(char*, unsigned) const
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinary(const unsigned char*, unsigned)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(signed char)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, TestFailure::DifferenceFormat)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupAndCaseNames(TestResult&)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupNames(TestResult&)
</UL>

<P><STRONG><a name="[2e4]"></a>SimpleString::count(const SimpleString&) const</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, simplestring.o(.text._ZNK12SimpleString5countERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SimpleString::count(const SimpleString&) const &rArr; SimpleString::StrStr(const char*, const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrStr(const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(const char*, const char*)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::split(const SimpleString&, SimpleStringCollection&) const
</UL>

<P><STRONG><a name="[39e]"></a>SimpleString::split(const SimpleString&, SimpleStringCollection&) const</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, simplestring.o(.text._ZNK12SimpleString5splitERKS_R22SimpleStringCollection), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned, unsigned) const
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::endsWith(const SimpleString&) const
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::count(const SimpleString&) const
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringCollection::operator [](unsigned)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringCollection::allocate(unsigned)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString__sub_object()
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString__sub_object(const char*)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrStr(const char*, const char*)
</UL>

<P><STRONG><a name="[2d1]"></a>SimpleString::isEmpty() const</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, simplestring.o(.text._ZNK12SimpleString7isEmptyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SimpleString::isEmpty() const
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeTestCases()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
</UL>

<P><STRONG><a name="[2b0]"></a>SimpleString::contains(const SimpleString&) const</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, simplestring.o(.text._ZNK12SimpleString8containsERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SimpleString::contains(const SimpleString&) const &rArr; SimpleString::StrStr(const char*, const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrStr(const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrContains(const char*, const char*, const char*, const char*, int)
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::match(const SimpleString&) const
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::containsNoCase(const SimpleString&) const
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupAndCaseNames(TestResult&)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupNames(TestResult&)
</UL>

<P><STRONG><a name="[2ee]"></a>SimpleString::endsWith(const SimpleString&) const</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, simplestring.o(.text._ZNK12SimpleString8endsWithERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SimpleString::endsWith(const SimpleString&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrCmp(const char*, const char*)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrLen(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::split(const SimpleString&, SimpleStringCollection&) const
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupAndCaseNames(TestResult&)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupNames(TestResult&)
</UL>

<P><STRONG><a name="[39d]"></a>SimpleString::findFrom(unsigned, char) const</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, simplestring.o(.text._ZNK12SimpleString8findFromEjc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SimpleString::findFrom(unsigned, char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subStringFromTill(char, char) const
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::find(char) const
</UL>

<P><STRONG><a name="[39b]"></a>SimpleString::lowerCase() const</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, simplestring.o(.text._ZNK12SimpleString9lowerCaseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SimpleString::lowerCase() const &rArr; SimpleString::SimpleString__sub_object(const SimpleString&)
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString__sub_object(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::containsNoCase(const SimpleString&) const
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::equalsNoCase(const SimpleString&) const
</UL>

<P><STRONG><a name="[251]"></a>SimpleString::subString(unsigned) const</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, simplestring.o(.text._ZNK12SimpleString9subStringEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = SimpleString::subString(unsigned) const &rArr; SimpleString::subString(unsigned, unsigned) const &rArr; _Unwind_Resume &rArr; _ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb &rArr; unw_init_local &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned, unsigned) const
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subStringFromTill(char, char) const
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(signed char)
</UL>

<P><STRONG><a name="[25a]"></a>SimpleString::subString(unsigned, unsigned) const</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, simplestring.o(.text._ZNK12SimpleString9subStringEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = SimpleString::subString(unsigned, unsigned) const &rArr; _Unwind_Resume &rArr; _ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb &rArr; unw_init_local &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString__sub_object()
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString__sub_object(const SimpleString&)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString__sub_object(const char*)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrLen(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subStringFromTill(char, char) const
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddTestToRunBasedOnVerboseOutput(int, const char**, int&, const char*)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned) const
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::split(const SimpleString&, SimpleStringCollection&) const
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinary(const unsigned char*, unsigned)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, TestFailure::DifferenceFormat)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupAndCaseNames(TestResult&)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupNames(TestResult&)
</UL>

<P><STRONG><a name="[239]"></a>SimpleString::operator +(const SimpleString&) const</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, simplestring.o(.text._ZNK12SimpleStringplERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = SimpleString::operator +(const SimpleString&) const &rArr; SimpleString::operator +=(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString__sub_object()
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char)
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(const void*)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(void(*)())
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, int, unsigned long long, unsigned long long, const SimpleString&)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, int, unsigned long, unsigned long, const SimpleString&)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, int, signed char, signed char, const SimpleString&)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, int, long long, long long, const SimpleString&)
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, int, long, long, const SimpleString&)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, TestFailure::DifferenceFormat)
</UL>

<P><STRONG><a name="[152]"></a>IgnoredUtestShell::getMacroName() const</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, utest.o(.text._ZNK17IgnoredUtestShell12getMacroNameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = IgnoredUtestShell::getMacroName() const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
</UL>
<P><STRONG><a name="[14f]"></a>IgnoredUtestShell::willRun() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utest.o(.text._ZNK17IgnoredUtestShell7willRunEv))
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.rodata._ZTV17IgnoredUtestShell)
</UL>
<P><STRONG><a name="[355]"></a>CommandLineArguments::isRunIgnored() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, commandlinearguments.o(.text._ZNK20CommandLineArguments12isRunIgnoredEv))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::initializeTestRun()
</UL>

<P><STRONG><a name="[34c]"></a>CommandLineArguments::isJUnitOutput() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, commandlinearguments.o(.text._ZNK20CommandLineArguments13isJUnitOutputEv))
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::parseArguments(TestPlugin*)
</UL>

<P><STRONG><a name="[352]"></a>CommandLineArguments::getNameFilters() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, commandlinearguments.o(.text._ZNK20CommandLineArguments14getNameFiltersEv))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::initializeTestRun()
</UL>

<P><STRONG><a name="[34d]"></a>CommandLineArguments::getPackageName() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, commandlinearguments.o(.text._ZNK20CommandLineArguments14getPackageNameEv))
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::parseArguments(TestPlugin*)
</UL>

<P><STRONG><a name="[347]"></a>CommandLineArguments::getRepeatCount() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, commandlinearguments.o(.text._ZNK20CommandLineArguments14getRepeatCountEv))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTests()
</UL>

<P><STRONG><a name="[351]"></a>CommandLineArguments::getGroupFilters() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, commandlinearguments.o(.text._ZNK20CommandLineArguments15getGroupFiltersEv))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::initializeTestRun()
</UL>

<P><STRONG><a name="[350]"></a>CommandLineArguments::isTeamCityOutput() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, commandlinearguments.o(.text._ZNK20CommandLineArguments16isTeamCityOutputEv))
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::parseArguments(TestPlugin*)
</UL>

<P><STRONG><a name="[348]"></a>CommandLineArguments::isListingTestGroupNames() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, commandlinearguments.o(.text._ZNK20CommandLineArguments23isListingTestGroupNamesEv))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTests()
</UL>

<P><STRONG><a name="[354]"></a>CommandLineArguments::runTestsInSeperateProcess() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, commandlinearguments.o(.text._ZNK20CommandLineArguments25runTestsInSeperateProcessEv))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::initializeTestRun()
</UL>

<P><STRONG><a name="[349]"></a>CommandLineArguments::isListingTestGroupAndCaseNames() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, commandlinearguments.o(.text._ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTests()
</UL>

<P><STRONG><a name="[34f]"></a>CommandLineArguments::usage() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, commandlinearguments.o(.text._ZNK20CommandLineArguments5usageEv))
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::parseArguments(TestPlugin*)
</UL>

<P><STRONG><a name="[353]"></a>CommandLineArguments::isColor() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, commandlinearguments.o(.text._ZNK20CommandLineArguments7isColorEv))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::initializeTestRun()
</UL>

<P><STRONG><a name="[34e]"></a>CommandLineArguments::isVerbose() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, commandlinearguments.o(.text._ZNK20CommandLineArguments9isVerboseEv))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::initializeTestRun()
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::parseArguments(TestPlugin*)
</UL>

<P><STRONG><a name="[17e]"></a>NormalTestTerminator::exitCurrentTest() const</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, utest.o(.text._ZNK20NormalTestTerminator15exitCurrentTestEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = NormalTestTerminator::exitCurrentTest() const &rArr; __cxa_allocate_exception &rArr;  std::terminate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.rodata._ZTV20NormalTestTerminator)
</UL>
<P><STRONG><a name="[1ae]"></a>TestTerminatorWithoutExceptions::exitCurrentTest() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, utest.o(.text._ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv))
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.rodata._ZTV31TestTerminatorWithoutExceptions)
</UL>
<P><STRONG><a name="[1d7]"></a>std::bad_exception::what() const</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNKSt13bad_exception4whatEv))
<BR>[Address Reference Count : 1]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt13bad_exception)
</UL>
<P><STRONG><a name="[1d9]"></a>std::bad_array_new_length::what() const</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNKSt20bad_array_new_length4whatEv))
<BR>[Address Reference Count : 1]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt20bad_array_new_length)
</UL>
<P><STRONG><a name="[1db]"></a>std::bad_alloc::what() const</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNKSt9bad_alloc4whatEv))
<BR>[Address Reference Count : 1]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt9bad_alloc)
</UL>
<P><STRONG><a name="[1d6]"></a>std::bad_exception::~bad_exception__deallocating()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt13bad_exceptionD0Ev))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt13bad_exception)
</UL>
<P><STRONG><a name="[439]"></a>std::bad_array_new_length::bad_array_new_length()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt20bad_array_new_lengthC2Ev), UNUSED)

<P><STRONG><a name="[43a]"></a>std::bad_array_new_length::bad_array_new_length__sub_object()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt20bad_array_new_lengthC2Ev), UNUSED)

<P><STRONG><a name="[1d8]"></a>std::bad_array_new_length::~bad_array_new_length__deallocating()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt20bad_array_new_lengthD0Ev))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt20bad_array_new_length)
</UL>
<P><STRONG><a name="[27d]"></a>std::bad_alloc::bad_alloc()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9bad_allocC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL44threadsafe_mem_leak_operator_new_array_debugjPKci
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38threadsafe_mem_leak_operator_new_debugjPKci
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38threadsafe_mem_leak_operator_new_arrayj
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mem_leak_operator_new_array_debugjPKci
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32threadsafe_mem_leak_operator_newj
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31normal_operator_new_array_debugjPKci
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27mem_leak_operator_new_debugjPKci
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27mem_leak_operator_new_arrayj
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25normal_operator_new_debugjPKci
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25normal_operator_new_arrayj
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mem_leak_operator_newj
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19normal_operator_newj
</UL>

<P><STRONG><a name="[43b]"></a>std::bad_alloc::bad_alloc__sub_object()</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9bad_allocC2Ev), UNUSED)

<P><STRONG><a name="[1da]"></a>std::bad_alloc::~bad_alloc__deallocating()</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9bad_allocD0Ev))
<BR><BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt9bad_alloc)
</UL>
<P><STRONG><a name="[a4]"></a>std::bad_exception::~bad_exception()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> cxa_personality.cpp.o(.text.__cxa_call_unexpected)
</UL>
<P><STRONG><a name="[43c]"></a>std::bad_exception::~bad_exception__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev), UNUSED)

<P><STRONG><a name="[43d]"></a>std::bad_array_new_length::~bad_array_new_length()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev), UNUSED)

<P><STRONG><a name="[43e]"></a>std::bad_array_new_length::~bad_array_new_length__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev), UNUSED)

<P><STRONG><a name="[73]"></a>std::bad_alloc::~bad_alloc()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev))
<BR>[Address Reference Count : 5]<UL><LI> memoryleakwarningplugin.o(.text._ZL33mem_leak_operator_new_array_debugjPKci)
<LI> memoryleakwarningplugin.o(.text._ZL32threadsafe_mem_leak_operator_newj)
<LI> memoryleakwarningplugin.o(.text._ZL38threadsafe_mem_leak_operator_new_debugjPKci)
<LI> memoryleakwarningplugin.o(.text._ZL38threadsafe_mem_leak_operator_new_arrayj)
<LI> memoryleakwarningplugin.o(.text._ZL44threadsafe_mem_leak_operator_new_array_debugjPKci)
</UL>
<P><STRONG><a name="[43f]"></a>std::bad_alloc::~bad_alloc__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev), UNUSED)

<P><STRONG><a name="[440]"></a>std::exception::~exception()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev), UNUSED)

<P><STRONG><a name="[1d5]"></a>std::exception::~exception__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_exception.cpp.o(.text._ZNSt9exceptionD2Ev))
<BR>[Address Reference Count : 3]<UL><LI> stdlib_exception.cpp.o(.rodata._ZTVSt9bad_alloc)
<LI> stdlib_exception.cpp.o(.rodata._ZTVSt20bad_array_new_length)
<LI> stdlib_exception.cpp.o(.rodata._ZTVSt13bad_exception)
</UL>
<P><STRONG><a name="[441]"></a>std::type_info::~type_info()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_typeinfo.cpp.o(.text._ZNSt9type_infoD2Ev), UNUSED)

<P><STRONG><a name="[2bd]"></a>std::type_info::~type_info__sub_object()</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, stdlib_typeinfo.cpp.o(.text._ZNSt9type_infoD2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__enum_type_info::~__enum_type_info()
</UL>

<P><STRONG><a name="[39f]"></a>std::unexpected()</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, cxa_handlers.cpp.o(.text._ZSt10unexpectedv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__unexpected(void(*)())
</UL>

<P><STRONG><a name="[2cb]"></a>std::__terminate(void(*)())</STRONG> (Thumb, 128 bytes, Stack size unknown bytes, cxa_handlers.cpp.o(.text._ZSt11__terminatePFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = std::__terminate(void(*)()) &rArr;  __cxa_begin_catch (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L12failed_throwEPNS_15__cxa_exceptionE
</UL>

<P><STRONG><a name="[3a0]"></a>std::__unexpected(void(*)())</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, cxa_handlers.cpp.o(.text._ZSt12__unexpectedPFvvE))
<BR><BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::unexpected()
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[3a8]"></a>std::get_terminate()</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, cxa_handlers.cpp.o(.text._ZSt13get_terminatev))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow_primary_exception
</UL>

<P><STRONG><a name="[442]"></a>std::set_terminate(void(*)())</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, cxa_default_handlers.cpp.o(.text._ZSt13set_terminatePFvvE), UNUSED)

<P><STRONG><a name="[3a9]"></a>std::get_unexpected()</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, cxa_handlers.cpp.o(.text._ZSt14get_unexpectedv))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow_primary_exception
</UL>

<P><STRONG><a name="[443]"></a>std::set_unexpected(void(*)())</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, cxa_default_handlers.cpp.o(.text._ZSt14set_unexpectedPFvvE), UNUSED)

<P><STRONG><a name="[a3]"></a>std::terminate()</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, cxa_handlers.cpp.o(.text._ZSt9terminatev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals_fast
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__isOurExceptionClass(const _Unwind_Control_Block*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_cleanup
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_dependent_exception
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_cleanup_impl
</UL>
<BR>[Address Reference Count : 2]<UL><LI> cxa_default_handlers.cpp.o(.text._ZSt14set_unexpectedPFvvE)
<LI> cxa_default_handlers.cpp.o(.data.__cxa_unexpected_handler)
</UL>
<P><STRONG><a name="[360]"></a>operator delete[] (void*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(.text._ZdaPv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringCollection::~SimpleStringCollection()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringCollection::allocate(unsigned)
</UL>

<P><STRONG><a name="[362]"></a>operator delete[] (void*, const char*, int)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(.text._ZdaPvPKci), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringCollection::allocate(unsigned)
</UL>

<P><STRONG><a name="[444]"></a>operator delete[] (void*, unsigned)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(.text._ZdaPvj), UNUSED)

<P><STRONG><a name="[29e]"></a>operator delete (void*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(.text._ZdlPv))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::~CommandLineArguments()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::~CommandLineArguments__deallocating()
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_GROUP_CppUTestGroupmyFirstUnitTest::~TEST_GROUP_CppUTestGroupmyFirstUnitTest__deallocating()
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_myFirstUnitTest_API2_TestShell::~TEST_myFirstUnitTest_API2_TestShell__deallocating()
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_myFirstUnitTest_API1_TestShell::~TEST_myFirstUnitTest_API1_TestShell__deallocating()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_myFirstUnitTest_API2_Test::~TEST_myFirstUnitTest_API2_Test__deallocating()
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_myFirstUnitTest_API1_Test::~TEST_myFirstUnitTest_API1_Test__deallocating()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::~CommandLineTestRunner__deallocating()
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::~MemoryLeakDetector()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::~MemoryLeakDetector__deallocating()
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::~JUnitTestOutput()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::~JUnitTestOutput__deallocating()
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::resetTestGroupResult()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::~TeamCityTestOutput__deallocating()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::~UnsignedLongLongsEqualFailure__deallocating()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::~UnsignedLongsEqualFailure__deallocating()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FeatureUnsupportedFailure::~FeatureUnsupportedFailure__deallocating()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualNoCaseFailure::~StringEqualNoCaseFailure__deallocating()
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::~SignedBytesEqualFailure__deallocating()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::~LongLongsEqualFailure__deallocating()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoublesEqualFailure::~DoublesEqualFailure__deallocating()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::~StringEqualFailure__deallocating()
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinaryEqualFailure::~BinaryEqualFailure__deallocating()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::~LongsEqualFailure__deallocating()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEqualFailure::~CheckEqualFailure__deallocating()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsEqualFailure::~BitsEqualFailure__deallocating()
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsFailure::~ContainsFailure__deallocating()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::~EqualsFailure__deallocating()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFailure::~CheckFailure__deallocating()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__deallocating()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailFailure::~FailFailure__deallocating()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrashOnAllocationAllocator::~CrashOnAllocationAllocator__deallocating()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailableMemoryAllocator::~FailableMemoryAllocator__deallocating()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullUnknownAllocator::~NullUnknownAllocator__deallocating()
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMemoryAllocator::~TestMemoryAllocator__deallocating()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPointerPlugin::~SetPointerPlugin__deallocating()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullTestPlugin::~NullTestPlugin__deallocating()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::~TestPlugin__deallocating()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringBufferTestOutput::~StringBufferTestOutput__deallocating()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompositeTestOutput::~CompositeTestOutput__deallocating()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleTestOutput::~ConsoleTestOutput__deallocating()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestResult::~TestResult__deallocating()
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::~TestRegistry__deallocating()
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::~bad_alloc__deallocating()
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_array_new_length::~bad_array_new_length__deallocating()
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_exception::~bad_exception__deallocating()
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__fundamental_type_info::~__fundamental_type_info__deallocating()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__si_class_type_info::~__si_class_type_info__deallocating()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::~__class_type_info__deallocating()
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utest::~Utest__deallocating()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions__deallocating()
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsideTestRunnerUTest::~OutsideTestRunnerUTest__deallocating()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalTestTerminator::~NormalTestTerminator__deallocating()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IgnoredUtestShell::~IgnoredUtestShell__deallocating()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecFunctionTest::~ExecFunctionTest__deallocating()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestInstaller::~TestInstaller__deallocating()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::~UtestShell__deallocating()
</UL>

<P><STRONG><a name="[2f7]"></a>operator delete (void*, const char*, int)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(.text._ZdlPvPKci))
<BR><BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddTestToRunBasedOnVerboseOutput(int, const char**, int&, const char*)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeStrictGroupFilter(int, const char**, int&)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeStrictNameFilter(int, const char**, int&)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeGroupFilter(int, const char**, int&)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddStrictGroupFilter(int, const char**, int&)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeNameFilter(int, const char**, int&)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddStrictNameFilter(int, const char**, int&)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddGroupFilter(int, const char**, int&)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddNameFilter(int, const char**, int&)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_myFirstUnitTest_API2_TestShell::createTest()
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_myFirstUnitTest_API1_TestShell::createTest()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::CommandLineTestRunner(int, const char**, TestRegistry*)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::createCompositeOutput(TestOutput*, TestOutput*)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::createTeamCityOutput()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::createConsoleOutput()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::createJUnitOutput(const SimpleString&)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::JUnitTestOutput()
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure*)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::printCurrentTestStarted(const UtestShell&)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::printFailure(const TestFailure&)
</UL>

<P><STRONG><a name="[445]"></a>operator delete (void*, unsigned)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(.text._ZdlPvj), UNUSED)

<P><STRONG><a name="[29a]"></a>operator ==(const SimpleString&, const SimpleString&)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, simplestring.o(.text._ZeqRK12SimpleStringS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = operator ==(const SimpleString&, const SimpleString&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrCmp(const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::SetOutputType(int, const char**, int&)
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::match(const SimpleString&) const
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::removePluginByName(const SimpleString&)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentGroupEnded(const TestResult&)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator !=(const SimpleString&, const SimpleString&)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::equalsNoCase(const SimpleString&) const
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::getPluginByName(const SimpleString&)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::removePluginByName(const SimpleString&)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::findTestWithGroup(const SimpleString&)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::findTestWithName(const SimpleString&)
</UL>

<P><STRONG><a name="[342]"></a>operator &lang;&lang;(TestOutput&, const char*)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, testoutput.o(.text._ZlsR10TestOutputPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = operator &lang;&lang;(TestOutput&, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::RunAllTests(int, const char**)
</UL>

<P><STRONG><a name="[446]"></a>operator new[] (unsigned)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(.text._Znaj), UNUSED)

<P><STRONG><a name="[361]"></a>operator new[] (unsigned, const char*, int)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(.text._ZnajPKci), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringCollection::allocate(unsigned)
</UL>

<P><STRONG><a name="[447]"></a>operator new[] (unsigned, const std::nothrow_t&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(.text._ZnajRKSt9nothrow_t), UNUSED)

<P><STRONG><a name="[2e9]"></a>operator !=(const SimpleString&, const SimpleString&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, simplestring.o(.text._ZneRK12SimpleStringS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = operator !=(const SimpleString&, const SimpleString&) &rArr; operator ==(const SimpleString&, const SimpleString&)
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ==(const SimpleString&, const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::isOutsideTestFile() const
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::endOfGroup(UtestShell*)
</UL>

<P><STRONG><a name="[35a]"></a>operator new(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(.text._Znwj), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExecFunctionTestShell::createTest()
</UL>

<P><STRONG><a name="[2a5]"></a>operator new(unsigned, const char*, int)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(.text._ZnwjPKci))
<BR><BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddTestToRunBasedOnVerboseOutput(int, const char**, int&, const char*)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeStrictGroupFilter(int, const char**, int&)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeStrictNameFilter(int, const char**, int&)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeGroupFilter(int, const char**, int&)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddStrictGroupFilter(int, const char**, int&)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddExcludeNameFilter(int, const char**, int&)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddStrictNameFilter(int, const char**, int&)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddGroupFilter(int, const char**, int&)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::AddNameFilter(int, const char**, int&)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_myFirstUnitTest_API2_TestShell::createTest()
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_myFirstUnitTest_API1_TestShell::createTest()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::CommandLineTestRunner(int, const char**, TestRegistry*)
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::createCompositeOutput(TestOutput*, TestOutput*)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::createTeamCityOutput()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::createConsoleOutput()
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::createJUnitOutput(const SimpleString&)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::JUnitTestOutput()
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure*)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::printCurrentTestStarted(const UtestShell&)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::printFailure(const TestFailure&)
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::createTest()
</UL>

<P><STRONG><a name="[448]"></a>operator new(unsigned, const std::nothrow_t&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(.text._ZnwjRKSt9nothrow_t), UNUSED)

<P><STRONG><a name="[9f]"></a>__aeabi_unwind_cpp_pr0</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text.__aeabi_unwind_cpp_pr0))
<BR><BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::unwindOneFrame(unsigned, _Unwind_Control_Block*, _Unwind_Context*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE23getInfoFromEHABISectionEjRKNS_18UnwindInfoSectionsE)
</UL>
<P><STRONG><a name="[a0]"></a>__aeabi_unwind_cpp_pr1</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text.__aeabi_unwind_cpp_pr1))
<BR><BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::unwindOneFrame(unsigned, _Unwind_Control_Block*, _Unwind_Context*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE23getInfoFromEHABISectionEjRKNS_18UnwindInfoSectionsE)
</UL>
<P><STRONG><a name="[a1]"></a>__aeabi_unwind_cpp_pr2</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text.__aeabi_unwind_cpp_pr2))
<BR><BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::unwindOneFrame(unsigned, _Unwind_Control_Block*, _Unwind_Context*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libunwind.cpp.o(.text._ZN9libunwind12UnwindCursorINS_17LocalAddressSpaceENS_13Registers_armEE23getInfoFromEHABISectionEjRKNS_18UnwindInfoSectionsE)
</UL>
<P><STRONG><a name="[280]"></a>__clang_call_terminate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, commandlinearguments.o(.text.__clang_call_terminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::~CommandLineArguments()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utest::run()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleMutex::~SimpleMutex()
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::~JUnitTestOutput()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScopedMutexLock::~ScopedMutexLock()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL46threadsafe_mem_leak_operator_new_array_nothrowj
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL41threadsafe_mem_leak_operator_delete_arrayPv
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL40threadsafe_mem_leak_operator_new_nothrowj
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL35threadsafe_mem_leak_operator_deletePv
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL35mem_leak_operator_new_array_nothrowj
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33normal_operator_new_array_nothrowj
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL30mem_leak_operator_delete_arrayPv
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL29mem_leak_operator_new_nothrowj
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL28normal_operator_delete_arrayPv
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27normal_operator_new_nothrowj
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL24mem_leak_operator_deletePv
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL22normal_operator_deletePv
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
</UL>

<P><STRONG><a name="[3a4]"></a>__cxa_allocate_dependent_exception</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_allocate_dependent_exception), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_malloc_with_fallback(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow_primary_exception
</UL>

<P><STRONG><a name="[27c]"></a>__cxa_allocate_exception</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_allocate_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = __cxa_allocate_exception &rArr;  std::terminate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_malloc_with_fallback(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL44threadsafe_mem_leak_operator_new_array_debugjPKci
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38threadsafe_mem_leak_operator_new_debugjPKci
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38threadsafe_mem_leak_operator_new_arrayj
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mem_leak_operator_new_array_debugjPKci
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32threadsafe_mem_leak_operator_newj
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31normal_operator_new_array_debugjPKci
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27mem_leak_operator_new_debugjPKci
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27mem_leak_operator_new_arrayj
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25normal_operator_new_debugjPKci
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25normal_operator_new_arrayj
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mem_leak_operator_newj
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19normal_operator_newj
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalTestTerminator::exitCurrentTest() const
</UL>

<P><STRONG><a name="[2ca]"></a>__cxa_begin_catch</STRONG> (Thumb, 106 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_begin_catch))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utest::run()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow_primary_exception
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L12failed_throwEPNS_15__cxa_exceptionE
</UL>

<P><STRONG><a name="[3a7]"></a>__cxa_begin_cleanup</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_begin_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __cxa_begin_cleanup &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gxx_personality_v0
</UL>

<P><STRONG><a name="[3a5]"></a>__cxa_call_unexpected</STRONG> (Thumb, 390 bytes, Stack size unknown bytes, cxa_personality.cpp.o(.text.__cxa_call_unexpected))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = __cxa_call_unexpected &rArr;  __cxa_begin_catch (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L24exception_spec_can_catchExPKhhPKNS_16__shim_type_infoEPvP21_Unwind_Control_Block
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L18readEncodedPointerEPPKhh
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__unexpected(void(*)())
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals_fast
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_unexpected()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_terminate()
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__isOurExceptionClass(const _Unwind_Control_Block*)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_decrement_exception_refcount
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_cleanup
</UL>

<P><STRONG><a name="[2cd]"></a>__cxa_decrement_exception_refcount</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_decrement_exception_refcount))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __cxa_decrement_exception_refcount &rArr; __cxa_call_unexpected &rArr;  __cxa_begin_catch (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_free_with_fallback(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
</UL>

<P><STRONG><a name="[383]"></a>__cxa_end_catch</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_end_catch))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __cxa_end_catch &rArr; __cxa_decrement_exception_refcount &rArr; __cxa_call_unexpected &rArr;  __cxa_begin_catch (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals_fast
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_free_with_fallback(void*)
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_DeleteException
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_decrement_exception_refcount
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utest::run()
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
</UL>

<P><STRONG><a name="[3a6]"></a>__cxa_get_globals</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, cxa_exception_storage.cpp.o(.text.__cxa_get_globals))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow_primary_exception
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_cleanup
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_cleanup_impl
</UL>

<P><STRONG><a name="[3a2]"></a>__cxa_get_globals_fast</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, cxa_exception_storage.cpp.o(.text.__cxa_get_globals_fast))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
</UL>

<P><STRONG><a name="[263]"></a>__cxa_guard_acquire</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, cxa_guard.cpp.o(.text.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::getCurrentRegistry()
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullUnknownAllocator::defaultAllocator()
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crash_on_allocation_number(unsigned)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultNewArrayAllocator()
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultMallocAllocator()
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultNewAllocator()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullTestPlugin::instance()
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsideTestRunnerUTest::instance()
</UL>

<P><STRONG><a name="[b4]"></a>__cxa_pure_virtual</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, cxa_virtual.cpp.o(.text.__cxa_pure_virtual))
<BR><BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.rodata._ZTV10TestOutput)
</UL>
<P><STRONG><a name="[3aa]"></a>__cxa_rethrow</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_rethrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = __cxa_rethrow &rArr;  __cxa_begin_catch (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[3ac]"></a>__cxa_rethrow_primary_exception</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_rethrow_primary_exception), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_unexpected()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_terminate()
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_dependent_exception
</UL>

<P><STRONG><a name="[27e]"></a>__cxa_throw</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_throw))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __cxa_throw &rArr; _Unwind_RaiseException &rArr; unw_init_local &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_unexpected()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_terminate()
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L12failed_throwEPNS_15__cxa_exceptionE
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL44threadsafe_mem_leak_operator_new_array_debugjPKci
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38threadsafe_mem_leak_operator_new_debugjPKci
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL38threadsafe_mem_leak_operator_new_arrayj
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL33mem_leak_operator_new_array_debugjPKci
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL32threadsafe_mem_leak_operator_newj
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL31normal_operator_new_array_debugjPKci
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27mem_leak_operator_new_debugjPKci
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL27mem_leak_operator_new_arrayj
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25normal_operator_new_debugjPKci
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL25normal_operator_new_arrayj
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL21mem_leak_operator_newj
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL19normal_operator_newj
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalTestTerminator::exitCurrentTest() const
</UL>

<P><STRONG><a name="[394]"></a>__dynamic_cast</STRONG> (Thumb, 166 bytes, Stack size unknown bytes, private_typeinfo.cpp.o(.text.__dynamic_cast))
<BR><BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_to_member_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_to_member_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pointer_type_info::can_catch_nested(const __cxxabiv1::__shim_type_info*) const
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__pbase_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::can_catch(const __cxxabiv1::__shim_type_info*, void*&) const
</UL>

<P><STRONG><a name="[3ad]"></a>__gnu_unwind_frame</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text.__gnu_unwind_frame))
<BR><BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_step
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gxx_personality_v0
</UL>

<P><STRONG><a name="[a9]"></a>__gxx_personality_v0</STRONG> (Thumb, 284 bytes, Stack size unknown bytes, cxa_personality.cpp.o(.text.__gxx_personality_v0))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __gxx_personality_v0 &rArr; __cxa_begin_cleanup &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gnu_unwind_frame
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Get
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L13set_registersEP21_Unwind_Control_BlockP15_Unwind_ContextRKNS_12_GLOBAL__N_112scan_resultsE
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_cleanup
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__isOurExceptionClass(const _Unwind_Control_Block*)
</UL>
<BR>[Address Reference Count : 167]<UL><LI> testregistry.o(.ARM.extab.text._ZN12TestRegistry10endOfGroupEP10UtestShell)
<LI> unittest.o(.ARM.extab.text._ZN35TEST_myFirstUnitTest_API1_TestShell10createTestEv)
<LI> commandlinearguments.o(.ARM.extab.text._ZN20CommandLineArgumentsD2Ev)
<LI> commandlinearguments.o(.ARM.extab.text._ZN20CommandLineArguments5parseEP10TestPlugin)
<LI> commandlinearguments.o(.ARM.extab.text._ZN20CommandLineArguments14SetRepeatCountEiPPKcRi)
<LI> unittest.o(.ARM.extab.text._ZN30TEST_myFirstUnitTest_API1_Test8testBodyEv)
<LI> unittest.o(.ARM.extab.text._ZN30TEST_myFirstUnitTest_API2_Test8testBodyEv)
<LI> commandlinetestrunner.o(.ARM.extab.text._ZN21CommandLineTestRunner11RunAllTestsEiPPKc)
<LI> commandlinetestrunner.o(.ARM.extab.text._ZN21CommandLineTestRunner15runAllTestsMainEv)
<LI> commandlinetestrunner.o(.ARM.extab.text._ZN21CommandLineTestRunnerC2EiPPKcP12TestRegistry)
<LI> junittestoutput.o(.ARM.extab.text._ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell)
<LI> junittestoutput.o(.ARM.extab.text._ZN15JUnitTestOutput14createFileNameERK12SimpleString)
<LI> simplemutex.o(.ARM.extab.text._ZN15ScopedMutexLockD2Ev)
<LI> teamcitytestoutput.o(.ARM.extab.text._ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult)
<LI> teamcitytestoutput.o(.ARM.extab.text._ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell)
<LI> teamcitytestoutput.o(.ARM.extab.text._ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult)
<LI> testfailure.o(.ARM.extab.text._ZN11TestFailureC2ERKS_)
<LI> teamcitytestoutput.o(.ARM.extab.text._ZN18TeamCityTestOutput12printFailureERK11TestFailure)
<LI> testfilter.o(.ARM.extab.text._ZN10TestFilterC2EPKc)
<LI> commandlinearguments.o(.ARM.extab.text._ZN20CommandLineArguments14AddGroupFilterEiPPKcRi)
<LI> commandlinearguments.o(.ARM.extab.text._ZN20CommandLineArguments20AddStrictGroupFilterEiPPKcRi)
<LI> commandlinearguments.o(.ARM.extab.text._ZN20CommandLineArguments21AddExcludeGroupFilterEiPPKcRi)
<LI> commandlinearguments.o(.ARM.extab.text._ZN20CommandLineArguments27AddExcludeStrictGroupFilterEiPPKcRi)
<LI> commandlinearguments.o(.ARM.extab.text._ZN20CommandLineArguments13AddNameFilterEiPPKcRi)
<LI> commandlinearguments.o(.ARM.extab.text._ZN20CommandLineArguments19AddStrictNameFilterEiPPKcRi)
<LI> commandlinearguments.o(.ARM.extab.text._ZN20CommandLineArguments20AddExcludeNameFilterEiPPKcRi)
<LI> commandlinearguments.o(.ARM.extab.text._ZN20CommandLineArguments26AddExcludeStrictNameFilterEiPPKcRi)
<LI> commandlinearguments.o(.ARM.extab.text._ZN20CommandLineArguments32AddTestToRunBasedOnVerboseOutputEiPPKcRiS1_)
<LI> commandlinearguments.o(.ARM.extab.text._ZN20CommandLineArguments13SetOutputTypeEiPPKcRi)
<LI> commandlinearguments.o(.ARM.extab.text._ZN20CommandLineArguments14SetPackageNameEiPPKcRi)
<LI> commandlinetestrunner.o(.ARM.extab.text._ZN21CommandLineTestRunner11runAllTestsEv)
<LI> commandlinetestrunner.o(.ARM.extab.text._ZN21CommandLineTestRunner20createTeamCityOutputEv)
<LI> commandlinetestrunner.o(.ARM.extab.text._ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString)
<LI> commandlinetestrunner.o(.ARM.extab.text._ZN21CommandLineTestRunner19createConsoleOutputEv)
<LI> commandlinetestrunner.o(.ARM.extab.text._ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_)
<LI> junittestoutput.o(.ARM.extab.text._ZN15JUnitTestOutput14writeXmlHeaderEv)
<LI> junittestoutput.o(.ARM.extab.text._ZN15JUnitTestOutput21writeTestSuiteSummaryEv)
<LI> junittestoutput.o(.ARM.extab.text._ZN15JUnitTestOutput15writePropertiesEv)
<LI> junittestoutput.o(.ARM.extab.text._ZN15JUnitTestOutput14writeTestCasesEv)
<LI> junittestoutput.o(.ARM.extab.text._ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode)
<LI> junittestoutput.o(.ARM.extab.text._ZN15JUnitTestOutput15writeFileEndingEv)
<LI> junittestoutput.o(.ARM.extab.text._ZN15JUnitTestOutput20writeTestGroupToFileEv)
<LI> junittestoutput.o(.ARM.extab.text._ZN15JUnitTestOutput12printFailureERK11TestFailure)
<LI> memoryleakwarningplugin.o(.ARM.extab.text._ZN23MemoryLeakWarningPluginC2ERK12SimpleStringP18MemoryLeakDetector)
<LI> memoryleakwarningplugin.o(.ARM.extab.text._ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult)
<LI> memoryleakdetector.o(.ARM.extab.text._ZN18MemoryLeakDetectorC2EP17MemoryLeakFailure)
<LI> testoutput.o(.ARM.extab.text._ZN10TestOutput5printEl)
<LI> testoutput.o(.ARM.extab.text._ZN10TestOutput11printDoubleEd)
<LI> memoryleakwarningplugin.o(.ARM.extab.text._ZL27normal_operator_new_nothrowj)
<LI> memoryleakwarningplugin.o(.ARM.extab.text._ZL33normal_operator_new_array_nothrowj)
<LI> memoryleakwarningplugin.o(.ARM.extab.text._ZL22normal_operator_deletePv)
<LI> memoryleakwarningplugin.o(.ARM.extab.text._ZL28normal_operator_delete_arrayPv)
<LI> memoryleakwarningplugin.o(.ARM.extab.text._ZL29mem_leak_operator_new_nothrowj)
<LI> memoryleakwarningplugin.o(.ARM.extab.text._ZL35mem_leak_operator_new_array_nothrowj)
<LI> memoryleakwarningplugin.o(.ARM.extab.text._ZL24mem_leak_operator_deletePv)
<LI> memoryleakwarningplugin.o(.ARM.extab.text._ZL30mem_leak_operator_delete_arrayPv)
<LI> memoryleakwarningplugin.o(.ARM.extab.text._ZL32threadsafe_mem_leak_operator_newj)
<LI> memoryleakwarningplugin.o(.ARM.extab.text._ZL40threadsafe_mem_leak_operator_new_nothrowj)
<LI> memoryleakwarningplugin.o(.ARM.extab.text._ZL38threadsafe_mem_leak_operator_new_debugjPKci)
<LI> memoryleakwarningplugin.o(.ARM.extab.text._ZL38threadsafe_mem_leak_operator_new_arrayj)
<LI> memoryleakwarningplugin.o(.ARM.extab.text._ZL46threadsafe_mem_leak_operator_new_array_nothrowj)
<LI> memoryleakwarningplugin.o(.ARM.extab.text._ZL44threadsafe_mem_leak_operator_new_array_debugjPKci)
<LI> memoryleakwarningplugin.o(.ARM.extab.text._ZL35threadsafe_mem_leak_operator_deletePv)
<LI> memoryleakwarningplugin.o(.ARM.extab.text._ZL41threadsafe_mem_leak_operator_delete_arrayPv)
<LI> memoryleakwarningplugin.o(.ARM.extab.text._ZL26threadsafe_mem_leak_mallocjPKci)
<LI> memoryleakwarningplugin.o(.ARM.extab.text._ZL27threadsafe_mem_leak_reallocPvjPKci)
<LI> memoryleakwarningplugin.o(.ARM.extab.text._ZL24threadsafe_mem_leak_freePvPKci)
<LI> memoryleakwarningplugin.o(.ARM.extab.text._Z26crash_on_allocation_numberj)
<LI> memoryleakwarningplugin.o(.ARM.extab.text._ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv)
<LI> simplestring.o(.ARM.extab.text._ZNK12SimpleString14containsNoCaseERKS_)
<LI> simplestring.o(.ARM.extab.text._ZNK12SimpleString5splitERKS_R22SimpleStringCollection)
<LI> simplestring.o(.ARM.extab.text._ZN22SimpleStringCollection8allocateEj)
<LI> simplestring.o(.ARM.extab.text._ZNK12SimpleString9subStringEjj)
<LI> simplestring.o(.ARM.extab.text._ZN22SimpleStringCollectionixEj)
<LI> simplestring.o(.ARM.extab.text._ZN12SimpleStringD2Ev)
<LI> simplestring.o(.ARM.extab.text._ZNK12SimpleString12equalsNoCaseERKS_)
<LI> simplestring.o(.ARM.extab.text._ZNK12SimpleStringplERKS_)
<LI> simplestring.o(.ARM.extab.text._ZN12SimpleString22padStringsToSameLengthERS_S0_c)
<LI> simplestring.o(.ARM.extab.text._Z16StringFromFormatPKcz)
<LI> simplestring.o(.ARM.extab.text._Z10StringFromPKv)
<LI> testfailure.o(.ARM.extab.text._ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjNS_16DifferenceFormatE)
<LI> testfailure.o(.ARM.extab.text._ZN11TestFailure14createUserTextERK12SimpleString)
<LI> testfailure.o(.ARM.extab.text._ZN13EqualsFailureC2EP10UtestShellPKciS3_S3_RK12SimpleString)
<LI> testfailure.o(.ARM.extab.text._ZN13EqualsFailureC2EP10UtestShellPKciRK12SimpleStringS6_S6_)
<LI> testfailure.o(.ARM.extab.text._ZN19DoublesEqualFailureC2EP10UtestShellPKcidddRK12SimpleString)
<LI> testfailure.o(.ARM.extab.text._ZN17CheckEqualFailureC2EP10UtestShellPKciRK12SimpleStringS6_S6_)
<LI> testfailure.o(.ARM.extab.text._ZN15ContainsFailureC2EP10UtestShellPKciRK12SimpleStringS6_S6_)
<LI> testfailure.o(.ARM.extab.text._ZN12CheckFailureC2EP10UtestShellPKciRK12SimpleStringS6_S6_)
<LI> testfailure.o(.ARM.extab.text._ZN11FailFailureC2EP10UtestShellPKciRK12SimpleString)
<LI> testfailure.o(.ARM.extab.text._ZN17LongsEqualFailureC2EP10UtestShellPKcillRK12SimpleString)
<LI> testfailure.o(.ARM.extab.text._ZN25UnsignedLongsEqualFailureC2EP10UtestShellPKcimmRK12SimpleString)
<LI> testfailure.o(.ARM.extab.text._ZN21LongLongsEqualFailureC2EP10UtestShellPKcixxRK12SimpleString)
<LI> testfailure.o(.ARM.extab.text._ZN29UnsignedLongLongsEqualFailureC2EP10UtestShellPKciyyRK12SimpleString)
<LI> testfailure.o(.ARM.extab.text._ZN23SignedBytesEqualFailureC2EP10UtestShellPKciaaRK12SimpleString)
<LI> testfailure.o(.ARM.extab.text._ZN18StringEqualFailureC2EP10UtestShellPKciS3_S3_RK12SimpleString)
<LI> testfailure.o(.ARM.extab.text._ZN24StringEqualNoCaseFailureC2EP10UtestShellPKciS3_S3_RK12SimpleString)
<LI> testfailure.o(.ARM.extab.text._ZN18BinaryEqualFailureC2EP10UtestShellPKciPKhS5_jRK12SimpleString)
<LI> testfailure.o(.ARM.extab.text._ZN16BitsEqualFailureC2EP10UtestShellPKcimmmjRK12SimpleString)
<LI> testfailure.o(.ARM.extab.text._ZN25FeatureUnsupportedFailureC2EP10UtestShellPKciRK12SimpleStringS6_)
<LI> testmemoryallocator.o(.ARM.extab.text._ZN19TestMemoryAllocator12alloc_memoryEjPKci)
<LI> testmemoryallocator.o(.ARM.extab.text._ZN23FailableMemoryAllocator28checkAllFailedAllocsWereDoneEv)
<LI> unittest.o(.ARM.extab.text._ZN35TEST_myFirstUnitTest_API2_TestShell10createTestEv)
<LI> testplugin.o(.ARM.extab.text._Z13CppUTestStorePPv)
<LI> testregistry.o(.ARM.extab.text._ZN12TestRegistry18listTestGroupNamesER10TestResult)
<LI> testregistry.o(.ARM.extab.text._ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult)
<LI> testregistry.o(.ARM.extab.text._ZN12TestRegistry18getCurrentRegistryEv)
<LI> testregistry.o(.ARM.extab.text._ZN12TestRegistry16findTestWithNameERK12SimpleString)
<LI> testregistry.o(.ARM.extab.text._ZN12TestRegistry17findTestWithGroupERK12SimpleString)
<LI> junittestoutput.o(.ARM.extab.text._ZN15JUnitTestOutputC2Ev)
<LI> junittestoutput.o(.ARM.extab.text._ZN15JUnitTestOutputD2Ev)
<LI> junittestoutput.o(.ARM.extab.text._ZN15JUnitTestOutput20resetTestGroupResultEv)
<LI> commandlinearguments.o(.ARM.extab.text._ZN20CommandLineArguments17getParameterFieldEiPPKcRiRK12SimpleString)
<LI> utestplatform.o(.ARM.extab.text._ZL30DummyRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult)
<LI> testoutput.o(.ARM.extab.text._ZN10TestOutput23printCurrentTestStartedERK10UtestShell)
<LI> testoutput.o(.ARM.extab.text._ZN10TestOutput12printFailureERK11TestFailure)
<LI> testoutput.o(.ARM.extab.text._ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure)
<LI> testoutput.o(.ARM.extab.text._ZN10TestOutput26printFileAndLineForFailureERK11TestFailure)
<LI> testoutput.o(.ARM.extab.text._ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringi)
<LI> junittestoutput.o(.ARM.extab.text._ZN19JUnitTestOutputImplC2Ev)
<LI> testfailure.o(.ARM.extab.text._ZN11TestFailureC2EP10UtestShellPKciRK12SimpleString)
<LI> testfailure.o(.ARM.extab.text._ZN11TestFailureC2EP10UtestShellRK12SimpleString)
<LI> testfailure.o(.ARM.extab.text._ZN11TestFailureC2EP10UtestShellPKci)
<LI> simplestring.o(.ARM.extab.text._Z10StringFromPFvvE)
<LI> simplestring.o(.ARM.extab.text._Z13HexStringFroma)
<LI> simplestring.o(.ARM.extab.text._Z17VStringFromFormatPKcSt9__va_list)
<LI> utest.o(.ARM.extab.text._ZN5Utest3runEv)
<LI> memoryleakwarningplugin.o(.ARM.extab.text._ZN25MemoryLeakWarningReporter4failEPc)
<LI> simplemutex.o(.ARM.extab.text._ZN11SimpleMutexD2Ev)
<LI> utest.o(.ARM.extab.text._ZNK10UtestShell16getFormattedNameEv)
<LI> utest.o(.ARM.extab.text._ZNK10UtestShell5matchEPKcPK10TestFilter)
<LI> utest.o(.ARM.extab.text._ZN10UtestShell8failWithERK11TestFailure)
<LI> utest.o(.ARM.extab.text._ZN10UtestShell10assertTrueEbPKcS1_S1_S1_iRK14TestTerminator)
<LI> utest.o(.ARM.extab.text._ZN10UtestShell4failEPKcS1_iRK14TestTerminator)
<LI> utest.o(.ARM.extab.text._ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_iRK14TestTerminator)
<LI> utest.o(.ARM.extab.text._ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_iRK14TestTerminator)
<LI> utest.o(.ARM.extab.text._ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_i)
<LI> utest.o(.ARM.extab.text._ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_i)
<LI> utest.o(.ARM.extab.text._ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_i)
<LI> utest.o(.ARM.extab.text._ZN10UtestShell16assertLongsEqualEllPKcS1_iRK14TestTerminator)
<LI> utest.o(.ARM.extab.text._ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_iRK14TestTerminator)
<LI> utest.o(.ARM.extab.text._ZN10UtestShell20assertLongLongsEqualExxPKcS1_iRK14TestTerminator)
<LI> utest.o(.ARM.extab.text._ZN10UtestShell28assertUnsignedLongLongsEqualEyyPKcS1_iRK14TestTerminator)
<LI> utest.o(.ARM.extab.text._ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_iRK14TestTerminator)
<LI> utest.o(.ARM.extab.text._ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_iRK14TestTerminator)
<LI> utest.o(.ARM.extab.text._ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_iRK14TestTerminator)
<LI> utest.o(.ARM.extab.text._ZN10UtestShell18assertDoublesEqualEdddPKcS1_iRK14TestTerminator)
<LI> utest.o(.ARM.extab.text._ZN22OutsideTestRunnerUTest8instanceEv)
<LI> simplestring.o(.ARM.extab.text._Z16StringFromBinaryPKhj)
<LI> simplestring.o(.ARM.extab.text._Z24StringFromBinaryWithSizePKhj)
<LI> simplestring.o(.ARM.extab.text._Z20StringFromMaskedBitsmmj)
<LI> teamcitytestoutput.o(.ARM.extab.text._ZN18TeamCityTestOutputC2Ev)
<LI> teamcitytestoutput.o(.ARM.extab.text._ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell)
<LI> testfilter.o(.ARM.extab.text._ZN10TestFilterC2ERK12SimpleString)
<LI> testoutput.o(.ARM.extab.text._ZN22StringBufferTestOutput5flushEv)
<LI> testplugin.o(.ARM.extab.text._ZN14NullTestPlugin8instanceEv)
<LI> utest.o(.ARM.extab.text._ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_iRK14TestTerminator)
<LI> utest.o(.ARM.extab.text._ZN10UtestShell15assertBitsEqualEmmmjPKcS1_iRK14TestTerminator)
<LI> utest.o(.ARM.extab.text._ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_iRK14TestTerminator)
<LI> utest.o(.ARM.extab.text._ZN10UtestShell5printEPKcS1_i)
<LI> utest.o(.ARM.extab.text._ZN22OutsideTestRunnerUTestC2Ev)
<LI> cxa_personality.cpp.o(.ARM.extab.text.__cxa_call_unexpected)
<LI> cxa_handlers.cpp.o(.ARM.extab.text._ZSt9terminatev)
<LI> cxa_handlers.cpp.o(.ARM.extab.text._ZSt11__terminatePFvvE)
<LI> cxa_exception.cpp.o(.ARM.extab.text.__cxa_allocate_exception)
<LI> cxa_exception.cpp.o(.ARM.extab.text.__cxa_begin_cleanup)
<LI> cxa_exception.cpp.o(.ARM.extab.text.__cxa_begin_catch)
<LI> cxa_exception.cpp.o(.ARM.extab.text.__cxa_decrement_exception_refcount)
</UL>
<P><STRONG><a name="[3a1]"></a>abort_message</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, abort_message.cpp.o(.text.abort_message))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__unexpected(void(*)())
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
</UL>

<P><STRONG><a name="[388]"></a>decode_eht_entry</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text.decode_eht_entry))
<BR><BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::stepWithEHABI()
</UL>

<P><STRONG><a name="[a7]"></a>fputc</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fputc_debug.o(.text.fputc))
<BR><BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[6b]"></a>main</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = main &rArr; CommandLineTestRunner::RunAllTests(int, const char**) &rArr; CommandLineTestRunner::runAllTestsMain() &rArr; CommandLineTestRunner::parseArguments(TestPlugin*) &rArr; CommandLineArguments::parse(TestPlugin*) &rArr; CommandLineArguments::AddTestToRunBasedOnVerboseOutput(int, const char**, int&, const char*) &rArr; CommandLineArguments::getParameterField(int, const char**, int&, const SimpleString&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::RunAllTests(int, const char**)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1ee]"></a>putchar</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, utestplatform.o(.text.putchar))
<BR><BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data.PlatformSpecificPutchar)
</UL>
<P><STRONG><a name="[230]"></a>unw_get_fpreg</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_get_fpreg))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Get
</UL>

<P><STRONG><a name="[226]"></a>unw_get_proc_info</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_get_proc_info))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::unwindOneFrame(unsigned, _Unwind_Control_Block*, _Unwind_Context*)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_GetRegionStart
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_GetLanguageSpecificData
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
</UL>

<P><STRONG><a name="[22e]"></a>unw_get_reg</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_get_reg))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Pop
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Interpret
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Get
</UL>

<P><STRONG><a name="[22a]"></a>unw_init_local</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_init_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = unw_init_local &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;libunwind::UnwindCursor&lang;libunwind::LocalAddressSpace, libunwind::Registers_arm&rang;::setInfoBasedOnIPRegister(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
</UL>

<P><STRONG><a name="[279]"></a>unw_resume</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_resume))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb
</UL>

<P><STRONG><a name="[22f]"></a>unw_save_vfp_as_X</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_save_vfp_as_X))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Set
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Get
</UL>

<P><STRONG><a name="[235]"></a>unw_set_fpreg</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_set_fpreg))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Set
</UL>

<P><STRONG><a name="[233]"></a>unw_set_reg</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_set_reg))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Pop
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Interpret
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Set
</UL>

<P><STRONG><a name="[2f2]"></a>unw_step</STRONG> (Thumb, 6 bytes, Stack size unknown bytes, libunwind.cpp.o(.text.unw_step))
<BR><BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;unnamed namespace 1&rang;::unwindOneFrame(unsigned, _Unwind_Control_Block*, _Unwind_Context*)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gnu_unwind_frame
</UL>

<P><STRONG><a name="[3b1]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[449]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[287]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZL35PlatformSpecificFPutsImplementationPKcPv
</UL>

<P><STRONG><a name="[44a]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[44b]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[3b3]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[44c]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[44d]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[44e]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1f3]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data.PlatformSpecificVSNprintf)
</UL>
<P><STRONG><a name="[211]"></a>__aligned_malloc</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, mallocra.o(i.__aligned_malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;posix_memalign
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[1e4]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocra.o(i.__free$realloc$memalign))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_free_with_fallback(void*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__free_with_fallback(void*)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data.PlatformSpecificFree)
</UL>
<P><STRONG><a name="[1e8]"></a>malloc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mallocra.o(i.__malloc$realloc$memalign))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aligned_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data.PlatformSpecificMalloc)
</UL>
<P><STRONG><a name="[1ef]"></a>realloc</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, mallocra.o(i.__realloc$memalign))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = realloc &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data.PlatformSpecificRealloc)
</UL>
<P><STRONG><a name="[44f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[450]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[451]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[3af]"></a>putc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, putc.o(i.putc))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[219]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(.text.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[1dc]"></a>_GLOBAL__sub_I_UnitTest.cpp</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, unittest.o(.text._GLOBAL__sub_I_UnitTest.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _GLOBAL__sub_I_UnitTest.cpp &rArr; TestInstaller::TestInstaller(UtestShell&, const char*, const char*, const char*, int) &rArr; TestRegistry::getCurrentRegistry() &rArr; TestRegistry::TestRegistry__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_myFirstUnitTest_API2_TestShell::TEST_myFirstUnitTest_API2_TestShell__sub_object()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_myFirstUnitTest_API1_TestShell::TEST_myFirstUnitTest_API1_TestShell__sub_object()
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestInstaller::TestInstaller(UtestShell&, const char*, const char*, const char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> unittest.o(.init_array)
</UL>
<P><STRONG><a name="[90]"></a>_ZL11normal_freePvPKci</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(.text._ZL11normal_freePvPKci))
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[85]"></a>_ZL13mem_leak_freePvPKci</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, memoryleakwarningplugin.o(.text._ZL13mem_leak_freePvPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = _ZL13mem_leak_freePvPKci &rArr; MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, const char*, int, bool) &rArr; MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, bool) &rArr; MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, int, unsigned, TestMemoryAllocator*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, int, unsigned, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::invalidateMemory(char*)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, const char*, int, bool)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentMallocAllocator()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> memoryleakwarningplugin.o(.data..L_MergedGlobals)
<LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin24turnOnNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[8e]"></a>_ZL13normal_mallocjPKci</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(.text._ZL13normal_mallocjPKci))
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[8f]"></a>_ZL14normal_reallocPvjPKci</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(.text._ZL14normal_reallocPvjPKci))
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[83]"></a>_ZL15mem_leak_mallocjPKci</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, memoryleakwarningplugin.o(.text._ZL15mem_leak_mallocjPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _ZL15mem_leak_mallocjPKci &rArr; getCurrentMallocAllocator() &rArr; setCurrentMallocAllocatorToDefault() &rArr; defaultMallocAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, const char*, int, bool)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentMallocAllocator()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> memoryleakwarningplugin.o(.data..L_MergedGlobals)
<LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin24turnOnNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[84]"></a>_ZL16mem_leak_reallocPvjPKci</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, memoryleakwarningplugin.o(.text._ZL16mem_leak_reallocPvjPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = _ZL16mem_leak_reallocPvjPKci &rArr; MemoryLeakDetector::reallocMemory(TestMemoryAllocator*, char*, unsigned, const char*, int, bool) &rArr; MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, bool) &rArr; MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, int, unsigned, TestMemoryAllocator*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, int, unsigned, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::reallocMemory(TestMemoryAllocator*, char*, unsigned, const char*, int, bool)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentMallocAllocator()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> memoryleakwarningplugin.o(.data..L_MergedGlobals)
<LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin24turnOnNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[86]"></a>_ZL19normal_operator_newj</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(.text._ZL19normal_operator_newj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _ZL19normal_operator_newj &rArr; __cxa_allocate_exception &rArr;  std::terminate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::bad_alloc()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[7b]"></a>_ZL21mem_leak_operator_newj</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(.text._ZL21mem_leak_operator_newj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = _ZL21mem_leak_operator_newj &rArr; getCurrentNewAllocator() &rArr; setCurrentNewAllocatorToDefault() &rArr; defaultNewAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, bool)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::bad_alloc()
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentNewAllocator()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> memoryleakwarningplugin.o(.data..L_MergedGlobals)
<LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin24turnOnNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[8c]"></a>_ZL22normal_operator_deletePv</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(.text._ZL22normal_operator_deletePv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _ZL22normal_operator_deletePv &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[81]"></a>_ZL24mem_leak_operator_deletePv</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(.text._ZL24mem_leak_operator_deletePv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = _ZL24mem_leak_operator_deletePv &rArr; MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, bool) &rArr; MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, const char*, int, bool) &rArr; MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, bool) &rArr; MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, int, unsigned, TestMemoryAllocator*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, int, unsigned, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::invalidateMemory(char*)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, bool)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentNewAllocator()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> memoryleakwarningplugin.o(.data..L_MergedGlobals)
<LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin24turnOnNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[9b]"></a>_ZL24threadsafe_mem_leak_freePvPKci</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, memoryleakwarningplugin.o(.text._ZL24threadsafe_mem_leak_freePvPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = _ZL24threadsafe_mem_leak_freePvPKci &rArr; MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, const char*, int, bool) &rArr; MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, bool) &rArr; MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, int, unsigned, TestMemoryAllocator*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, int, unsigned, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::invalidateMemory(char*)
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, const char*, int, bool)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemLeakScopedMutex::MemLeakScopedMutex__sub_object()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScopedMutexLock::~ScopedMutexLock()
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentMallocAllocator()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin34turnOnThreadSafeNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[89]"></a>_ZL25normal_operator_new_arrayj</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(.text._ZL25normal_operator_new_arrayj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _ZL25normal_operator_new_arrayj &rArr; __cxa_allocate_exception &rArr;  std::terminate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::bad_alloc()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[88]"></a>_ZL25normal_operator_new_debugjPKci</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(.text._ZL25normal_operator_new_debugjPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _ZL25normal_operator_new_debugjPKci &rArr; __cxa_allocate_exception &rArr;  std::terminate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::bad_alloc()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[99]"></a>_ZL26threadsafe_mem_leak_mallocjPKci</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, memoryleakwarningplugin.o(.text._ZL26threadsafe_mem_leak_mallocjPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _ZL26threadsafe_mem_leak_mallocjPKci &rArr; getCurrentMallocAllocator() &rArr; setCurrentMallocAllocatorToDefault() &rArr; defaultMallocAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, const char*, int, bool)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemLeakScopedMutex::MemLeakScopedMutex__sub_object()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScopedMutexLock::~ScopedMutexLock()
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentMallocAllocator()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin34turnOnThreadSafeNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[7e]"></a>_ZL27mem_leak_operator_new_arrayj</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(.text._ZL27mem_leak_operator_new_arrayj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = _ZL27mem_leak_operator_new_arrayj &rArr; getCurrentNewArrayAllocator() &rArr; setCurrentNewArrayAllocatorToDefault() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, bool)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::bad_alloc()
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentNewArrayAllocator()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> memoryleakwarningplugin.o(.data..L_MergedGlobals)
<LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin24turnOnNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[7d]"></a>_ZL27mem_leak_operator_new_debugjPKci</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, memoryleakwarningplugin.o(.text._ZL27mem_leak_operator_new_debugjPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _ZL27mem_leak_operator_new_debugjPKci &rArr; getCurrentNewAllocator() &rArr; setCurrentNewAllocatorToDefault() &rArr; defaultNewAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, const char*, int, bool)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::bad_alloc()
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentNewAllocator()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> memoryleakwarningplugin.o(.data..L_MergedGlobals)
<LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin24turnOnNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[87]"></a>_ZL27normal_operator_new_nothrowj</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(.text._ZL27normal_operator_new_nothrowj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _ZL27normal_operator_new_nothrowj &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[9a]"></a>_ZL27threadsafe_mem_leak_reallocPvjPKci</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, memoryleakwarningplugin.o(.text._ZL27threadsafe_mem_leak_reallocPvjPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = _ZL27threadsafe_mem_leak_reallocPvjPKci &rArr; MemoryLeakDetector::reallocMemory(TestMemoryAllocator*, char*, unsigned, const char*, int, bool) &rArr; MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, bool) &rArr; MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, int, unsigned, TestMemoryAllocator*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, int, unsigned, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::reallocMemory(TestMemoryAllocator*, char*, unsigned, const char*, int, bool)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemLeakScopedMutex::MemLeakScopedMutex__sub_object()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScopedMutexLock::~ScopedMutexLock()
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentMallocAllocator()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin34turnOnThreadSafeNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[8d]"></a>_ZL28normal_operator_delete_arrayPv</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(.text._ZL28normal_operator_delete_arrayPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _ZL28normal_operator_delete_arrayPv &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[7c]"></a>_ZL29mem_leak_operator_new_nothrowj</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(.text._ZL29mem_leak_operator_new_nothrowj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = _ZL29mem_leak_operator_new_nothrowj &rArr; getCurrentNewAllocator() &rArr; setCurrentNewAllocatorToDefault() &rArr; defaultNewAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, bool)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentNewAllocator()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> memoryleakwarningplugin.o(.data..L_MergedGlobals)
<LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin24turnOnNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[82]"></a>_ZL30mem_leak_operator_delete_arrayPv</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(.text._ZL30mem_leak_operator_delete_arrayPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = _ZL30mem_leak_operator_delete_arrayPv &rArr; MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, bool) &rArr; MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, const char*, int, bool) &rArr; MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, bool) &rArr; MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, int, unsigned, TestMemoryAllocator*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, int, unsigned, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::invalidateMemory(char*)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, bool)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentNewArrayAllocator()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> memoryleakwarningplugin.o(.data..L_MergedGlobals)
<LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin24turnOnNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[8b]"></a>_ZL31normal_operator_new_array_debugjPKci</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(.text._ZL31normal_operator_new_array_debugjPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _ZL31normal_operator_new_array_debugjPKci &rArr; __cxa_allocate_exception &rArr;  std::terminate() (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::bad_alloc()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[91]"></a>_ZL32threadsafe_mem_leak_operator_newj</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, memoryleakwarningplugin.o(.text._ZL32threadsafe_mem_leak_operator_newj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = _ZL32threadsafe_mem_leak_operator_newj &rArr; getCurrentNewAllocator() &rArr; setCurrentNewAllocatorToDefault() &rArr; defaultNewAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, bool)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::bad_alloc()
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemLeakScopedMutex::MemLeakScopedMutex__sub_object()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScopedMutexLock::~ScopedMutexLock()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentNewAllocator()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin34turnOnThreadSafeNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[80]"></a>_ZL33mem_leak_operator_new_array_debugjPKci</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, memoryleakwarningplugin.o(.text._ZL33mem_leak_operator_new_array_debugjPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _ZL33mem_leak_operator_new_array_debugjPKci &rArr; getCurrentNewArrayAllocator() &rArr; setCurrentNewArrayAllocatorToDefault() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, const char*, int, bool)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::bad_alloc()
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentNewArrayAllocator()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> memoryleakwarningplugin.o(.data..L_MergedGlobals)
<LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin24turnOnNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[8a]"></a>_ZL33normal_operator_new_array_nothrowj</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(.text._ZL33normal_operator_new_array_nothrowj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _ZL33normal_operator_new_array_nothrowj &rArr; __clang_call_terminate &rArr; __cxa_begin_catch &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[7f]"></a>_ZL35mem_leak_operator_new_array_nothrowj</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(.text._ZL35mem_leak_operator_new_array_nothrowj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = _ZL35mem_leak_operator_new_array_nothrowj &rArr; getCurrentNewArrayAllocator() &rArr; setCurrentNewArrayAllocatorToDefault() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, bool)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentNewArrayAllocator()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> memoryleakwarningplugin.o(.data..L_MergedGlobals)
<LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin24turnOnNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[97]"></a>_ZL35threadsafe_mem_leak_operator_deletePv</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, memoryleakwarningplugin.o(.text._ZL35threadsafe_mem_leak_operator_deletePv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = _ZL35threadsafe_mem_leak_operator_deletePv &rArr; MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, bool) &rArr; MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, const char*, int, bool) &rArr; MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, bool) &rArr; MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, int, unsigned, TestMemoryAllocator*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, int, unsigned, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::invalidateMemory(char*)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, bool)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemLeakScopedMutex::MemLeakScopedMutex__sub_object()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScopedMutexLock::~ScopedMutexLock()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentNewAllocator()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin34turnOnThreadSafeNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[94]"></a>_ZL38threadsafe_mem_leak_operator_new_arrayj</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, memoryleakwarningplugin.o(.text._ZL38threadsafe_mem_leak_operator_new_arrayj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = _ZL38threadsafe_mem_leak_operator_new_arrayj &rArr; getCurrentNewArrayAllocator() &rArr; setCurrentNewArrayAllocatorToDefault() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, bool)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::bad_alloc()
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemLeakScopedMutex::MemLeakScopedMutex__sub_object()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScopedMutexLock::~ScopedMutexLock()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentNewArrayAllocator()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin34turnOnThreadSafeNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[93]"></a>_ZL38threadsafe_mem_leak_operator_new_debugjPKci</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, memoryleakwarningplugin.o(.text._ZL38threadsafe_mem_leak_operator_new_debugjPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _ZL38threadsafe_mem_leak_operator_new_debugjPKci &rArr; getCurrentNewAllocator() &rArr; setCurrentNewAllocatorToDefault() &rArr; defaultNewAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, const char*, int, bool)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::bad_alloc()
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemLeakScopedMutex::MemLeakScopedMutex__sub_object()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScopedMutexLock::~ScopedMutexLock()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentNewAllocator()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin34turnOnThreadSafeNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[92]"></a>_ZL40threadsafe_mem_leak_operator_new_nothrowj</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, memoryleakwarningplugin.o(.text._ZL40threadsafe_mem_leak_operator_new_nothrowj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = _ZL40threadsafe_mem_leak_operator_new_nothrowj &rArr; getCurrentNewAllocator() &rArr; setCurrentNewAllocatorToDefault() &rArr; defaultNewAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, bool)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemLeakScopedMutex::MemLeakScopedMutex__sub_object()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScopedMutexLock::~ScopedMutexLock()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentNewAllocator()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin34turnOnThreadSafeNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[98]"></a>_ZL41threadsafe_mem_leak_operator_delete_arrayPv</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, memoryleakwarningplugin.o(.text._ZL41threadsafe_mem_leak_operator_delete_arrayPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = _ZL41threadsafe_mem_leak_operator_delete_arrayPv &rArr; MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, bool) &rArr; MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, const char*, int, bool) &rArr; MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, bool) &rArr; MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, int, unsigned, TestMemoryAllocator*, const char*, int, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, int, unsigned, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::invalidateMemory(char*)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, bool)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemLeakScopedMutex::MemLeakScopedMutex__sub_object()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScopedMutexLock::~ScopedMutexLock()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentNewArrayAllocator()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin34turnOnThreadSafeNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[96]"></a>_ZL44threadsafe_mem_leak_operator_new_array_debugjPKci</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, memoryleakwarningplugin.o(.text._ZL44threadsafe_mem_leak_operator_new_array_debugjPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _ZL44threadsafe_mem_leak_operator_new_array_debugjPKci &rArr; getCurrentNewArrayAllocator() &rArr; setCurrentNewArrayAllocatorToDefault() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, const char*, int, bool)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::bad_alloc::bad_alloc()
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemLeakScopedMutex::MemLeakScopedMutex__sub_object()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScopedMutexLock::~ScopedMutexLock()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentNewArrayAllocator()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin34turnOnThreadSafeNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[95]"></a>_ZL46threadsafe_mem_leak_operator_new_array_nothrowj</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, memoryleakwarningplugin.o(.text._ZL46threadsafe_mem_leak_operator_new_array_nothrowj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = _ZL46threadsafe_mem_leak_operator_new_array_nothrowj &rArr; getCurrentNewArrayAllocator() &rArr; setCurrentNewArrayAllocatorToDefault() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__clang_call_terminate
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, bool)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemLeakScopedMutex::MemLeakScopedMutex__sub_object()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScopedMutexLock::~ScopedMutexLock()
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentNewArrayAllocator()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.text._ZN23MemoryLeakWarningPlugin34turnOnThreadSafeNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[9d]"></a>_ZL16helperDoTestBodyPv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utest.o(.text._ZL16helperDoTestBodyPv))
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.text._ZN5Utest3runEv)
</UL>
<P><STRONG><a name="[9c]"></a>_ZL17helperDoTestSetupPv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utest.o(.text._ZL17helperDoTestSetupPv))
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.text._ZN5Utest3runEv)
</UL>
<P><STRONG><a name="[77]"></a>_ZL18defaultCrashMethodv</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utest.o(.text._ZL18defaultCrashMethodv))
<BR>[Address Reference Count : 2]<UL><LI> utest.o(.text._ZN10UtestShell16resetCrashMethodEv)
<LI> utest.o(.data._ZL21pleaseCrashMeRightNow)
</UL>
<P><STRONG><a name="[9e]"></a>_ZL20helperDoTestTeardownPv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utest.o(.text._ZL20helperDoTestTeardownPv))
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.text._ZN5Utest3runEv)
</UL>
<P><STRONG><a name="[75]"></a>_ZL33helperDoRunOneTestSeperateProcessPv</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, utest.o(.text._ZL33helperDoRunOneTestSeperateProcessPv))
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.text._ZN10UtestShell10runOneTestEP10TestPluginR10TestResult)
</UL>
<P><STRONG><a name="[74]"></a>_ZL34helperDoRunOneTestInCurrentProcessPv</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, utest.o(.text._ZL34helperDoRunOneTestInCurrentProcessPv))
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.text._ZN10UtestShell10runOneTestEP10TestPluginR10TestResult)
</UL>
<P><STRONG><a name="[1ec]"></a>_ZL14DummyMutexLockPv</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utestplatform.o(.text._ZL14DummyMutexLockPv))
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data.PlatformSpecificMutexLock)
</UL>
<P><STRONG><a name="[1ea]"></a>_ZL16DummyMutexCreatev</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utestplatform.o(.text._ZL16DummyMutexCreatev))
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data.PlatformSpecificMutexCreate)
</UL>
<P><STRONG><a name="[1ed]"></a>_ZL16DummyMutexUnlockPv</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utestplatform.o(.text._ZL16DummyMutexUnlockPv))
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data.PlatformSpecificMutexUnlock)
</UL>
<P><STRONG><a name="[1eb]"></a>_ZL17DummyMutexDestroyPv</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utestplatform.o(.text._ZL17DummyMutexDestroyPv))
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data.PlatformSpecificMutexDestroy)
</UL>
<P><STRONG><a name="[1e5]"></a>_ZL19IsInfImplementationd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utestplatform.o(.text._ZL19IsInfImplementationd))
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data.PlatformSpecificIsInf)
</UL>
<P><STRONG><a name="[1e6]"></a>_ZL19IsNanImplementationd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utestplatform.o(.text._ZL19IsNanImplementationd))
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data.PlatformSpecificIsNan)
</UL>
<P><STRONG><a name="[1de]"></a>_ZL24TimeStringImplementationv</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, utestplatform.o(.text._ZL24TimeStringImplementationv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _ZL24TimeStringImplementationv &rArr; ctime &rArr; asctime
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data.GetPlatformSpecificTimeString)
</UL>
<P><STRONG><a name="[1dd]"></a>_ZL26TimeInMillisImplementationv</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, utestplatform.o(.text._ZL26TimeInMillisImplementationv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ZL26TimeInMillisImplementationv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data.GetPlatformSpecificTimeInMillis)
</UL>
<P><STRONG><a name="[1f1]"></a>_ZL30DummyRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult</STRONG> (Thumb, 140 bytes, Stack size 56 bytes, utestplatform.o(.text._ZL30DummyRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = _ZL30DummyRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult &rArr; TestFailure::TestFailure(UtestShell*, const SimpleString&) &rArr; UtestShell::getName() const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, int) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __aligned_malloc &rArr; internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const SimpleString&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data.PlatformSpecificRunTestInASeperateProcess)
</UL>
<P><STRONG><a name="[1e0]"></a>_ZL35PlatformSpecificFOpenImplementationPKcS0_</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utestplatform.o(.text._ZL35PlatformSpecificFOpenImplementationPKcS0_))
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data.PlatformSpecificFOpen)
</UL>
<P><STRONG><a name="[1e1]"></a>_ZL35PlatformSpecificFPutsImplementationPKcPv</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, utestplatform.o(.text._ZL35PlatformSpecificFPutsImplementationPKcPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ZL35PlatformSpecificFPutsImplementationPKcPv &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data.PlatformSpecificFPuts)
</UL>
<P><STRONG><a name="[1e3]"></a>_ZL35PlatformSpecificFlushImplementationv</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utestplatform.o(.text._ZL35PlatformSpecificFlushImplementationv))
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data.PlatformSpecificFlush)
</UL>
<P><STRONG><a name="[1df]"></a>_ZL36PlatformSpecificFCloseImplementationPv</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utestplatform.o(.text._ZL36PlatformSpecificFCloseImplementationPv))
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data.PlatformSpecificFClose)
</UL>
<P><STRONG><a name="[1f2]"></a>_ZL36PlatformSpecificSetJmpImplementationPFvPvES_</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, utestplatform.o(.text._ZL36PlatformSpecificSetJmpImplementationPFvPvES_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _ZL36PlatformSpecificSetJmpImplementationPFvPvES_ &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data.PlatformSpecificSetJmp)
</UL>
<P><STRONG><a name="[1e7]"></a>_ZL37PlatformSpecificLongJmpImplementationv</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, utestplatform.o(.text._ZL37PlatformSpecificLongJmpImplementationv))
<BR><BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data.PlatformSpecificLongJmp)
</UL>
<P><STRONG><a name="[1f0]"></a>_ZL47PlatformSpecificRestoreJumpBufferImplementationv</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, utestplatform.o(.text._ZL47PlatformSpecificRestoreJumpBufferImplementationv))
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data.PlatformSpecificRestoreJumpBuffer)
</UL>
<P><STRONG><a name="[2c9]"></a>_ZN10__cxxabiv1L12failed_throwEPNS_15__cxa_exceptionE</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text._ZN10__cxxabiv1L12failed_throwEPNS_15__cxa_exceptionE))
<BR><BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_throw
</UL>

<P><STRONG><a name="[a6]"></a>_ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text._ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _ZN10__cxxabiv1L22exception_cleanup_funcE19_Unwind_Reason_CodeP21_Unwind_Control_Block &rArr; std::__terminate(void(*)()) &rArr;  __cxa_begin_catch (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_decrement_exception_refcount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxa_exception.cpp.o(.text.__cxa_throw)
</UL>
<P><STRONG><a name="[a5]"></a>_ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text._ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _ZN10__cxxabiv1L27dependent_exception_cleanupE19_Unwind_Reason_CodeP21_Unwind_Control_Block &rArr; std::__terminate(void(*)()) &rArr;  __cxa_begin_catch (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_free_with_fallback(void*)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_decrement_exception_refcount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxa_exception.cpp.o(.text.__cxa_rethrow_primary_exception)
</UL>
<P><STRONG><a name="[1f4]"></a>__cxa_end_cleanup_impl</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, cxa_exception.cpp.o(.text.__cxa_end_cleanup_impl), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __cxa_end_cleanup_impl &rArr; std::terminate() &rArr;  __clang_call_terminate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[2c4]"></a>_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context</STRONG> (Thumb, 928 bytes, Stack size unknown bytes, cxa_personality.cpp.o(.text._ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context))
<BR><BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Get
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_GetRegionStart
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_GetLanguageSpecificData
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L24exception_spec_can_catchExPKhhPKNS_16__shim_type_infoEPvP21_Unwind_Control_Block
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L18readEncodedPointerEPPKhh
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gxx_personality_v0
</UL>

<P><STRONG><a name="[2cc]"></a>_ZN10__cxxabiv1L13set_registersEP21_Unwind_Control_BlockP15_Unwind_ContextRKNS_12_GLOBAL__N_112scan_resultsE</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, cxa_personality.cpp.o(.text._ZN10__cxxabiv1L13set_registersEP21_Unwind_Control_BlockP15_Unwind_ContextRKNS_12_GLOBAL__N_112scan_resultsE))
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Set
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_VRS_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gxx_personality_v0
</UL>

<P><STRONG><a name="[2c7]"></a>_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, cxa_personality.cpp.o(.text._ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block))
<BR><BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__terminate(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gxx_personality_v0
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L24exception_spec_can_catchExPKhhPKNS_16__shim_type_infoEPvP21_Unwind_Control_Block
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[2c6]"></a>_ZN10__cxxabiv1L18readEncodedPointerEPPKhh</STRONG> (Thumb, 310 bytes, Stack size unknown bytes, cxa_personality.cpp.o(.text._ZN10__cxxabiv1L18readEncodedPointerEPPKhh))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[2c8]"></a>_ZN10__cxxabiv1L24exception_spec_can_catchExPKhhPKNS_16__shim_type_infoEPvP21_Unwind_Control_Block</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, cxa_personality.cpp.o(.text._ZN10__cxxabiv1L24exception_spec_can_catchExPKhhPKNS_16__shim_type_infoEPvP21_Unwind_Control_Block))
<BR><BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L14call_terminateEbP21_Unwind_Control_Block
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ZN10__cxxabiv1L11scan_eh_tabERNS_12_GLOBAL__N_112scan_resultsE14_Unwind_ActionbP21_Unwind_Control_BlockP15_Unwind_Context
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_unexpected
</UL>

<P><STRONG><a name="[22b]"></a>_ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb</STRONG> (Thumb, 168 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = _ZL13unwind_phase2P13unw_context_tP12unw_cursor_tP21_Unwind_Control_Blockb &rArr; unw_init_local &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_set_reg
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_resume
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_init_local
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_reg
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_proc_info
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Resume
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_RaiseException
</UL>

<P><STRONG><a name="[2f1]"></a>&lang;unnamed namespace 1&rang;::unwindOneFrame(unsigned, _Unwind_Control_Block*, _Unwind_Context*)</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, Unwind-EHABI.cpp.o(.text._ZN12_GLOBAL__N_114unwindOneFrameEjP21_Unwind_Control_BlockP15_Unwind_Context))
<BR><BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_step
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unw_get_proc_info
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_unwind_cpp_pr0
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_unwind_cpp_pr1
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_unwind_cpp_pr2
</UL>

<P><STRONG><a name="[3b5]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3b2]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[3b8]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3b7]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a8]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[3b4]"></a>internal_alloc</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, mallocra.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = internal_alloc &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aligned_malloc
</UL>

<P><STRONG><a name="[2bf]"></a>&lang;unnamed namespace 1&rang;::fallback_free(void*)</STRONG> (Thumb, 156 bytes, Stack size unknown bytes, fallback_malloc.cpp.o(.text._ZN12_GLOBAL__N_113fallback_freeEPv))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_free_with_fallback(void*)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__free_with_fallback(void*)
</UL>

<P><STRONG><a name="[2c1]"></a>&lang;unnamed namespace 1&rang;::fallback_malloc(unsigned)</STRONG> (Thumb, 146 bytes, Stack size unknown bytes, fallback_malloc.cpp.o(.text._ZN12_GLOBAL__N_115fallback_mallocEj))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__aligned_malloc_with_fallback(unsigned)
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__calloc_with_fallback(unsigned, unsigned)
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
